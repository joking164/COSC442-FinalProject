<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_A1VxgFJREeiyW7NaN4qWdw" name="server_generator">
    <eAnnotations xmi:id="_BxTDcFJREeiyW7NaN4qWdw" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_BxTDcVJREeiyW7NaN4qWdw" source="codegen">
        <details xmi:id="_BxTDclJREeiyW7NaN4qWdw" key="codegenDirectory" value="/COSC442-FinalProject/src"/>
        <details xmi:id="_C8C_UFJREeiyW7NaN4qWdw" key="AssociatedSourceCode" value="/COSC442-FinalProject/src/net/sf/freecol/server/generator/ColonizationMapLoader.java;1506413918/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/FreeColMapLoader.java;2878317258/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/MapGenerator.java;443832896/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/MapLayerGenerator.java;687848729/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/MapLoader.java;3910476063/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/River.java;901472447/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/RiverSection.java;4179529152/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/SimpleMapGenerator.java;1658798921/1;/COSC442-FinalProject/src/net/sf/freecol/server/generator/TerrainGenerator.java;3083000149/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_CJA_4FJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_CJA_4VJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_CJA_4lJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_CJA_41JREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_CJA_5FJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_CJA_5VJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_CJA_5lJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_CJA_51JREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_CJA_6FJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_CIFLwFJREeiyW7NaN4qWdw" name="net">
      <packagedElement xmi:type="uml:Package" xmi:id="_CIFy0FJREeiyW7NaN4qWdw" name="sf">
        <packagedElement xmi:type="uml:Package" xmi:id="_CIFy0VJREeiyW7NaN4qWdw" name="freecol">
          <packagedElement xmi:type="uml:Package" xmi:id="_CIFy0lJREeiyW7NaN4qWdw" name="server">
            <packagedElement xmi:type="uml:Package" xmi:id="_CIHoAFJREeiyW7NaN4qWdw" name="generator">
              <packagedElement xmi:type="uml:Class" xmi:id="_CI_xwFJREeiyW7NaN4qWdw" name="ColonizationMapLoader">
                <ownedComment xmi:id="_CYHy4FJREeiyW7NaN4qWdw">
                  <body>Just pass the name of a Colonization map file (with extension &quot;.MP&quot;).&#xD;
 *&#xD;
The map file starts with a six-byte header. Byte zero encodes the&#xD;
map width, byte two encodes the map height. The function of the&#xD;
other bytes is unknown, their values, however, are fixed. The&#xD;
header is followed by three &quot;layers&quot;, each the size of the map. The&#xD;
first &quot;layer&quot; encodes the terrain type. The function of the other&#xD;
layers is unknown. They are filled with zero bytes.&#xD;
 *&#xD;
It seems that the least significant three bits encode the basic&#xD;
terrain type, the next two bits encode the forest overlay and&#xD;
the special tile types ice, ocean and sea lanes. The three most&#xD;
significant bits encode combinations of the hill, mountain and&#xD;
river overlays.&#xD;
 *&#xD;
bits 0-2: tile type&#xD;
bit 3 (8): forest&#xD;
bit 4 (16): forest&#xD;
bits 3+4 (24): special, values larger than 26 are not defined&#xD;
 *&#xD;
bits 5-7: overlays&#xD;
0: nothing&#xD;
1: hill&#xD;
2: minor river&#xD;
3: hill + minor river (extremely rare)&#xD;
4: nothing&#xD;
5: mountain&#xD;
6: major river&#xD;
7: mountain + major river (never seen)</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CXs8IFJREeiyW7NaN4qWdw" name="WIDTH" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXs8IVJREeiyW7NaN4qWdw" value="0"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXs8IlJREeiyW7NaN4qWdw" name="HEIGHT" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXs8I1JREeiyW7NaN4qWdw" value="2"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXs8JFJREeiyW7NaN4qWdw" name="OCEAN" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXs8JVJREeiyW7NaN4qWdw" value="25"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXtjMFJREeiyW7NaN4qWdw" name="HIGH_SEAS" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXtjMVJREeiyW7NaN4qWdw" value="26"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXtjMlJREeiyW7NaN4qWdw" name="tiletypes" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXtjM1JREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXtjNVJREeiyW7NaN4qWdw" value="{&#xD;&#xA;        &quot;tundra&quot;,&#xD;&#xA;        &quot;desert&quot;,&#xD;&#xA;        &quot;plains&quot;,&#xD;&#xA;        &quot;prairie&quot;,&#xD;&#xA;        &quot;grassland&quot;,&#xD;&#xA;        &quot;savannah&quot;,&#xD;&#xA;        &quot;marsh&quot;,&#xD;&#xA;        &quot;swamp&quot;,&#xD;&#xA;        &quot;borealForest&quot;,&#xD;&#xA;        &quot;scrubForest&quot;,&#xD;&#xA;        &quot;mixedForest&quot;,&#xD;&#xA;        &quot;broadleafForest&quot;,&#xD;&#xA;        &quot;coniferForest&quot;,&#xD;&#xA;        &quot;tropicalForest&quot;,&#xD;&#xA;        &quot;wetlandForest&quot;,&#xD;&#xA;        &quot;rainForest&quot;,&#xD;&#xA;        &quot;borealForest&quot;,&#xD;&#xA;        &quot;scrubForest&quot;,&#xD;&#xA;        &quot;mixedForest&quot;,&#xD;&#xA;        &quot;broadleafForest&quot;,&#xD;&#xA;        &quot;coniferForest&quot;,&#xD;&#xA;        &quot;tropicalForest&quot;,&#xD;&#xA;        &quot;wetlandForest&quot;,&#xD;&#xA;        &quot;rainForest&quot;,&#xD;&#xA;        &quot;arctic&quot;,&#xD;&#xA;        &quot;ocean&quot;,&#xD;&#xA;        &quot;highSeas&quot;,&#xD;&#xA;    }"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXtjNlJREeiyW7NaN4qWdw" name="header" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXuKQFJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXuKQlJREeiyW7NaN4qWdw" value="{&#xD;&#xA;        58, 0, 72, 0, 4, 0&#xD;&#xA;    }"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXuKQ1JREeiyW7NaN4qWdw" name="layer1" visibility="private" isStatic="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXuKRFJREeiyW7NaN4qWdw" value="*"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_CVUWgVJREeiyW7NaN4qWdw" client="_CI_xwFJREeiyW7NaN4qWdw" supplier="_CJPCUFJREeiyW7NaN4qWdw" contract="_CJPCUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_QAFJREeiyW7NaN4qWdw" name="ColonizationMapLoader" specification="_CXF4IlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_QAVJREeiyW7NaN4qWdw" name="file" type="_CVQFEFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_QAlJREeiyW7NaN4qWdw" type="_CI_xwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>RandomAccessFile reader = new RandomAccessFile(file, &quot;r&quot;);&#xD;
     reader.read(header);&#xD;
&#xD;
     int size = header[WIDTH] * header[HEIGHT];&#xD;
     layer1 = new byte[size];&#xD;
     reader.read(layer1);&#xD;
&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_QA1JREeiyW7NaN4qWdw" name="loadMap" specification="_CXGfM1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_QBFJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_QBVJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_QBlJREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Specification spec = game.getSpecification();&#xD;
     Tile[][] tiles = new Tile[header[WIDTH]][header[HEIGHT]];&#xD;
     Layer highestLayer = layer.compareTo(getHighestLayer()) &lt; 0&#xD;
         ? layer : getHighestLayer();&#xD;
     int index = 0;&#xD;
     TileType tileType = null;&#xD;
     if (highestLayer == Layer.LAND) {&#xD;
         // import only the land / water distinction&#xD;
         for (int y = 0; y &lt; header[HEIGHT]; y++) {&#xD;
             for (int x = 0; x &lt; header[WIDTH]; x++) {&#xD;
                 int decimal = layer1[index] &amp; 0xff;&#xD;
                 int terrain = decimal &amp; 0b11111;&#xD;
                 tileType = (terrain == OCEAN || terrain == HIGH_SEAS) ?&#xD;
                     TileType.WATER : TileType.LAND;&#xD;
                 index++;&#xD;
             }&#xD;
         }&#xD;
     } else {&#xD;
         TileImprovementType riverType = spec.getTileImprovementType(&quot;model.improvement.river&quot;);&#xD;
         for (int y = 0; y &lt; header[HEIGHT]; y++) {&#xD;
             for (int x = 0; x &lt; header[WIDTH]; x++) {&#xD;
                 int decimal = layer1[index] &amp; 0xff;&#xD;
                 int terrain = decimal &amp; 0b11111;&#xD;
                 int overlay = decimal >> 5;&#xD;
&#xD;
                 if (terrain &lt; tiletypes.length) {&#xD;
                     tileType = spec.getTileType(&quot;model.tile.&quot; + tiletypes[terrain]);&#xD;
                 } else if (overlay == 1 || overlay == 3) {&#xD;
                     tileType = spec.getTileType(&quot;model.tile.hills&quot;);&#xD;
                 } else if (overlay == 5 || overlay == 7) {&#xD;
                     tileType = spec.getTileType(&quot;model.tile.mountains&quot;);&#xD;
                 }&#xD;
                 tiles[x][y] = new Tile(game, tileType, x, y);&#xD;
                 if (highestLayer == Layer.RIVERS&#xD;
                     &amp;&amp; (overlay == 2 || overlay == 3 || overlay == 6 || overlay == 7)) {&#xD;
                     TileItemContainer container = new TileItemContainer(game, tiles[x][y]);&#xD;
                     TileImprovement river =&#xD;
                         new TileImprovement(game, tiles[x][y], riverType);&#xD;
                     river.setMagnitude (overlay &lt;= 3 ? 1 : 2);&#xD;
                     container.addTileItem(river);&#xD;
                     tiles[x][y].setTileItemContainer(container);&#xD;
                 }&#xD;
                 index++;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     return highestLayer;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_QB1JREeiyW7NaN4qWdw" name="getHighestLayer" specification="_CJCOAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_QCFJREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return Layer.RIVERS;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJCOAFJREeiyW7NaN4qWdw" name="getHighestLayer" method="_CX_QB1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXHGQ1JREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXF4IlJREeiyW7NaN4qWdw" name="ColonizationMapLoader" method="_CX_QAFJREeiyW7NaN4qWdw" raisedException="_CXF4IFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXGfMFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXGfMVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_CXF4I1JREeiyW7NaN4qWdw" name="file" type="_CVQFEFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXGfMlJREeiyW7NaN4qWdw" type="_CI_xwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXGfM1JREeiyW7NaN4qWdw" name="loadMap" method="_CX_QA1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXGfNFJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXGfNVJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXGfNlJREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CJJiwFJREeiyW7NaN4qWdw" name="FreeColMapLoader">
                <ownedComment xmi:id="_CYIZ8FJREeiyW7NaN4qWdw">
                  <body>Load a map.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CXuxUlJREeiyW7NaN4qWdw" name="importGame" visibility="private" isLeaf="true" type="_CVZPAVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYNScFJREeiyW7NaN4qWdw"/>
                <interfaceRealization xmi:id="_CVadIVJREeiyW7NaN4qWdw" client="_CJJiwFJREeiyW7NaN4qWdw" supplier="_CJPCUFJREeiyW7NaN4qWdw" contract="_CJPCUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_3EFJREeiyW7NaN4qWdw" name="FreeColMapLoader" specification="_CXHtUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_3EVJREeiyW7NaN4qWdw" name="file" type="_CVQFEFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_3ElJREeiyW7NaN4qWdw" type="_CJJiwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>importGame = FreeColServer.readGame(new FreeColSavegameFile(file), null, null);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_3E1JREeiyW7NaN4qWdw" name="loadMap" specification="_CXIUYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_3FFJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_3FVJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CX_3FlJREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Map importMap = importGame.getMap();&#xD;
     Layer highestLayer = layer.compareTo(importMap.getLayer()) &lt; 0&#xD;
         ? layer : importMap.getLayer();&#xD;
     int width = importMap.getWidth();&#xD;
     int height = importMap.getHeight();&#xD;
&#xD;
     java.util.Map&lt;String, ServerRegion> regions = new HashMap&lt;>();&#xD;
&#xD;
     Map map = new Map(game, width, height);&#xD;
     if (highestLayer == Layer.LAND) {&#xD;
         // import only the land / water distinction&#xD;
         for (int x = 0; x &lt; width; x++) {&#xD;
             for (int y = 0; y &lt; height; y++) {&#xD;
                 Tile t = new Tile(game,&#xD;
                     (importMap.getTile(x, y).getType().isWater())&#xD;
                     ? TileType.WATER : TileType.LAND,&#xD;
                     x, y);&#xD;
                 map.setTile(t, x, y);&#xD;
             }&#xD;
         }&#xD;
     } else {&#xD;
         for (int x = 0; x &lt; width; x++) {&#xD;
             for (int y = 0; y &lt; height; y++) {&#xD;
                 Tile template = importMap.getTile(x, y);&#xD;
                 Tile tile = new Tile(game, null, x, y);&#xD;
                 map.setTile(tile, x, y);&#xD;
&#xD;
                 // import tile types&#xD;
                 tile.setType(game.getSpecification().getTileType(template.getType().getId()));&#xD;
                 tile.setMoveToEurope(template.getMoveToEurope());&#xD;
                 if (highestLayer.compareTo(Layer.REGIONS) >= 0) {&#xD;
                     // import regions&#xD;
                     Region region = template.getRegion();&#xD;
                     if (region != null) {&#xD;
                         ServerRegion ours = regions.get(region.getId());&#xD;
                         if (ours == null) {&#xD;
                             ours = new ServerRegion(game, region);&#xD;
                             regions.put(region.getId(), ours);&#xD;
                         }&#xD;
                         tile.setRegion(ours);&#xD;
                         ours.addTile(tile);&#xD;
                     }&#xD;
                     if (highestLayer.compareTo(Layer.RIVERS) >= 0) {&#xD;
                         // import tile improvements&#xD;
                         tile.setTileItemContainer(new TileItemContainer(game, tile, template&#xD;
                                                                         .getTileItemContainer(), layer));&#xD;
                         if (layer.compareTo(Layer.NATIVES) >= 0) {&#xD;
                             // import native settlements&#xD;
                             if (template.getOwner() != null) {&#xD;
                                 String nationId = template.getOwner().getNationId();&#xD;
                                 Player player = game.getPlayerByNationId(nationId);&#xD;
                                 if (player == null) {&#xD;
                                     Nation nation = game.getSpecification().getNation(nationId);&#xD;
                                     player = new ServerPlayer(game, false, nation, null, null);&#xD;
                                     game.addPlayer(player);&#xD;
                                 }&#xD;
                                 tile.setOwner(player);&#xD;
                                 if (template.getOwningSettlement() != null) {&#xD;
                                     IndianSettlement settlement = (IndianSettlement) template.getOwningSettlement();&#xD;
                                     tile.setOwningSettlement(new ServerIndianSettlement(game,&#xD;
                                         player, tile, settlement));&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     for (Region region : regions.values()) {&#xD;
         map.addRegion(region);&#xD;
     }&#xD;
     map.setLayer(highestLayer);&#xD;
     game.setMap(map);&#xD;
     return highestLayer;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_3F1JREeiyW7NaN4qWdw" name="getHighestLayer" specification="_CJKw4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CX_3GFJREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return Layer.NATIVES;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJKw4FJREeiyW7NaN4qWdw" name="getHighestLayer" method="_CX_3F1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXI7c1JREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXHtUFJREeiyW7NaN4qWdw" name="FreeColMapLoader" method="_CX_3EFJREeiyW7NaN4qWdw" raisedException="_CXF4IFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXHtUlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXHtU1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_CXHtUVJREeiyW7NaN4qWdw" name="file" type="_CVQFEFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXHtVFJREeiyW7NaN4qWdw" type="_CJJiwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXIUYFJREeiyW7NaN4qWdw" name="loadMap" method="_CX_3E1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXIUYVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXIUYlJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXIUY1JREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_CJMmEFJREeiyW7NaN4qWdw" name="MapGenerator">
                <ownedComment xmi:id="_CYIZ8VJREeiyW7NaN4qWdw">
                  <body>Creates maps and sets the starting locations for the players.</body>
                </ownedComment>
                <ownedOperation xmi:id="_CXJigFJREeiyW7NaN4qWdw" name="createEmptyMap" isAbstract="true">
                  <ownedParameter xmi:id="_CXJigVJREeiyW7NaN4qWdw" name="width">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXJiglJREeiyW7NaN4qWdw" name="height">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXJig1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXJihFJREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXJihVJREeiyW7NaN4qWdw" name="createMap" isAbstract="true">
                  <ownedParameter xmi:id="_CXJihlJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXJih1JREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_CJN0MFJREeiyW7NaN4qWdw" name="MapLayerGenerator">
                <ownedComment xmi:id="_CYIZ8lJREeiyW7NaN4qWdw">
                  <body>Generates a map layer.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CJObQFJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw" isReadOnly="true"/>
                <ownedOperation xmi:id="_CXKJkFJREeiyW7NaN4qWdw" name="generateLayer">
                  <ownedParameter xmi:id="_CXKJkVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXKJklJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_CJPCUFJREeiyW7NaN4qWdw" name="MapLoader">
                <ownedAttribute xmi:id="_CJPpYFJREeiyW7NaN4qWdw" name="highestLayer" type="_CVTIY1JREeiyW7NaN4qWdw" isReadOnly="true"/>
                <ownedOperation xmi:id="_CXKwoFJREeiyW7NaN4qWdw" name="loadMap">
                  <ownedParameter xmi:id="_CXKwoVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXKwolJREeiyW7NaN4qWdw" name="layer" type="_CVTIY1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXKwo1JREeiyW7NaN4qWdw" type="_CVTIY1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CJQQcFJREeiyW7NaN4qWdw" name="River">
                <ownedComment xmi:id="_CYIZ81JREeiyW7NaN4qWdw">
                  <body>A river for the map generator.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CXvYYVJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_CVeukFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYN5gVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXvYYlJREeiyW7NaN4qWdw" value="Logger.getLogger(SimpleMapGenerator.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXvYY1JREeiyW7NaN4qWdw" name="riverType" visibility="private" isLeaf="true" type="_CVR6Q1JREeiyW7NaN4qWdw" isReadOnly="true" association="_CYOgkFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXv_cVJREeiyW7NaN4qWdw" name="rightMap" visibility="private" isLeaf="true" isStatic="true" type="_CVVkoFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYOgk1JREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXwmgFJREeiyW7NaN4qWdw" name="leftMap" visibility="private" isLeaf="true" isStatic="true" type="_CVVkoFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYOgllJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXwmglJREeiyW7NaN4qWdw" name="direction" visibility="private" type="_CVeuklJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXxNkVJREeiyW7NaN4qWdw" name="map" visibility="private" isLeaf="true" type="_CVWyw1JREeiyW7NaN4qWdw" isReadOnly="true" association="_CYPHoVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXxNk1JREeiyW7NaN4qWdw" name="sections" type="_CJfhAFJREeiyW7NaN4qWdw" isOrdered="true" isReadOnly="true" association="_CYPHpFJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXxNlFJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXx0oFJREeiyW7NaN4qWdw" value="new ArrayList&lt;>()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXx0oVJREeiyW7NaN4qWdw" name="nextRiver" visibility="private" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYPusVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXx0olJREeiyW7NaN4qWdw" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CXx0pFJREeiyW7NaN4qWdw" name="region" isLeaf="true" type="_CVZ2E1JREeiyW7NaN4qWdw" association="_CYPutFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXybsFJREeiyW7NaN4qWdw" name="random" visibility="private" isLeaf="true" type="_CVeHgVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYQVwVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXybslJREeiyW7NaN4qWdw" name="riverMap" visibility="private" isLeaf="true" type="_CVgjwFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYQVxFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CXzCwlJREeiyW7NaN4qWdw" name="connected" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CXzCw1JREeiyW7NaN4qWdw" value="false"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_3GVJREeiyW7NaN4qWdw" name="_initializer1" specification="_CJVI8FJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>rightMap = new HashMap&lt;Direction, Direction>();&#xD;
 		rightMap.put(Direction.NE, Direction.SE);&#xD;
 		rightMap.put(Direction.SE, Direction.SW);&#xD;
 		rightMap.put(Direction.SW, Direction.NW);&#xD;
 		rightMap.put(Direction.NW, Direction.NE);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CX_3GlJREeiyW7NaN4qWdw" name="_initializer2" specification="_CJVwAVJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>leftMap = new HashMap&lt;Direction, Direction>();&#xD;
 		leftMap.put(Direction.NE, Direction.NW);&#xD;
 		leftMap.put(Direction.SE, Direction.NE);&#xD;
 		leftMap.put(Direction.SW, Direction.SE);&#xD;
 		leftMap.put(Direction.NW, Direction.SW);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeIFJREeiyW7NaN4qWdw" name="River" specification="_CXL-wFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeIVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeIlJREeiyW7NaN4qWdw" name="riverMap" type="_CVgjwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeI1JREeiyW7NaN4qWdw" name="region" type="_CVZ2E1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeJFJREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeJVJREeiyW7NaN4qWdw" type="_CJQQcFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this.map = map;&#xD;
     this.riverMap = riverMap;&#xD;
     this.region = region;&#xD;
     this.random = random;&#xD;
     this.riverType = map.getSpecification()&#xD;
         .getTileImprovementType(&quot;model.improvement.river&quot;);&#xD;
     this.direction = getRandomMember(logger, &quot;River&quot;, Direction.longSides,&#xD;
                                      random);&#xD;
     logger.fine(&quot;Starting new river flowing &quot; + direction);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeJlJREeiyW7NaN4qWdw" name="getLength" specification="_CJYMQFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeJ1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return this.sections.size();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeKFJREeiyW7NaN4qWdw" name="getLastSection" specification="_CJYMQlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeKVJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return this.sections.get(sections.size() - 1);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeKlJREeiyW7NaN4qWdw" name="add" specification="_CXNM4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeK1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeLFJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>this.sections.add(new RiverSection(tile, direction));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeLVJREeiyW7NaN4qWdw" name="grow" specification="_CXNM41JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeLlJREeiyW7NaN4qWdw" name="lastSection" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeL1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>boolean found = false;&#xD;
&#xD;
     for (RiverSection section : sections) {&#xD;
         if (found) {&#xD;
             section.grow();&#xD;
         } else if (section.getTile().equals(tile)) {&#xD;
             section.setBranch(lastSection.direction.getReverseDirection(),&#xD;
                               lastSection.getSize());&#xD;
             section.grow();&#xD;
             found = true;&#xD;
         }&#xD;
     }&#xD;
     drawToMap(sections);&#xD;
     if (nextRiver != null) {&#xD;
         RiverSection section = sections.get(sections.size() - 1);&#xD;
         Tile neighbor = section.getTile().getNeighbourOrNull(section.direction);&#xD;
         nextRiver.grow(section, neighbor);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYAeMFJREeiyW7NaN4qWdw" name="isNextToSelf" specification="_CXNz8lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYAeMVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYAeMlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return any(Direction.longSides,&#xD;
         d -> this.contains(tile.getNeighbourOrNull(d)));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBFMFJREeiyW7NaN4qWdw" name="isNextToWater" specification="_CXNz9VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBFMVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBFMlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return any(Direction.longSides,&#xD;
         d -> {&#xD;
             Tile t = tile.getNeighbourOrNull(d);&#xD;
             return t != null &amp;&amp; (!t.isLand() || t.hasRiver());&#xD;
         });&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBFM1JREeiyW7NaN4qWdw" name="contains" specification="_CXObAVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBFNFJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBFNVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return any(getSections(), rs -> rs.getTile() == tile);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBFNlJREeiyW7NaN4qWdw" name="flowFromSource" specification="_CXObBFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBFN1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBFOFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>TileImprovementType riverType =&#xD;
         map.getSpecification().getTileImprovementType(&quot;model.improvement.river&quot;);&#xD;
     if (!riverType.isTileTypeAllowed(tile.getType())) {&#xD;
         // Mountains, ocean cannot have rivers&#xD;
         logger.fine(&quot;Tile (&quot; + tile + &quot;) can not have a river.&quot;);&#xD;
         return false;&#xD;
     } else if (isNextToWater(tile)) {&#xD;
         logger.fine(&quot;Tile (&quot; + tile + &quot;) is next to water.&quot;);&#xD;
         return false;&#xD;
     } else {&#xD;
         logger.fine(&quot;Tile (&quot; + tile + &quot;) is suitable source.&quot;);&#xD;
         return flow(tile);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBFOVJREeiyW7NaN4qWdw" name="flow" specification="_CXPCEVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBFOlJREeiyW7NaN4qWdw" name="source" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBFO1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (sections.size() % 2 == 0) {&#xD;
         // get random new direction&#xD;
         int length = DirectionChange.values().length;&#xD;
         int index = randomInt(logger, &quot;Flow&quot;, random, length);&#xD;
         DirectionChange change = DirectionChange.values()[index];&#xD;
         this.direction = change.getNewDirection(this.direction);&#xD;
         logger.fine(&quot;Direction is now &quot; + direction);&#xD;
     }&#xD;
&#xD;
     for (DirectionChange change : DirectionChange.values()) {&#xD;
         Direction dir = change.getNewDirection(direction);&#xD;
         Tile nextTile = source.getNeighbourOrNull(dir);&#xD;
         if (nextTile == null) continue;&#xD;
&#xD;
         // is the tile suitable for this river?&#xD;
         if (!riverType.isTileTypeAllowed(nextTile.getType())) {&#xD;
             // Mountains, ocean cannot have rivers&#xD;
             logger.fine(&quot;Tile (&quot; + nextTile + &quot;) can not have a river.&quot;);&#xD;
             continue;&#xD;
         } else if (this.contains(nextTile)) {&#xD;
             logger.fine(&quot;Tile (&quot; + nextTile + &quot;) is already in river.&quot;);&#xD;
             continue;&#xD;
         } else if (isNextToSelf(nextTile)) {&#xD;
             logger.fine(&quot;Tile (&quot; + nextTile + &quot;) is next to the river.&quot;);&#xD;
             continue;&#xD;
         } else {&#xD;
             // find out if an adjacent tile is next to water&#xD;
             for (DirectionChange change2 : DirectionChange.values()) {&#xD;
                 Direction lastDir = change2.getNewDirection(dir);&#xD;
                 Tile t = nextTile.getNeighbourOrNull(lastDir);&#xD;
                 if (t == null) continue;&#xD;
                 if (t.isLand() &amp;&amp; !t.hasRiver()) continue;&#xD;
&#xD;
                 sections.add(new RiverSection(source, dir));&#xD;
                 RiverSection lastSection = new RiverSection(nextTile,&#xD;
                         lastDir);&#xD;
                 sections.add(lastSection);&#xD;
&#xD;
                 if (t.hasRiver() &amp;&amp; t.isLand()) {&#xD;
                     logger.fine(&quot;Tile (&quot; + t + &quot;) is next to another river.&quot;);&#xD;
                     // increase the size of the other river&#xD;
                     nextRiver = riverMap.get(t);&#xD;
                     nextRiver.grow(lastSection, t);&#xD;
                     // if the other river is connected, so is this one&#xD;
                     connected |= nextRiver.connected;&#xD;
                     // add this region to other river if too small&#xD;
                     if (getLength() &lt; 10) {&#xD;
                         region = nextRiver.region;&#xD;
                     }&#xD;
                     drawToMap(sections);&#xD;
                 } else {&#xD;
                     // flow into the sea (or a lake)&#xD;
                     logger.fine(&quot;Tile (&quot; + t + &quot;) is next to water.&quot;);&#xD;
                     River someRiver = riverMap.get(t);&#xD;
                     if (someRiver == null) {&#xD;
                         sections.add(new RiverSection(t, lastDir.getReverseDirection()));&#xD;
                         if (lastSection.getSize() &lt; TileImprovement.FJORD_RIVER) {&#xD;
                             createDelta(nextTile, lastDir, lastSection);&#xD;
                         }&#xD;
                     } else {&#xD;
                         RiverSection waterSection = someRiver.getLastSection();&#xD;
                         waterSection.setBranch(lastDir.getReverseDirection(),&#xD;
                             TileImprovement.SMALL_RIVER);&#xD;
                     }&#xD;
                     connected |= t.isHighSeasConnected();&#xD;
                     drawToMap(sections);&#xD;
                 }&#xD;
                 return true;&#xD;
             }&#xD;
             // not next to water&#xD;
             logger.fine(&quot;Tile (&quot; + nextTile + &quot;) is suitable.&quot;);&#xD;
             sections.add(new RiverSection(source, dir));&#xD;
             return flow(nextTile);&#xD;
         }&#xD;
     }&#xD;
     sections = new ArrayList&lt;>();&#xD;
     return false;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBsQFJREeiyW7NaN4qWdw" name="createDelta" specification="_CXPCFFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBsQVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBsQlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBsQ1JREeiyW7NaN4qWdw" name="section" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>delta(tile, direction, section, DirectionChange.LEFT_TURN.getNewDirection(direction));&#xD;
     delta(tile, direction, section, DirectionChange.RIGHT_TURN.getNewDirection(direction));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBsRFJREeiyW7NaN4qWdw" name="delta" specification="_CXPpIVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBsRVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBsRlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBsR1JREeiyW7NaN4qWdw" name="section" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYBsSFJREeiyW7NaN4qWdw" name="d" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Tile t = tile.getNeighbourOrNull(d);&#xD;
     if (!t.isLand()) {&#xD;
         List&lt;RiverSection> deltaSections = new ArrayList&lt;>();&#xD;
         section.setBranch(d, TileImprovement.SMALL_RIVER);&#xD;
         deltaSections.add(new RiverSection(tile, d.getReverseDirection()));&#xD;
         drawToMap(deltaSections);&#xD;
     } else if (riverType.isTileTypeAllowed(t.getType())) {&#xD;
         Tile t2 = t.getNeighbourOrNull(direction);&#xD;
         if (!t2.isLand() &amp;&amp; randomInt(logger, &quot;Delta&quot;, random, 2) == 0) {&#xD;
             List&lt;RiverSection> deltaSections = new ArrayList&lt;>();&#xD;
             section.setBranch(d, TileImprovement.SMALL_RIVER);&#xD;
             RiverSection rs = new RiverSection(t, direction);&#xD;
             rs.setBranch(d.getReverseDirection(), TileImprovement.SMALL_RIVER);&#xD;
             deltaSections.add(rs);&#xD;
             rs = new RiverSection(t2, direction.getReverseDirection());&#xD;
             deltaSections.add(rs);&#xD;
             drawToMap(deltaSections);&#xD;
         }&#xD;
     }&#xD;
&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYBsSVJREeiyW7NaN4qWdw" name="drawToMap" specification="_CXQQMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYBsSlJREeiyW7NaN4qWdw" name="sections" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>RiverSection oldSection = null;&#xD;
&#xD;
     for (RiverSection section : sections) {&#xD;
         riverMap.put(section.getTile(), this);&#xD;
         if (oldSection != null) {&#xD;
             section.setBranch(oldSection.direction.getReverseDirection(),&#xD;
                               oldSection.getSize());&#xD;
         }&#xD;
         Tile tile = section.getTile();&#xD;
         if (tile.isLand()) {&#xD;
             if (section.getSize() >= TileImprovement.FJORD_RIVER) {&#xD;
                 TileType greatRiver = map.getSpecification().getTileType(&quot;model.tile.greatRiver&quot;);&#xD;
                 tile.changeType(greatRiver);&#xD;
                 // changing the type resets the improvements&#xD;
                 //container.addRiver(section.getSize(), section.encodeStyle());&#xD;
                 logger.fine(&quot;Added fjord (magnitude: &quot; + section.getSize() +&#xD;
                             &quot;) to tile: &quot; + section.getTile());&#xD;
             } else if (section.getSize() > TileImprovement.NO_RIVER) {&#xD;
                 String style = section.encodeStyle();&#xD;
                 tile.addRiver(section.getSize(), style);&#xD;
                 logger.fine(&quot;Added river&quot;&#xD;
                     + &quot;(magnitude: &quot; + section.getSize()&#xD;
                     + &quot; style: &quot; + style);&#xD;
             }&#xD;
             region.addTile(tile);&#xD;
             oldSection = section;&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJVI8FJREeiyW7NaN4qWdw" name="_initializer1" isStatic="true" method="_CX_3GVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CJVI8VJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CJVI8lJREeiyW7NaN4qWdw" key="init"/>
                  </eAnnotations>
                </ownedOperation>
                <ownedOperation xmi:id="_CJVwAVJREeiyW7NaN4qWdw" name="_initializer2" isStatic="true" method="_CX_3GlJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CJVwAlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CJVwA1JREeiyW7NaN4qWdw" key="init"/>
                  </eAnnotations>
                </ownedOperation>
                <ownedOperation xmi:id="_CJYMQFJREeiyW7NaN4qWdw" name="getLength" method="_CYAeJlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ9lJREeiyW7NaN4qWdw">
                    <body>Returns the length of this river.&#xD;
     *&#xD;
     * @return the length of this river.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJYMQVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CJYMQlJREeiyW7NaN4qWdw" name="getLastSection" method="_CYAeKFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CVhK0VJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXL-wFJREeiyW7NaN4qWdw" name="River" method="_CYAeIFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXMl0lJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXMl01JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYIZ9VJREeiyW7NaN4qWdw">
                    <body>Constructor.&#xD;
     *&#xD;
     * @param map The map on which the river flows.&#xD;
     * @param riverMap A hashtable of position-river pairs.&#xD;
     * @param region The region for this river.&#xD;
     * @param random The &lt;code>Random&lt;/code> number source to use.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXL-wVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXL-wlJREeiyW7NaN4qWdw" name="riverMap" type="_CVgjwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXMl0FJREeiyW7NaN4qWdw" name="region" type="_CVZ2E1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXMl0VJREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXMl1FJREeiyW7NaN4qWdw" type="_CJQQcFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXNM4FJREeiyW7NaN4qWdw" name="add" method="_CYAeKlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ91JREeiyW7NaN4qWdw">
                    <body>Adds a new section to this river.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> where this section is located.&#xD;
     * @param direction The &lt;code>Direction&lt;/code> the river is flowing in.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXNM4VJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXNM4lJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXNM41JREeiyW7NaN4qWdw" name="grow" method="_CYAeLVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ-FJREeiyW7NaN4qWdw">
                    <body>Increases the size of this river.&#xD;
     *&#xD;
     * @param lastSection The last section of the river flowing into this one.&#xD;
     * @param tile The &lt;code>Tile&lt;/code> of the confluence.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXNz8FJREeiyW7NaN4qWdw" name="lastSection" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXNz8VJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXNz8lJREeiyW7NaN4qWdw" name="isNextToSelf" method="_CYAeMFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ-VJREeiyW7NaN4qWdw">
                    <body>Returns true if the given tile is next to this river.&#xD;
     *&#xD;
     * @param tile A map tile.&#xD;
     * @return true if the given tile is next to this river.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXNz81JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXNz9FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXNz9VJREeiyW7NaN4qWdw" name="isNextToWater" method="_CYBFMFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ-lJREeiyW7NaN4qWdw">
                    <body>Returns true if the given tile is next to a river, lake or sea.&#xD;
     *&#xD;
     * @param tile A map tile.&#xD;
     * @return true if the given tile is next to a river, lake or sea.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXNz9lJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXObAFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXObAVJREeiyW7NaN4qWdw" name="contains" method="_CYBFM1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ-1JREeiyW7NaN4qWdw">
                    <body>Returns true if this river already contains the given tile.&#xD;
     *&#xD;
     * @param tile A map tile.&#xD;
     * @return true if this river already contains the given tile.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXObAlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXObA1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXObBFJREeiyW7NaN4qWdw" name="flowFromSource" method="_CYBFNlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ_FJREeiyW7NaN4qWdw">
                    <body>Creates a river flowing from the given tile if possible.&#xD;
     *&#xD;
     * @param tile An origin map &lt;code>Tile&lt;/code>.&#xD;
     * @return True if a river was created, false otherwise.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXObBVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPCEFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXPCEVJREeiyW7NaN4qWdw" name="flow" visibility="private" method="_CYBFOVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ_VJREeiyW7NaN4qWdw">
                    <body>Lets the river flow from the given tile.&#xD;
     *&#xD;
     * @param source A map tile.&#xD;
     * @return true if a river was created, false otherwise.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXPCElJREeiyW7NaN4qWdw" name="source" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPCE1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXPCFFJREeiyW7NaN4qWdw" name="createDelta" visibility="private" method="_CYBsQFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXPCFVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPCFlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPpIFJREeiyW7NaN4qWdw" name="section" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXPpIVJREeiyW7NaN4qWdw" name="delta" visibility="private" method="_CYBsRFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXPpIlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPpI1JREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPpJFJREeiyW7NaN4qWdw" name="section" type="_CJfhAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXPpJVJREeiyW7NaN4qWdw" name="d" type="_CVeuklJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXQQMFJREeiyW7NaN4qWdw" name="drawToMap" visibility="private" method="_CYBsSVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYIZ_lJREeiyW7NaN4qWdw">
                    <body>Draws the completed river to the map.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXQQMVJREeiyW7NaN4qWdw" name="sections" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_CJWXEFJREeiyW7NaN4qWdw" name="DirectionChange" visibility="private">
                  <eAnnotations xmi:id="_CJWXEVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CJWXElJREeiyW7NaN4qWdw" key="static"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYIZ9FJREeiyW7NaN4qWdw">
                    <body>Possible direction changes for a river.&#xD;
     * @see net.sf.freecol.common.model.Map</body>
                  </ownedComment>
                  <ownedOperation xmi:id="_CXLXsFJREeiyW7NaN4qWdw" name="getNewDirection" method="_CX_3G1JREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CXLXsVJREeiyW7NaN4qWdw" name="oldDirection" type="_CVeuklJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXLXslJREeiyW7NaN4qWdw" type="_CVeuklJREeiyW7NaN4qWdw" direction="return"/>
                  </ownedOperation>
                  <ownedLiteral xmi:id="_CJWXE1JREeiyW7NaN4qWdw" name="STRAIGHT_AHEAD"/>
                  <ownedLiteral xmi:id="_CJWXFFJREeiyW7NaN4qWdw" name="RIGHT_TURN"/>
                  <ownedLiteral xmi:id="_CJWXFVJREeiyW7NaN4qWdw" name="LEFT_TURN"/>
                </nestedClassifier>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CJfhAFJREeiyW7NaN4qWdw" name="RiverSection">
                <ownedComment xmi:id="_CYIZ_1JREeiyW7NaN4qWdw">
                  <body>This class facilitates building, editing the TileImprovement style&#xD;
for rivers Rivers on the Map are composed of many individual&#xD;
TileImprovements displayed on each Tile the river flows through The&#xD;
river TileImprovement on a Tile has a style which represents the&#xD;
inputs/outputs of water to/from neighboring Tiles This class allows&#xD;
manipulation of individual stream(s) to neighboring Tiles (there&#xD;
are many in case of confluence)</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CX0Q4FJREeiyW7NaN4qWdw" name="template" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CX0Q4VJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX0Q41JREeiyW7NaN4qWdw" value="{&#xD;&#xA;        '0', '1', '2', '3'&#xD;&#xA;    }"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX0Q5FJREeiyW7NaN4qWdw" name="branches" visibility="private" type="_CVgjwFJREeiyW7NaN4qWdw" association="_CYQ80VJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX038VJREeiyW7NaN4qWdw" value="new EnumMap&lt;>(Direction.class)"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX0381JREeiyW7NaN4qWdw" name="size" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX1fAVJREeiyW7NaN4qWdw" value="TileImprovement.SMALL_RIVER"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX1fBFJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX2GEVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYQ81FJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTUlJREeiyW7NaN4qWdw" name="RiverSection" specification="_CVmDUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTU1JREeiyW7NaN4qWdw" name="branches" type="_CVgjwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTVFJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this.branches = branches;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTVVJREeiyW7NaN4qWdw" name="RiverSection" specification="_CXSFYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTVlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTV1JREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTWFJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this.tile = tile;&#xD;
     this.direction = direction;&#xD;
     setBranch(direction, TileImprovement.SMALL_RIVER);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTWVJREeiyW7NaN4qWdw" name="setBranch" specification="_CXSscFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTWlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTW1JREeiyW7NaN4qWdw" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (size != TileImprovement.SMALL_RIVER) {&#xD;
         size = TileImprovement.LARGE_RIVER;&#xD;
     }&#xD;
     branches.put(direction, size);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTXFJREeiyW7NaN4qWdw" name="getBranch" specification="_CXSsc1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTXVJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTXlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (branches.containsKey(direction)) {&#xD;
         return branches.get(direction);&#xD;
     } else {&#xD;
         return TileImprovement.NO_RIVER;&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTX1JREeiyW7NaN4qWdw" name="removeBranch" specification="_CXSsdlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTYFJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>branches.remove(direction);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYCTYVJREeiyW7NaN4qWdw" name="growBranch" specification="_CXTTgVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYCTYlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYCTY1JREeiyW7NaN4qWdw" name="increment">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int newSize = Math.min(TileImprovement.LARGE_RIVER,&#xD;
                            Math.max(TileImprovement.NO_RIVER,&#xD;
                                     getBranch(direction) + increment));&#xD;
     setBranch(direction, newSize);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6YFJREeiyW7NaN4qWdw" name="grow" specification="_CJgvIFJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>this.size++;&#xD;
     setBranch(direction, TileImprovement.LARGE_RIVER);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6YVJREeiyW7NaN4qWdw" name="encodeStyle" specification="_CJgvIVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYC6YlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>StringBuilder sb = new StringBuilder();&#xD;
     for (Direction direction : Direction.longSides) {&#xD;
         sb.append(Integer.toString(getBranch(direction), Character.MAX_RADIX));&#xD;
     }&#xD;
     return sb.toString();&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJgvIFJREeiyW7NaN4qWdw" name="grow" method="_CYC6YFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBBlJREeiyW7NaN4qWdw">
                    <body>Increases the size of this section by one.</body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_CJgvIVJREeiyW7NaN4qWdw" name="encodeStyle" method="_CYC6YVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CJgvIlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CVmDUFJREeiyW7NaN4qWdw" name="RiverSection" method="_CYCTUlJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CVmDUlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CVmDU1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYJBAFJREeiyW7NaN4qWdw">
                    <body>Creates a new RiverSection with the given branches. This&#xD;
     * constructor is used by the MapEditor.&#xD;
     *&#xD;
     * @param branches The encoded style</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CVmDUVJREeiyW7NaN4qWdw" name="branches" type="_CVgjwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CVmDVFJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXSFYFJREeiyW7NaN4qWdw" name="RiverSection" method="_CYCTVVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXSFY1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXSFZFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYJBAVJREeiyW7NaN4qWdw">
                    <body>Constructor used to automatically generate rivers.&#xD;
     *&#xD;
     * @param tile The map tile&#xD;
     * @param direction The direction the river is flowing toward</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXSFYVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXSFYlJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXSFZVJREeiyW7NaN4qWdw" type="_CJfhAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXSscFJREeiyW7NaN4qWdw" name="setBranch" isLeaf="true" method="_CYCTWVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBAlJREeiyW7NaN4qWdw">
                    <body>Sets the size of a branch</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXSscVJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXSsclJREeiyW7NaN4qWdw" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXSsc1JREeiyW7NaN4qWdw" name="getBranch" isLeaf="true" method="_CYCTXFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBA1JREeiyW7NaN4qWdw">
                    <body>Gets the size of a branch</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXSsdFJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXSsdVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXSsdlJREeiyW7NaN4qWdw" name="removeBranch" isLeaf="true" method="_CYCTX1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBBFJREeiyW7NaN4qWdw">
                    <body>Removes a branch</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXTTgFJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXTTgVJREeiyW7NaN4qWdw" name="growBranch" isLeaf="true" method="_CYCTYVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBBVJREeiyW7NaN4qWdw">
                    <body>Increases the size a branch</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXTTglJREeiyW7NaN4qWdw" name="direction" type="_CVeuklJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXTTg1JREeiyW7NaN4qWdw" name="increment">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CJjLYFJREeiyW7NaN4qWdw" name="SimpleMapGenerator">
                <ownedComment xmi:id="_CYJBB1JREeiyW7NaN4qWdw">
                  <body>Creates random maps and sets the starting locations for the players.&#xD;
 *&#xD;
No visibility implications here as this all happens pre-game,&#xD;
so no +/-vis annotations are needed.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CX2tIFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_CVeukFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYRj4FJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX2tIVJREeiyW7NaN4qWdw" value="Logger.getLogger(SimpleMapGenerator.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX2tIlJREeiyW7NaN4qWdw" name="MIN_DISTANCE_FROM_POLE" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX3UMFJREeiyW7NaN4qWdw" value="0.30f"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX4iUVJREeiyW7NaN4qWdw" name="game" visibility="private" isLeaf="true" type="_CVQsI1JREeiyW7NaN4qWdw" isReadOnly="true" association="_CYSK9FJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX4iU1JREeiyW7NaN4qWdw" name="random" visibility="private" isLeaf="true" type="_CVeHgVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYSyAVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX5JYFJREeiyW7NaN4qWdw" name="mapOptions" visibility="private" type="_CWurwVJREeiyW7NaN4qWdw" association="_CYSyBFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX5JYlJREeiyW7NaN4qWdw" name="spec" visibility="private" type="_CVTvcVJREeiyW7NaN4qWdw" association="_CYTZEVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX5wcVJREeiyW7NaN4qWdw" name="importGame" visibility="private" type="_CVQsI1JREeiyW7NaN4qWdw" association="_CYTZFFJREeiyW7NaN4qWdw"/>
                <interfaceRealization xmi:id="_CWxIAFJREeiyW7NaN4qWdw" client="_CJjLYFJREeiyW7NaN4qWdw" supplier="_CJMmEFJREeiyW7NaN4qWdw" contract="_CJMmEFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYDhcFJREeiyW7NaN4qWdw" name="SimpleMapGenerator" specification="_CXWW0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYDhcVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYDhclJREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYDhc1JREeiyW7NaN4qWdw" type="_CJjLYFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this.game = game;&#xD;
     this.random = random;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYDhdFJREeiyW7NaN4qWdw" name="recache" specification="_CJnc0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYDhdVJREeiyW7NaN4qWdw" name="checkImport">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>this.mapOptions = game.getMapGeneratorOptions();&#xD;
     this.spec = game.getSpecification();&#xD;
     File importFile = (checkImport) ? ((FileOption)this.mapOptions&#xD;
         .getOption(MapGeneratorOptions.IMPORT_FILE)).getValue()&#xD;
         : null;&#xD;
     this.importGame = (importFile == null) ? null&#xD;
         : FreeColServer.readGame(importFile, this.spec, null);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYDhdlJREeiyW7NaN4qWdw" name="getApproximateLandCount" specification="_CJnc0lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYDhd1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return mapOptions.getInteger(MapGeneratorOptions.MAP_WIDTH)&#xD;
         * mapOptions.getInteger(MapGeneratorOptions.MAP_HEIGHT)&#xD;
         * mapOptions.getInteger(MapGeneratorOptions.LAND_MASS) / 100;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYDheFJREeiyW7NaN4qWdw" name="makeLostCityRumours" specification="_CXWW1lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYDheVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYDhelJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final boolean importRumours&#xD;
         = mapOptions.getBoolean(MapGeneratorOptions.IMPORT_RUMOURS);&#xD;
     if (importGame != null &amp;&amp; importRumours) {&#xD;
         int nLCRs = 0;&#xD;
         for (Tile importTile : importGame.getMap().getAllTiles()) {&#xD;
             LostCityRumour rumour = importTile.getLostCityRumour();&#xD;
             // no rumor&#xD;
             if (rumour == null) continue;&#xD;
             int x = importTile.getX();&#xD;
             int y = importTile.getY();&#xD;
             if (map.isValid(x, y)) {&#xD;
                 final Tile t = map.getTile(x, y);&#xD;
                 rumour.setLocation(t);&#xD;
                 t.addLostCityRumour(rumour);&#xD;
                 nLCRs++;&#xD;
             }&#xD;
         }&#xD;
         if (nLCRs > 0) {&#xD;
             lb.add(&quot;Imported &quot;, nLCRs, &quot; lost city rumours.\n&quot;);&#xD;
             return;&#xD;
         }&#xD;
         // Otherwise fall through and create them&#xD;
     }&#xD;
&#xD;
     final int rumourNumber&#xD;
         = mapOptions.getInteger(MapGeneratorOptions.RUMOUR_NUMBER);&#xD;
     int number = getApproximateLandCount() / rumourNumber;&#xD;
     int counter = 0;&#xD;
&#xD;
     // FIXME: Remove temporary fix:&#xD;
     if (importGame != null) {&#xD;
         number = map.getWidth() * map.getHeight() * 25 / (100 * 35);&#xD;
     }&#xD;
&#xD;
     for (int i = 0; i &lt; number; i++) {&#xD;
         for (int tries = 0; tries &lt; 100; tries++) {&#xD;
             Tile t = map.getRandomLandTile(random);&#xD;
             if (t.isPolar()) continue; // No polar lost cities&#xD;
             if (t.isLand() &amp;&amp; !t.hasLostCityRumour()&#xD;
                 &amp;&amp; !t.hasSettlement() &amp;&amp; t.getUnitCount() == 0) {&#xD;
                 LostCityRumour r = new LostCityRumour(t.getGame(), t);&#xD;
                 if (r.chooseType(null, random)&#xD;
                     == LostCityRumour.RumourType.MOUNDS&#xD;
                     &amp;&amp; t.getOwningSettlement() != null) {&#xD;
                     r.setType(LostCityRumour.RumourType.MOUNDS);&#xD;
                 }&#xD;
                 t.addLostCityRumour(r);&#xD;
                 counter++;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Created &quot;, counter,&#xD;
         &quot; lost city rumours of maximum &quot;, number, &quot;.\n&quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYDhe1JREeiyW7NaN4qWdw" name="importIndianSettlements" specification="_CXW94VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYDhfFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYDhfVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYDhflJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int nSettlements = 0;&#xD;
     &#xD;
     for (Player player : importGame.getLiveNativePlayers(null)) {&#xD;
         Player indian = game.getPlayerByNationId(player.getNationId());&#xD;
         if (indian == null) {&#xD;
             Nation nation = spec.getNation(player.getNationId());&#xD;
             if (nation == null) {&#xD;
                 lb.add(&quot;Native nation &quot;, player.getNationId(),&#xD;
                     &quot; not found in spec.\n&quot;);&#xD;
                 continue;&#xD;
             }&#xD;
             indian = new ServerPlayer(game, false, nation, null, null);&#xD;
             lb.add(&quot;Imported new native nation &quot;, player.getNationId(),&#xD;
                 &quot;: &quot;, indian.getId(), &quot;\n&quot;);&#xD;
             game.addPlayer(indian);&#xD;
         } else {&#xD;
             lb.add(&quot;Found native nation &quot;, player.getNationId(),&#xD;
                 &quot; for import: &quot;, indian.getId(), &quot;\n&quot;);&#xD;
         }&#xD;
     }&#xD;
     for (Tile tile : importGame.getMap().getAllTiles()) {&#xD;
         IndianSettlement is = tile.getIndianSettlement();&#xD;
         if (is == null) continue;&#xD;
         Player indian = game.getPlayerByNationId(is.getOwner().getNationId());&#xD;
         ServerIndianSettlement settlement&#xD;
             = new ServerIndianSettlement(game, indian, is.getName(),&#xD;
                 map.getTile(tile.getX(), tile.getY()), is.isCapital(),&#xD;
                 is.getLearnableSkill(), null);&#xD;
         settlement.placeSettlement(false);&#xD;
         for (Tile t : is.getOwnedTiles()) {&#xD;
             map.getTile(t.getX(), t.getY())&#xD;
                 .changeOwnership(indian, settlement);&#xD;
         }&#xD;
             &#xD;
         List&lt;Unit> units = is.getUnitList();&#xD;
         if (units.isEmpty()) {&#xD;
             settlement.addUnits(random);&#xD;
         } else {&#xD;
             for (Unit unit : units) {&#xD;
                 UnitType t = spec.getUnitType(unit.getType().getId());&#xD;
                 if (t != null) {&#xD;
                     Unit u = new ServerUnit(game, settlement, indian, t);&#xD;
                     settlement.add(u);&#xD;
                     settlement.addOwnedUnit(u);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         List&lt;Goods> goods = is.getCompactGoods();&#xD;
         if (goods.isEmpty()) {&#xD;
             settlement.addRandomGoods(random);&#xD;
         } else {&#xD;
             for (Goods g : goods) {&#xD;
                 GoodsType t = spec.getGoodsType(g.getType().getId());&#xD;
                 if (t != null) {&#xD;
                     settlement.addGoods(t, g.getAmount());&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         settlement.setWantedGoods(is.getWantedGoods());&#xD;
         indian.addSettlement(settlement);&#xD;
         nSettlements++;&#xD;
     }&#xD;
&#xD;
     if (nSettlements > 0) {&#xD;
         for (Tile t : importGame.getMap().getAllTiles()) {&#xD;
             if (t.getOwner() == null) continue;&#xD;
             Player owner = game.getPlayerByNationId(t.getOwner()&#xD;
                 .getNationId());&#xD;
             if (owner == null) continue;&#xD;
             Tile tile = map.getTile(t.getX(), t.getY());&#xD;
             if (tile == null) continue;&#xD;
             tile.setOwner(owner);&#xD;
             if (tile.getOwningSettlement() != null) {&#xD;
                 String name = tile.getOwningSettlement().getName();&#xD;
                 Settlement is = game.getSettlementByName(name);&#xD;
                 tile.setOwningSettlement(is);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Imported &quot;, nSettlements, &quot; native settlements.\n&quot;);&#xD;
     return nSettlements > 0;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEIgFJREeiyW7NaN4qWdw" name="makeNativeSettlements" specification="_CXXk8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIgVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CYEIglJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CYEIg1JREeiyW7NaN4qWdw" key="final"/>
                    </eAnnotations>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEIhFJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final boolean importSettlements&#xD;
         = mapOptions.getBoolean(MapGeneratorOptions.IMPORT_SETTLEMENTS);&#xD;
     if (importSettlements &amp;&amp; importGame != null) {&#xD;
         if (importIndianSettlements(map, lb)) return;&#xD;
         // Fall through and create them&#xD;
     }&#xD;
     &#xD;
     final Game game = map.getGame();&#xD;
     float shares = 0f;&#xD;
     List&lt;IndianSettlement> settlements = new ArrayList&lt;>();&#xD;
     List&lt;Player> indians = new ArrayList&lt;>();&#xD;
     HashMap&lt;String, Territory> territoryMap = new HashMap&lt;>();&#xD;
&#xD;
     for (Player player : game.getLiveNativePlayers(null)) {&#xD;
         switch (player.getNationType()&#xD;
                 .getNumberOfSettlements()) {&#xD;
         case HIGH:&#xD;
             shares += 4;&#xD;
             break;&#xD;
         case AVERAGE:&#xD;
             shares += 3;&#xD;
             break;&#xD;
         case LOW:&#xD;
             shares += 2;&#xD;
             break;&#xD;
         }&#xD;
         indians.add(player);&#xD;
         List&lt;String> regionKeys&#xD;
             = ((IndianNationType)player.getNationType()).getRegionNames();&#xD;
         Territory territory = null;&#xD;
         if (regionKeys == null || regionKeys.isEmpty()) {&#xD;
             territory = new Territory(player, map.getRandomLandTile(random));&#xD;
             territoryMap.put(player.getId(), territory);&#xD;
         } else {&#xD;
             for (String key : regionKeys) {&#xD;
                 if (territoryMap.get(key) == null) {&#xD;
                     ServerRegion region = (ServerRegion)map.getRegionByKey(key);&#xD;
                     if (region == null) {&#xD;
                         territory = new Territory(player, map.getRandomLandTile(random));&#xD;
                     } else {&#xD;
                         territory = new Territory(player, region);&#xD;
                     }&#xD;
                     territoryMap.put(key, territory);&#xD;
                     lb.add(&quot;Allocated region &quot;, key,&#xD;
                         &quot; for &quot;, player, &quot;.\n&quot;);&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
             if (territory == null) {&#xD;
                 lb.add(&quot;Failed to allocate preferred region &quot;,&#xD;
                     regionKeys.get(0), &quot; for &quot;, player.getNation(), &quot;\n&quot;);&#xD;
                 outer: for (String key : regionKeys) {&#xD;
                     Territory otherTerritory = territoryMap.get(key);&#xD;
                     for (String otherKey : ((IndianNationType) otherTerritory.player.getNationType())&#xD;
                              .getRegionNames()) {&#xD;
                         if (territoryMap.get(otherKey) == null) {&#xD;
                             ServerRegion foundRegion = otherTerritory.region;&#xD;
                             otherTerritory.region = (ServerRegion)map.getRegionByKey(otherKey);&#xD;
                             territoryMap.put(otherKey, otherTerritory);&#xD;
                             territory = new Territory(player, foundRegion);&#xD;
                             territoryMap.put(key, territory);&#xD;
                             break outer;&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
                 if (territory == null) {&#xD;
                     lb.add(&quot;Unable to find free region for &quot;,&#xD;
                         player.getName(), &quot;\n&quot;);&#xD;
                     territory = new Territory(player, map.getRandomLandTile(random));&#xD;
                     territoryMap.put(player.getId(), territory);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (indians.isEmpty()) return;&#xD;
&#xD;
     // Examine all the non-polar settleable tiles in a random&#xD;
     // order picking out as many as possible suitable tiles for&#xD;
     // native settlements such that can be guaranteed at least one&#xD;
     // layer of surrounding tiles to own.&#xD;
     List&lt;Tile> allTiles = new ArrayList&lt;>();&#xD;
     for (Tile t : map.getAllTiles()) allTiles.add(t);&#xD;
     randomShuffle(logger, &quot;All tile shuffle&quot;, allTiles, random);&#xD;
     final int minDistance&#xD;
         = spec.getRangeOption(GameOptions.SETTLEMENT_NUMBER).getValue();&#xD;
     List&lt;Tile> settlementTiles = new ArrayList&lt;>();&#xD;
     for (Tile tile : allTiles) {&#xD;
         if (!tile.isPolar()&#xD;
             &amp;&amp; suitableForNativeSettlement(tile)&#xD;
             &amp;&amp; none(settlementTiles, t -> t.getDistanceTo(tile) &lt; minDistance))&#xD;
             settlementTiles.add(tile);&#xD;
     }&#xD;
     randomShuffle(logger, &quot;Settlement tiles&quot;, settlementTiles, random);&#xD;
&#xD;
     // Check number of settlements.&#xD;
     int settlementsToPlace = settlementTiles.size();&#xD;
     float share = settlementsToPlace / shares;&#xD;
     if (settlementTiles.size() &lt; indians.size()) {&#xD;
         // FIXME: something drastic to boost the settlement number&#xD;
         lb.add(&quot;There are only &quot;, settlementTiles.size(),&#xD;
             &quot; settlement sites.\n&quot;,&#xD;
             &quot; This is smaller than &quot;, indians.size(),&#xD;
             &quot; the number of tribes.\n&quot;);&#xD;
     }&#xD;
&#xD;
     // Find the capitals&#xD;
     List&lt;Territory> territories&#xD;
         = new ArrayList&lt;>(territoryMap.values());&#xD;
     int settlementsPlaced = 0;&#xD;
     for (Territory territory : territories) {&#xD;
         switch (territory.player.getNationType()&#xD;
                 .getNumberOfSettlements()) {&#xD;
         case HIGH:&#xD;
             territory.numberOfSettlements = Math.round(4 * share);&#xD;
             break;&#xD;
         case AVERAGE:&#xD;
             territory.numberOfSettlements = Math.round(3 * share);&#xD;
             break;&#xD;
         case LOW:&#xD;
             territory.numberOfSettlements = Math.round(2 * share);&#xD;
             break;&#xD;
         }&#xD;
         int radius = territory.player.getNationType().getCapitalType()&#xD;
             .getClaimableRadius();&#xD;
         IndianSettlement is = placeCapital(map, territory, radius,&#xD;
             new ArrayList&lt;>(settlementTiles), lb);&#xD;
         if (is != null) {&#xD;
             settlements.add(is);&#xD;
             settlementsPlaced++;&#xD;
             settlementTiles.remove(is.getTile());&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Sort tiles from the edges of the map inward&#xD;
     Collections.sort(settlementTiles, Tile.edgeDistanceComparator);&#xD;
&#xD;
     // Now place other settlements&#xD;
     while (!settlementTiles.isEmpty() &amp;&amp; !territories.isEmpty()) {&#xD;
         Tile tile = settlementTiles.remove(0);&#xD;
         if (tile.getOwner() != null) continue; // No close overlap&#xD;
&#xD;
         Territory territory = getClosestTerritory(map, tile, territories);&#xD;
         int radius = territory.player.getNationType().getSettlementType(false)&#xD;
             .getClaimableRadius();&#xD;
         // Insist that the settlement can not be linear&#xD;
         if (territory.player.getClaimableTiles(tile, radius).size()&#xD;
             > 2 * radius + 1) {&#xD;
             String name = (territory.region == null) ? &quot;default region&quot;&#xD;
                 : territory.region.toString();&#xD;
             lb.add(&quot;Placing a &quot;, territory.player,&#xD;
                 &quot; camp in region: &quot;, name,&#xD;
                 &quot; at tile: &quot;, tile, &quot;\n&quot;);&#xD;
             settlements.add(placeIndianSettlement(territory.player,&#xD;
                                                   false, tile, map, lb));&#xD;
             settlementsPlaced++;&#xD;
             territory.numberOfSettlements--;&#xD;
             if (territory.numberOfSettlements &lt;= 0) {&#xD;
                 territories.remove(territory);&#xD;
             }&#xD;
&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Grow some more tiles.&#xD;
     // FIXME: move the magic numbers below to the spec&#xD;
     // Also collect the skills provided&#xD;
     HashMap&lt;UnitType, List&lt;IndianSettlement>> skills = new HashMap&lt;>();&#xD;
     randomShuffle(logger, &quot;Settlements&quot;, settlements, random);&#xD;
     for (IndianSettlement is : settlements) {&#xD;
         List&lt;Tile> tiles = new ArrayList&lt;>();&#xD;
         for (Tile tile : is.getOwnedTiles()) {&#xD;
             for (Tile t : tile.getSurroundingTiles(1)) {&#xD;
                 if (t.getOwningSettlement() == null) {&#xD;
                     tiles.add(tile);&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         randomShuffle(logger, &quot;Settlement tiles&quot;, tiles, random);&#xD;
         int minGrow = is.getType().getMinimumGrowth();&#xD;
         int maxGrow = is.getType().getMaximumGrowth();&#xD;
         if (maxGrow > minGrow) {&#xD;
             for (int i = randomInt(logger, &quot;Gdiff&quot;, random,&#xD;
                                    maxGrow - minGrow) + minGrow;&#xD;
                  i > 0; i--) {&#xD;
                 Tile tile = findFreeNeighbouringTile(is, tiles);&#xD;
                 if (tile == null) break;&#xD;
                 tile.changeOwnership(is.getOwner(), is);&#xD;
                 tiles.add(tile);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Collect settlements by skill&#xD;
         UnitType skill = is.getLearnableSkill();&#xD;
         List&lt;IndianSettlement> isList = skills.get(skill);&#xD;
         if (isList == null) {&#xD;
             isList = new ArrayList&lt;>();&#xD;
             isList.add(is);&#xD;
             skills.put(skill, isList);&#xD;
         } else {&#xD;
             isList.add(is);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Require that there be experts for all the new world goods types.&#xD;
     // Collect the list of needed experts&#xD;
     List&lt;UnitType> expertsNeeded = new ArrayList&lt;>();&#xD;
     for (GoodsType goodsType : spec.getNewWorldGoodsTypeList()) {&#xD;
         UnitType expert = spec.getExpertForProducing(goodsType);&#xD;
         if (!skills.containsKey(expert)) expertsNeeded.add(expert);&#xD;
     }&#xD;
     // Extract just the settlement lists.&#xD;
     List&lt;List&lt;IndianSettlement>> isList = new ArrayList&lt;>(skills.values());&#xD;
     // For each missing skill...&#xD;
     while (!expertsNeeded.isEmpty()) {&#xD;
         UnitType neededSkill = expertsNeeded.remove(0);&#xD;
         Collections.sort(isList, descendingListLengthComparator);&#xD;
         List&lt;IndianSettlement> extras = isList.remove(0);&#xD;
         UnitType extraSkill = extras.get(0).getLearnableSkill();&#xD;
         List&lt;RandomChoice&lt;IndianSettlement>> choices = new ArrayList&lt;>();&#xD;
         // ...look at the settlements with the most common skill&#xD;
         // with a bit of favoritism to capitals as the needed skill&#xD;
         // is so rare,...&#xD;
         for (IndianSettlement is : extras) {&#xD;
             IndianNationType nation&#xD;
                 = (IndianNationType) is.getOwner().getNationType();&#xD;
             int cm = (is.isCapital()) ? 2 : 1;&#xD;
             RandomChoice&lt;IndianSettlement> rc = null;&#xD;
             for (RandomChoice&lt;UnitType> c : nation.generateSkillsForTile(is.getTile())) {&#xD;
                 if (c.getObject() == neededSkill) {&#xD;
                     rc = new RandomChoice&lt;>(is, c.getProbability() * cm);&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
             choices.add((rc != null) ? rc&#xD;
                         : new RandomChoice&lt;>(is, 1));&#xD;
         }&#xD;
         if (!choices.isEmpty()) {&#xD;
             // ...and pick one that could do the missing job.&#xD;
             IndianSettlement chose = RandomChoice&#xD;
                 .getWeightedRandom(logger, &quot;expert&quot;, choices, random);&#xD;
             lb.add(&quot;At &quot;, chose.getName(),&#xD;
                 &quot; replaced &quot;, extraSkill,&#xD;
                 &quot; (one of &quot;, extras.size(), &quot;)&quot;,&#xD;
                 &quot; by missing &quot;, neededSkill, &quot;\n&quot;);&#xD;
             chose.setLearnableSkill(neededSkill);&#xD;
             extras.remove(chose);&#xD;
             isList.add(0, extras); // Try to stay well sorted&#xD;
             List&lt;IndianSettlement> neededList = new ArrayList&lt;>();&#xD;
             neededList.add(chose);&#xD;
             isList.add(neededList);&#xD;
         } else { // `can not happen'&#xD;
             lb.add(&quot;Game is missing skill: &quot;, neededSkill, &quot;\n&quot;);&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Settlement skills:&quot;);&#xD;
     for (List&lt;IndianSettlement> iss : isList) {&#xD;
         if (iss.isEmpty()) {&#xD;
             lb.add(&quot;  0 x &lt;none>&quot;);&#xD;
         } else {&#xD;
             lb.add(&quot;  &quot;, iss.size(),&#xD;
                 &quot; x &quot;, iss.get(0).getLearnableSkill().getSuffix());&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;\nCreated &quot;, settlementsPlaced,&#xD;
         &quot; Indian settlements of maximum &quot;, settlementsToPlace, &quot;.\n&quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEIhVJREeiyW7NaN4qWdw" name="suitableForNativeSettlement" specification="_CXXk9VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIhlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIh1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (!tile.getType().canSettle()) return false;&#xD;
     int good = 0, n = 0;&#xD;
     for (Tile t : tile.getSurroundingTiles(1)) {&#xD;
         if (t.getType().canSettle()) good++;&#xD;
         n++;&#xD;
     }&#xD;
     return good >= n / 2;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEIiFJREeiyW7NaN4qWdw" name="findFreeNeighbouringTile" specification="_CXYMAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIiVJREeiyW7NaN4qWdw" name="is" type="_CVWywVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIilJREeiyW7NaN4qWdw" name="tiles" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIi1JREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>for (Tile tile : tiles) {&#xD;
         for (Direction d : Direction.getRandomDirections(&quot;freeTile&quot;,&#xD;
                 logger, random)) {&#xD;
             Tile t = tile.getNeighbourOrNull(d);&#xD;
             if ((t != null)&#xD;
                 &amp;&amp; (t.getOwningSettlement() == null)&#xD;
                 &amp;&amp; (is.getOwner().canClaimForSettlement(t))) return t;&#xD;
         }&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEIjFJREeiyW7NaN4qWdw" name="getClosestTerritory" specification="_CXYzEVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIjVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIjlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIj1JREeiyW7NaN4qWdw" name="territories" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIkFJREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Territory result = null;&#xD;
     int minimumDistance = Integer.MAX_VALUE;&#xD;
     for (Territory territory : territories) {&#xD;
         int distance = map.getDistance(tile, territory.getCenterTile(map));&#xD;
         if (distance &lt; minimumDistance) {&#xD;
             minimumDistance = distance;&#xD;
             result = territory;&#xD;
         }&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEIkVJREeiyW7NaN4qWdw" name="placeCapital" specification="_CXaBMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIklJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CYEIk1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CYEIlFJREeiyW7NaN4qWdw" key="final"/>
                    </eAnnotations>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEIlVJREeiyW7NaN4qWdw" name="territory" type="_CJkZgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIllJREeiyW7NaN4qWdw" name="radius">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEIl1JREeiyW7NaN4qWdw" name="tiles" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEImFJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEImVJREeiyW7NaN4qWdw" type="_CVWywVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>final Tile center = territory.getCenterTile(map);&#xD;
     Collections.sort(tiles, new Comparator&lt;Tile>() {&#xD;
             @Override&#xD;
             public int compare(Tile t1, Tile t2) {&#xD;
                 return t1.getDistanceTo(center) - t2.getDistanceTo(center);&#xD;
             }&#xD;
         });&#xD;
     for (Tile t : tiles) {&#xD;
         // Choose this tile if it is free and half the expected tile&#xD;
         // claim can succeed (preventing capitals on small islands).&#xD;
         if (territory.player.getClaimableTiles(t, radius).size()&#xD;
             >= (2 * radius + 1) * (2 * radius + 1) / 2) {&#xD;
             String name = (territory.region == null) ? &quot;default region&quot;&#xD;
                 : territory.region.toString();&#xD;
             lb.add(&quot;Placing the &quot;, territory.player,&#xD;
                 &quot; capital in region: &quot;, name, &quot; at tile: &quot;, t, &quot;\n&quot;);&#xD;
             IndianSettlement is = placeIndianSettlement(territory.player,&#xD;
                 true, t, map, lb);&#xD;
             territory.numberOfSettlements--;&#xD;
             territory.tile = t;&#xD;
             return is;&#xD;
         }&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEImlJREeiyW7NaN4qWdw" name="placeIndianSettlement" specification="_CXbPUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEIm1JREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEInFJREeiyW7NaN4qWdw" name="capital">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEInVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEInlJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIn1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEIoFJREeiyW7NaN4qWdw" type="_CVWywVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>String name = (capital) ? player.getCapitalName(random)&#xD;
         : player.getSettlementName(random);&#xD;
     UnitType skill&#xD;
         = generateSkillForLocation(map, tile, player.getNationType());&#xD;
     ServerIndianSettlement settlement&#xD;
         = new ServerIndianSettlement(map.getGame(), player, name, tile,&#xD;
                                      capital, skill, null);&#xD;
     player.addSettlement(settlement);&#xD;
     lb.add(&quot;Generated skill for &quot;, settlement.getName(),&#xD;
         &quot;: &quot;, settlement.getLearnableSkill().getSuffix(), &quot;\n&quot;);&#xD;
&#xD;
     settlement.placeSettlement(true);&#xD;
     settlement.addRandomGoods(random);&#xD;
     settlement.addUnits(random);&#xD;
&#xD;
     return settlement;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEvkFJREeiyW7NaN4qWdw" name="generateSkillForLocation" specification="_CXb2YFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEvkVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvklJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvk1JREeiyW7NaN4qWdw" name="nationType" type="_CV5lUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvlFJREeiyW7NaN4qWdw" type="_CV8BkVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>List&lt;RandomChoice&lt;UnitType>> skills&#xD;
         = ((IndianNationType)nationType).getSkills();&#xD;
     java.util.Map&lt;GoodsType, Integer> scale = new HashMap&lt;>();&#xD;
     for (RandomChoice&lt;UnitType> skill : skills) {&#xD;
         scale.put(skill.getObject().getExpertProduction(), 1);&#xD;
     }&#xD;
&#xD;
     for (Tile t: tile.getSurroundingTiles(1)) {&#xD;
         for (Entry&lt;GoodsType, Integer> entry : scale.entrySet()) {&#xD;
             GoodsType goodsType = entry.getKey();&#xD;
             scale.put(goodsType, entry.getValue()&#xD;
                       + t.getPotentialProduction(goodsType, null));&#xD;
         }&#xD;
     }&#xD;
&#xD;
     List&lt;RandomChoice&lt;UnitType>> scaledSkills = new ArrayList&lt;>();&#xD;
     for (RandomChoice&lt;UnitType> skill : skills) {&#xD;
         UnitType unitType = skill.getObject();&#xD;
         int scaleValue = scale.get(unitType.getExpertProduction());&#xD;
         scaledSkills.add(new RandomChoice&lt;>(unitType,&#xD;
                 skill.getProbability() * scaleValue));&#xD;
     }&#xD;
     UnitType skill = RandomChoice.getWeightedRandom(null, null,&#xD;
                                                     scaledSkills, random);&#xD;
     if (skill == null) {&#xD;
         // Seasoned Scout&#xD;
         List&lt;UnitType> unitList = map.getSpecification().getUnitTypesWithAbility(Ability.EXPERT_SCOUT);&#xD;
         return getRandomMember(logger, &quot;Scout&quot;, unitList, random);&#xD;
     } else {&#xD;
         return skill;&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEvlVJREeiyW7NaN4qWdw" name="createEuropeanUnits" specification="_CXcdcFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEvllJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvl1JREeiyW7NaN4qWdw" name="players" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvmFJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final int width = map.getWidth();&#xD;
     final int height = map.getHeight();&#xD;
     final int poleDistance = (int)(MIN_DISTANCE_FROM_POLE*height/2);&#xD;
&#xD;
     List&lt;Player> europeanPlayers = new ArrayList&lt;>();&#xD;
     for (Player player : players) {&#xD;
         if (player.isREF()) {&#xD;
             // eastern edge of the map&#xD;
             int x = width - 2;&#xD;
             // random latitude, not too close to the pole&#xD;
             int y = randomInt(logger, &quot;Pole&quot;, random,&#xD;
                               height - 2*poleDistance) + poleDistance;&#xD;
             player.setEntryLocation(map.getTile(x, y));&#xD;
             continue;&#xD;
         }&#xD;
         if (player.isEuropean()) europeanPlayers.add(player);&#xD;
     }&#xD;
&#xD;
     List&lt;Position> positions = generateStartingPositions(map, europeanPlayers);&#xD;
     List&lt;Tile> startingTiles = new ArrayList&lt;>();&#xD;
     List&lt;Unit> carriers = new ArrayList&lt;>();&#xD;
     List&lt;Unit> passengers = new ArrayList&lt;>();&#xD;
&#xD;
     for (int index = 0; index &lt; europeanPlayers.size(); index++) {&#xD;
         Player player = europeanPlayers.get(index);&#xD;
         Position position = positions.get(index);&#xD;
         lb.add(&quot;Generating units for player &quot;, player, &quot;.\n&quot;);&#xD;
&#xD;
         carriers.clear();&#xD;
         passengers.clear();&#xD;
         List&lt;AbstractUnit> unitList = ((EuropeanNationType) player.getNationType())&#xD;
             .getStartingUnits();&#xD;
         for (AbstractUnit startingUnit : unitList) {&#xD;
             UnitType type = startingUnit.getType(spec);&#xD;
             Role role = startingUnit.getRole(spec);&#xD;
             Unit newUnit = new ServerUnit(game, null, player, type, role);&#xD;
             newUnit.setName(player.getNameForUnit(type, random));&#xD;
             if (newUnit.isNaval()) {&#xD;
                 if (newUnit.canCarryUnits()) {&#xD;
                     newUnit.setState(Unit.UnitState.ACTIVE);&#xD;
                     carriers.add(newUnit);&#xD;
                 }&#xD;
             } else {&#xD;
                 newUnit.setState(Unit.UnitState.SENTRY);&#xD;
                 passengers.add(newUnit);&#xD;
             }&#xD;
&#xD;
         }&#xD;
&#xD;
         boolean startAtSea = true;&#xD;
         if (carriers.isEmpty()) {&#xD;
             lb.add(&quot;No carriers defined for player &quot;, player, &quot;.\n&quot;);&#xD;
             startAtSea = false;&#xD;
         }&#xD;
&#xD;
         Tile startTile = null;&#xD;
         int x = position.getX();&#xD;
         int y = position.getY();&#xD;
         for (int i = 0; i &lt; 2 * map.getHeight(); i++) {&#xD;
             int offset = (i % 2 == 0) ? i / 2 : -(1 + i / 2);&#xD;
             int row = y + offset;&#xD;
             if (row &lt; 0 || row >= map.getHeight()) continue;&#xD;
             startTile = findTileFor(map, row, x, startAtSea, lb);&#xD;
             if (startTile != null) {&#xD;
                 if (startingTiles.contains(startTile)) {&#xD;
                     startTile = null;&#xD;
                 } else {&#xD;
                     startingTiles.add(startTile);&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         if (startTile == null) {&#xD;
             LogBuilder lb2 = new LogBuilder(64);&#xD;
             lb2.add(&quot;Failed to find start tile &quot;,&#xD;
                 ((startAtSea) ? &quot;at sea&quot; : &quot;on land&quot;),&#xD;
                 &quot; for player &quot;, player,&#xD;
                 &quot; from (&quot;, x, &quot;,&quot;, y, &quot;) avoiding:&quot;);&#xD;
             for (Tile t : startingTiles) lb2.add(&quot; &quot;, t);&#xD;
             lb2.add(&quot; with map: &quot;);&#xD;
             for (int xx = 0; xx &lt; map.getWidth(); xx++) {&#xD;
                 lb2.add(&quot; &quot;, map.getTile(xx, y));&#xD;
             }&#xD;
             throw new RuntimeException(lb2.toString());&#xD;
         }&#xD;
&#xD;
         player.setEntryLocation(startTile);&#xD;
&#xD;
         if (startAtSea) {&#xD;
             for (Unit carrier : carriers) {&#xD;
                 carrier.setLocation(startTile);&#xD;
                 ((ServerPlayer)player).exploreForUnit(carrier);&#xD;
             }&#xD;
             passengers: for (Unit unit : passengers) {&#xD;
                 for (Unit carrier : carriers) {&#xD;
                     if (carrier.canAdd(unit)) {&#xD;
                         unit.setLocation(carrier);&#xD;
                         continue passengers;&#xD;
                     }&#xD;
                 }&#xD;
                 // no space left on carriers&#xD;
                 unit.setLocation(player.getEurope());&#xD;
             }&#xD;
         } else {&#xD;
             for (Unit unit : passengers) {&#xD;
                 unit.setLocation(startTile);&#xD;
                 ((ServerPlayer)player).exploreForUnit(unit);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         if (FreeColDebugger.isInDebugMode(FreeColDebugger.DebugMode.INIT)) {&#xD;
             createDebugUnits(map, player, startTile, lb);&#xD;
             IntegerOption op = spec.getIntegerOption(GameOptions.STARTING_MONEY);&#xD;
             if (op != null) op.setValue(10000);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEvmVJREeiyW7NaN4qWdw" name="findTileFor" specification="_CXdEgVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEvmlJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvm1JREeiyW7NaN4qWdw" name="row">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEvnFJREeiyW7NaN4qWdw" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEvnVJREeiyW7NaN4qWdw" name="startAtSea">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYEvnlJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvn1JREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Tile tile = null;&#xD;
     Tile seas = null;&#xD;
     int offset = (start == 0) ? 1 : -1;&#xD;
     for (int x = start; 0 &lt;= x &amp;&amp; x &lt; map.getWidth(); x += offset) {&#xD;
         tile = map.getTile(x, row);&#xD;
         if (tile.isDirectlyHighSeasConnected()) {&#xD;
             seas = tile;&#xD;
         } else if (tile.isLand()) {&#xD;
             return (startAtSea) ? seas : tile;&#xD;
         } &#xD;
     }&#xD;
     lb.add(&quot;No land in row &quot;, row, &quot;.\n&quot;);&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEvoFJREeiyW7NaN4qWdw" name="createDebugUnits" specification="_CXdrk1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEvoVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvolJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvo1JREeiyW7NaN4qWdw" name="startTile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvpFJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>// In debug mode give each player a few more units and a colony.&#xD;
     UnitType unitType = spec.getUnitType(&quot;model.unit.galleon&quot;);&#xD;
     Unit unit4 = new ServerUnit(game, startTile, player, unitType);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.privateer&quot;);&#xD;
     Unit privateer = new ServerUnit(game, startTile, player, unitType);&#xD;
     ((ServerPlayer)player).exploreForUnit(privateer);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.freeColonist&quot;);&#xD;
     Unit unit5 = new ServerUnit(game, unit4, player, unitType);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.veteranSoldier&quot;);&#xD;
     Unit unit6 = new ServerUnit(game, unit4, player, unitType);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.jesuitMissionary&quot;);&#xD;
     Unit unit7 = new ServerUnit(game, unit4, player, unitType);&#xD;
&#xD;
     Tile colonyTile = null;&#xD;
     for (Tile tempTile : map.getCircleTiles(startTile, true, &#xD;
                                             FreeColObject.INFINITY)) {&#xD;
         if (tempTile.isPolar()) continue; // No initial polar colonies&#xD;
         if (player.canClaimToFoundSettlement(tempTile)) {&#xD;
             colonyTile = tempTile;&#xD;
             break;&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (colonyTile == null) {&#xD;
         lb.add(&quot;Could not find a debug colony site.\n&quot;);&#xD;
         return;&#xD;
     }&#xD;
     colonyTile.setType(find(spec.getTileTypeList(), t -> !t.isWater()));&#xD;
     unitType = spec.getUnitType(&quot;model.unit.expertFarmer&quot;);&#xD;
     Unit buildColonyUnit = new ServerUnit(game, colonyTile,&#xD;
                                           player, unitType);&#xD;
     String colonyName = Messages.message(player.getNationLabel())&#xD;
         + &quot; &quot; + Messages.message(&quot;Colony&quot;);&#xD;
     Colony colony = new ServerColony(game, player, colonyName, colonyTile);&#xD;
     player.addSettlement(colony);&#xD;
     colony.placeSettlement(true);&#xD;
     for (Tile tile : colonyTile.getSurroundingTiles(1)) {&#xD;
         if (!tile.hasSettlement()&#xD;
             &amp;&amp; (tile.getOwner() == null&#xD;
                 || !tile.getOwner().isEuropean())) {&#xD;
             tile.changeOwnership(player, colony);&#xD;
             if (tile.hasLostCityRumour()) {&#xD;
                 tile.removeLostCityRumour();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     buildColonyUnit.setLocation(colony);&#xD;
     if (buildColonyUnit.getLocation() instanceof ColonyTile) {&#xD;
         Tile ct = ((ColonyTile) buildColonyUnit.getLocation()).getWorkTile();&#xD;
         for (TileType t : spec.getTileTypeList()) {&#xD;
             if (!t.isWater()) {&#xD;
                 ct.setType(t);&#xD;
                 TileImprovementType plowType = map.getSpecification()&#xD;
                     .getTileImprovementType(&quot;model.improvement.plow&quot;);&#xD;
                 TileImprovement plow = new TileImprovement(game, ct, plowType);&#xD;
                 plow.setTurnsToComplete(0);&#xD;
                 ct.add(plow);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     BuildingType schoolType = spec.getBuildingType(&quot;model.building.schoolhouse&quot;);&#xD;
     Building schoolhouse = new ServerBuilding(game, colony, schoolType);&#xD;
     colony.addBuilding(schoolhouse);&#xD;
&#xD;
     unitType = spec.getUnitType(&quot;model.unit.elderStatesman&quot;);&#xD;
     Unit statesman = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     statesman.setLocation(colony.getWorkLocationFor(statesman,&#xD;
             statesman.getType().getExpertProduction()));&#xD;
&#xD;
     unitType = spec.getUnitType(&quot;model.unit.expertLumberJack&quot;);&#xD;
     Unit lumberjack = new ServerUnit(game, colony, player, unitType);&#xD;
     if (lumberjack.getLocation() instanceof ColonyTile) {&#xD;
         Tile lt = ((ColonyTile) lumberjack.getLocation()).getWorkTile();&#xD;
         for (TileType t : spec.getTileTypeList()) {&#xD;
             if (t.isForested()) {&#xD;
                 lt.setType(t);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         lumberjack.changeWorkType(lumberjack.getType()&#xD;
             .getExpertProduction());&#xD;
     }&#xD;
&#xD;
     unitType = spec.getUnitType(&quot;model.unit.masterCarpenter&quot;);&#xD;
     Unit carpenter = new ServerUnit(game, colony, player, unitType);&#xD;
&#xD;
     unitType = spec.getUnitType(&quot;model.unit.seasonedScout&quot;);&#xD;
     Unit scout = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     ((ServerPlayer)player).exploreForUnit(scout);&#xD;
&#xD;
     unitType = spec.getUnitType(&quot;model.unit.veteranSoldier&quot;);&#xD;
     Unit unit8 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     Unit unit9 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.artillery&quot;);&#xD;
     Unit unit10 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     Unit unit11 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     Unit unit12 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.treasureTrain&quot;);&#xD;
     Unit unit13 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     unit13.setTreasureAmount(10000);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.wagonTrain&quot;);&#xD;
     Unit unit14 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     GoodsType cigarsType = spec.getGoodsType(&quot;model.goods.cigars&quot;);&#xD;
     Goods cigards = new Goods(game, unit14, cigarsType, 5);&#xD;
     unit14.add(cigards);&#xD;
     unitType = spec.getUnitType(&quot;model.unit.jesuitMissionary&quot;);&#xD;
     Unit unit15 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
     Unit unit16 = new ServerUnit(game, colonyTile, player, unitType);&#xD;
&#xD;
     ((ServerPlayer)player).exploreForSettlement(colony);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYEvpVJREeiyW7NaN4qWdw" name="generateStartingPositions" specification="_CXeSolJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYEvplJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvp1JREeiyW7NaN4qWdw" name="players" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYEvqFJREeiyW7NaN4qWdw" type="_CV4-QVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYEvqVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int number = players.size();&#xD;
     List&lt;Position> positions = new ArrayList&lt;>(number);&#xD;
     if (number > 0) {&#xD;
         int west = 0;&#xD;
         int east = map.getWidth() - 1;&#xD;
         switch (spec.getInteger(GameOptions.STARTING_POSITIONS)) {&#xD;
         case GameOptions.STARTING_POSITIONS_CLASSIC:&#xD;
             int distance = map.getHeight() / number;&#xD;
             int row = distance/2;&#xD;
             for (int index = 0; index &lt; number; index++) {&#xD;
                 positions.add(new Position(east, row));&#xD;
                 row += distance;&#xD;
             }&#xD;
             randomShuffle(logger, &quot;Classic starting positions&quot;,&#xD;
                           positions, random);&#xD;
             break;&#xD;
         case GameOptions.STARTING_POSITIONS_RANDOM:&#xD;
             distance = 2 * map.getHeight() / number;&#xD;
             row = distance/2;&#xD;
             for (int index = 0; index &lt; number; index++) {&#xD;
                 if (index % 2 == 0) {&#xD;
                     positions.add(new Position(east, row));&#xD;
                 } else {&#xD;
                     positions.add(new Position(west, row));&#xD;
                     row += distance;&#xD;
                 }&#xD;
             }&#xD;
             randomShuffle(logger, &quot;Random starting positions&quot;,&#xD;
                           positions, random);&#xD;
             break;&#xD;
         case GameOptions.STARTING_POSITIONS_HISTORICAL:&#xD;
             for (Player player : players) {&#xD;
                 Nation nation = player.getNation();&#xD;
                 positions.add(new Position(nation.startsOnEastCoast() ? east : west,&#xD;
                                            map.getRow(nation.getPreferredLatitude())));&#xD;
             }&#xD;
             break;&#xD;
         }&#xD;
     }&#xD;
     return positions;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYFWoFJREeiyW7NaN4qWdw" name="createEmptyMap" specification="_CXfgwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYFWoVJREeiyW7NaN4qWdw" name="width">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYFWolJREeiyW7NaN4qWdw" name="height">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYFWo1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYFWpFJREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>recache(false); // Reload the options and specification&#xD;
&#xD;
     return new TerrainGenerator(game, null, random)&#xD;
         .createMap(new LandMap(width, height), lb);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYFWpVJREeiyW7NaN4qWdw" name="createMap" specification="_CXgH0lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYFWplJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYFWp1JREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>recache(true); // Reload the options and specification&#xD;
&#xD;
     // Create land map.&#xD;
     LandMap landMap = (importGame != null) ? new LandMap(importGame)&#xD;
         : new LandMap(mapOptions, random);&#xD;
&#xD;
     // Create terrain.&#xD;
     Map map = new TerrainGenerator(game, importGame, random)&#xD;
         .createMap(landMap, lb);&#xD;
&#xD;
     // Decorate the map.&#xD;
     makeNativeSettlements(map, lb);&#xD;
     makeLostCityRumours(map, lb);&#xD;
     createEuropeanUnits(map, game.getLiveEuropeanPlayers(null), lb);&#xD;
     return map;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJnc0FJREeiyW7NaN4qWdw" name="recache" visibility="private" method="_CYDhdFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBCVJREeiyW7NaN4qWdw">
                    <body>Update the cached variables.&#xD;
     *&#xD;
     * @param checkImport Check for an import file or not.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJnc0VJREeiyW7NaN4qWdw" name="checkImport">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CJnc0lJREeiyW7NaN4qWdw" name="getApproximateLandCount" visibility="private" method="_CYDhdlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBClJREeiyW7NaN4qWdw">
                    <body>Gets the approximate number of land tiles.&#xD;
     *&#xD;
     * @return The approximate number of land tiles</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJnc01JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXWW0FJREeiyW7NaN4qWdw" name="SimpleMapGenerator" method="_CYDhcFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXWW01JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXWW1FJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYJBCFJREeiyW7NaN4qWdw">
                    <body>Creates a &lt;code>MapGenerator&lt;/code>&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> to generate for.&#xD;
     * @param random The &lt;code>Random&lt;/code> number source to use.&#xD;
     * @see #createMap</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXWW0VJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXWW0lJREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXWW1VJREeiyW7NaN4qWdw" type="_CJjLYFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXWW1lJREeiyW7NaN4qWdw" name="makeLostCityRumours" visibility="private" method="_CYDheFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBC1JREeiyW7NaN4qWdw">
                    <body>Make lost city rumours on the given map.&#xD;
     *&#xD;
     * The number of rumours depends on the map size.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to use.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXWW11JREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXW94FJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXW94VJREeiyW7NaN4qWdw" name="importIndianSettlements" visibility="private" method="_CYDhe1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXW94lJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXW941JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXW95FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXXk8FJREeiyW7NaN4qWdw" name="makeNativeSettlements" visibility="private" method="_CYEIgFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBDFJREeiyW7NaN4qWdw">
                    <body>Make the native settlements, at least a capital for every&#xD;
     * nation and random numbers of other settlements.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to place the indian settlements on.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXXk8VJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CXXk81JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CXXk9FJREeiyW7NaN4qWdw" key="final"/>
                    </eAnnotations>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXXk8lJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXXk9VJREeiyW7NaN4qWdw" name="suitableForNativeSettlement" visibility="private" method="_CYEIhVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBDVJREeiyW7NaN4qWdw">
                    <body>Is a tile suitable for a native settlement?&#xD;
     * Require the tile be settleable, and at least half its neighbours&#xD;
     * also be settleable.&#xD;
     *&#xD;
     * FIXME: degrade the second test to usability, but wait until the&#xD;
     * natives-use-water situation is sorted.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to examine.&#xD;
     * @return True if this tile is suitable.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXXk9lJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXXk91JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXYMAFJREeiyW7NaN4qWdw" name="findFreeNeighbouringTile" visibility="private" method="_CYEIiFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXYMAVJREeiyW7NaN4qWdw" name="is" type="_CVWywVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXYMAlJREeiyW7NaN4qWdw" name="tiles" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXYMA1JREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXYzEVJREeiyW7NaN4qWdw" name="getClosestTerritory" visibility="private" method="_CYEIjFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXZaIFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXZaIVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXZaIlJREeiyW7NaN4qWdw" name="territories" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXZaI1JREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXaBMFJREeiyW7NaN4qWdw" name="placeCapital" visibility="private" method="_CYEIkVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBDlJREeiyW7NaN4qWdw">
                    <body>Place a native capital in a territory.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to place the settlement in.&#xD;
     * @param territory The &lt;code>Territory&lt;/code> within the map.&#xD;
     * @param radius The settlement radius.&#xD;
     * @param tiles A list of &lt;code>Tile&lt;/code>s to select from.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return The &lt;code>IndianSettlement&lt;/code> placed, or null if&#xD;
     *     none placed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXaBMVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CXaBN1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CXaBOFJREeiyW7NaN4qWdw" key="final"/>
                    </eAnnotations>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXaBMlJREeiyW7NaN4qWdw" name="territory" type="_CJkZgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXaBM1JREeiyW7NaN4qWdw" name="radius">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXaBNFJREeiyW7NaN4qWdw" name="tiles" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXaBNVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXaBNlJREeiyW7NaN4qWdw" type="_CVWywVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXbPUFJREeiyW7NaN4qWdw" name="placeIndianSettlement" visibility="private" method="_CYEImlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBD1JREeiyW7NaN4qWdw">
                    <body>Builds a &lt;code>IndianSettlement&lt;/code> at the given position.&#xD;
     *&#xD;
     * @param player The player owning the new settlement.&#xD;
     * @param capital &lt;code>true&lt;/code> if the settlement should be a&#xD;
     *      {@link IndianSettlement#isCapital() capital}.&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to place the settlement.&#xD;
     * @param map The map that should get a new settlement.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return The &lt;code>IndianSettlement&lt;/code> just being placed&#xD;
     *      on the map.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXbPUVJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXbPUlJREeiyW7NaN4qWdw" name="capital">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXbPU1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXbPVFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXbPVVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXbPVlJREeiyW7NaN4qWdw" type="_CVWywVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXb2YFJREeiyW7NaN4qWdw" name="generateSkillForLocation" visibility="private" method="_CYEvkFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBEFJREeiyW7NaN4qWdw">
                    <body>Generates a skill that could be taught from a settlement on the&#xD;
     * given tile.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code>.&#xD;
     * @param tile The &lt;code>Tile&lt;/code> where the settlement will be located.&#xD;
     * @param nationType The &lt;code>NationType&lt;/code> to generate a skill for.&#xD;
     * @return A skill that can be taught to Europeans.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXb2YVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXb2YlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXb2Y1JREeiyW7NaN4qWdw" name="nationType" type="_CV5lUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXb2ZFJREeiyW7NaN4qWdw" type="_CV8BkVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXcdcFJREeiyW7NaN4qWdw" name="createEuropeanUnits" visibility="private" method="_CYEvlVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJBEVJREeiyW7NaN4qWdw">
                    <body>Create two ships, one with a colonist, for each player, and&#xD;
     * select suitable starting positions.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to place the european units on.&#xD;
     * @param players The players to create &lt;code>Settlement&lt;/code>s&#xD;
     *      and starting locations for. That is; both indian and&#xD;
     *      european players.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXcdcVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXcdclJREeiyW7NaN4qWdw" name="players" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXcdc1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXdEgVJREeiyW7NaN4qWdw" name="findTileFor" visibility="private" method="_CYEvmVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXdEglJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXdEg1JREeiyW7NaN4qWdw" name="row">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXdEhFJREeiyW7NaN4qWdw" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXdrkFJREeiyW7NaN4qWdw" name="startAtSea">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXdrkVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXdrklJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXdrk1JREeiyW7NaN4qWdw" name="createDebugUnits" visibility="private" method="_CYEvoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXdrlFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXdrlVJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXeSoFJREeiyW7NaN4qWdw" name="startTile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXeSoVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXeSolJREeiyW7NaN4qWdw" name="generateStartingPositions" visibility="private" method="_CYEvpVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXeSo1JREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXeSpFJREeiyW7NaN4qWdw" name="players" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXeSpVJREeiyW7NaN4qWdw" type="_CV4-QVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXeSplJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXfgwFJREeiyW7NaN4qWdw" name="createEmptyMap" method="_CYFWoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXfgwVJREeiyW7NaN4qWdw" name="width">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXfgwlJREeiyW7NaN4qWdw" name="height">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXfgw1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXfgxFJREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXgH0lJREeiyW7NaN4qWdw" name="createMap" method="_CYFWpVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CXgH01JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXgu4FJREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_CJkZgFJREeiyW7NaN4qWdw" name="Territory" visibility="private">
                  <eAnnotations xmi:id="_CJkZgVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CJkZglJREeiyW7NaN4qWdw" key="static"/>
                  </eAnnotations>
                  <ownedAttribute xmi:id="_CX3UMVJREeiyW7NaN4qWdw" name="region" type="_CVZ2E1JREeiyW7NaN4qWdw" association="_CYRj41JREeiyW7NaN4qWdw"/>
                  <ownedAttribute xmi:id="_CX3UM1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw" association="_CYRj5lJREeiyW7NaN4qWdw"/>
                  <ownedAttribute xmi:id="_CX37QVJREeiyW7NaN4qWdw" name="player" isLeaf="true" type="_CVYA4VJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYSK8VJREeiyW7NaN4qWdw"/>
                  <ownedAttribute xmi:id="_CX37Q1JREeiyW7NaN4qWdw" name="numberOfSettlements">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedAttribute>
                  <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6Y1JREeiyW7NaN4qWdw" name="Territory" specification="_CXUhoFJREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CYC6ZFJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CYC6ZVJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CYC6ZlJREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                    <language>java</language>
                    <body>this.player = player;&#xD;
         this.tile = tile;&#xD;
     </body>
                  </ownedBehavior>
                  <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6Z1JREeiyW7NaN4qWdw" name="Territory" specification="_CXVIsFJREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CYC6aFJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CYC6aVJREeiyW7NaN4qWdw" name="region" type="_CVZ2E1JREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CYC6alJREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                    <language>java</language>
                    <body>this.player = player;&#xD;
         this.region = region;&#xD;
     </body>
                  </ownedBehavior>
                  <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6a1JREeiyW7NaN4qWdw" name="getCenterTile" specification="_CXVItlJREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CYC6bFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CYC6bVJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                    <language>java</language>
                    <body>if (tile != null) return tile;&#xD;
         int[] xy = region.getCenter();&#xD;
         return map.getTile(xy[0], xy[1]);&#xD;
     </body>
                  </ownedBehavior>
                  <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYC6blJREeiyW7NaN4qWdw" name="toString" specification="_CJlnoFJREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CYC6b1JREeiyW7NaN4qWdw" direction="return">
                      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    </ownedParameter>
                    <language>java</language>
                    <body>return player + &quot; territory at &quot; + region;&#xD;
     </body>
                  </ownedBehavior>
                  <ownedOperation xmi:id="_CJlnoFJREeiyW7NaN4qWdw" name="toString" method="_CYC6blJREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CJlnoVJREeiyW7NaN4qWdw" direction="return">
                      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                    </ownedParameter>
                  </ownedOperation>
                  <ownedOperation xmi:id="_CXUhoFJREeiyW7NaN4qWdw" name="Territory" method="_CYC6Y1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CXUho1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CXUhpFJREeiyW7NaN4qWdw" key="create"/>
                    </eAnnotations>
                    <ownedParameter xmi:id="_CXUhoVJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXUholJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXUhpVJREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_CXVIsFJREeiyW7NaN4qWdw" name="Territory" method="_CYC6Z1JREeiyW7NaN4qWdw">
                    <eAnnotations xmi:id="_CXVIs1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                      <details xmi:id="_CXVItFJREeiyW7NaN4qWdw" key="create"/>
                    </eAnnotations>
                    <ownedParameter xmi:id="_CXVIsVJREeiyW7NaN4qWdw" name="player" type="_CVYA4VJREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXVIslJREeiyW7NaN4qWdw" name="region" type="_CVZ2E1JREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXVItVJREeiyW7NaN4qWdw" type="_CJkZgFJREeiyW7NaN4qWdw" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_CXVItlJREeiyW7NaN4qWdw" name="getCenterTile" method="_CYC6a1JREeiyW7NaN4qWdw">
                    <ownedParameter xmi:id="_CXVIt1JREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                    <ownedParameter xmi:id="_CXVvwFJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                  </ownedOperation>
                </nestedClassifier>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CJyb8FJREeiyW7NaN4qWdw" name="TerrainGenerator">
                <ownedComment xmi:id="_CYJoEFJREeiyW7NaN4qWdw">
                  <body>Class for making a &lt;code>Map&lt;/code> based upon a land map.&#xD;
 *&#xD;
FIXME: dynamic lakes, mountains and hills</body>
                </ownedComment>
                <ownedAttribute xmi:id="_CX6-kFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_CVeukFJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYUAIVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX6-kVJREeiyW7NaN4qWdw" value="Logger.getLogger(TerrainGenerator.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX6-klJREeiyW7NaN4qWdw" name="LAND_REGIONS_SCORE_VALUE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX6-k1JREeiyW7NaN4qWdw" value="1000"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX6-lFJREeiyW7NaN4qWdw" name="LAND_REGION_MIN_SCORE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX6-lVJREeiyW7NaN4qWdw" value="5"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX7loFJREeiyW7NaN4qWdw" name="LAND_REGION_MAX_SIZE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX7loVJREeiyW7NaN4qWdw" value="75"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX7lolJREeiyW7NaN4qWdw" name="game" visibility="private" isLeaf="true" type="_CVQsI1JREeiyW7NaN4qWdw" isReadOnly="true" association="_CYUAJFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX7lpFJREeiyW7NaN4qWdw" name="importGame" visibility="private" isLeaf="true" type="_CVQsI1JREeiyW7NaN4qWdw" isReadOnly="true" association="_CYUnMVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX8MsVJREeiyW7NaN4qWdw" name="random" visibility="private" isLeaf="true" type="_CVeHgVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYVOQVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX8zwFJREeiyW7NaN4qWdw" name="mapOptions" visibility="private" isLeaf="true" type="_CWurwVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYVORFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX8zwlJREeiyW7NaN4qWdw" name="spec" visibility="private" isLeaf="true" type="_CVTvcVJREeiyW7NaN4qWdw" isReadOnly="true" association="_CYV1UVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_CX8zxFJREeiyW7NaN4qWdw" name="landTileTypes" visibility="private" type="_CVTIYVJREeiyW7NaN4qWdw" isOrdered="true" association="_CYV1VFJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CX9a0FJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX9a0VJREeiyW7NaN4qWdw" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_CX9a01JREeiyW7NaN4qWdw" name="oceanTileTypes" visibility="private" type="_CVTIYVJREeiyW7NaN4qWdw" isOrdered="true" association="_CYWcYVJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CX9a1FJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_CX9a1VJREeiyW7NaN4qWdw" value="null"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYF9sFJREeiyW7NaN4qWdw" name="TerrainGenerator" specification="_CXjLIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYF9sVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYF9slJREeiyW7NaN4qWdw" name="importGame" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYF9s1JREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYF9tFJREeiyW7NaN4qWdw" type="_CJyb8FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this.game = game;&#xD;
     this.importGame = importGame;&#xD;
     this.random = random;&#xD;
     this.mapOptions = game.getMapGeneratorOptions();&#xD;
     this.spec = game.getSpecification();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYF9tVJREeiyW7NaN4qWdw" name="limitToRange" specification="_CJ0RIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYF9tlJREeiyW7NaN4qWdw" name="value">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9t1JREeiyW7NaN4qWdw" name="lower">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9uFJREeiyW7NaN4qWdw" name="upper">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9uVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return Math.max(lower, Math.min(value, upper));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYF9ulJREeiyW7NaN4qWdw" name="getApproximateLandCount" specification="_CJ04MFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYF9u1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return mapOptions.getInteger(MapGeneratorOptions.MAP_WIDTH)&#xD;
         * mapOptions.getInteger(MapGeneratorOptions.MAP_HEIGHT)&#xD;
         * mapOptions.getInteger(MapGeneratorOptions.LAND_MASS)&#xD;
         / 100;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYF9vFJREeiyW7NaN4qWdw" name="createTile" specification="_CXjyMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYF9vVJREeiyW7NaN4qWdw" name="x">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9vlJREeiyW7NaN4qWdw" name="y">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9v1JREeiyW7NaN4qWdw" name="landMap" type="_CV3wIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYF9wFJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYF9wVJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return (landMap.isLand(x, y))&#xD;
         ? new Tile(game, getRandomLandTileType(latitude), x, y)&#xD;
         : new Tile(game, getRandomOceanTileType(latitude), x, y);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYF9wlJREeiyW7NaN4qWdw" name="getRandomLandTileType" specification="_CJ04MlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGkwFJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYGkwVJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>if (landTileTypes == null) {&#xD;
         // Do not generate elevated and water tiles at this time&#xD;
         // they are created elsewhere.&#xD;
         landTileTypes = spec.getTileTypeList().stream()&#xD;
             .filter(t -> !t.isElevation() &amp;&amp; !t.isWater())&#xD;
             .collect(Collectors.toList());&#xD;
     }&#xD;
     return getRandomTileType(landTileTypes, latitude);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGkwlJREeiyW7NaN4qWdw" name="getRandomOceanTileType" specification="_CJ1fQVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGkw1JREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYGkxFJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>if (oceanTileTypes == null) {&#xD;
         oceanTileTypes = spec.getTileTypeList().stream()&#xD;
             .filter(t -> t.isWater()&#xD;
                 &amp;&amp; t.isHighSeasConnected()&#xD;
                 &amp;&amp; !t.isDirectlyHighSeasConnected())&#xD;
             .collect(Collectors.toList());&#xD;
     }&#xD;
     return getRandomTileType(oceanTileTypes, latitude);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGkxVJREeiyW7NaN4qWdw" name="getRandomTileType" specification="_CXkZQ1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGkxlJREeiyW7NaN4qWdw" name="candidates" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGkx1JREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CYGkyFJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>// decode options&#xD;
     final int forestChance&#xD;
         = mapOptions.getInteger(MapGeneratorOptions.FOREST_NUMBER);&#xD;
     final int temperaturePreference&#xD;
         = mapOptions.getInteger(MapGeneratorOptions.TEMPERATURE);&#xD;
&#xD;
     // temperature calculation&#xD;
     int poleTemperature = -20;&#xD;
     int equatorTemperature= 40;&#xD;
     switch (temperaturePreference) {&#xD;
     case MapGeneratorOptions.TEMPERATURE_COLD:&#xD;
         poleTemperature = -20;&#xD;
         equatorTemperature = 25;&#xD;
         break;&#xD;
     case MapGeneratorOptions.TEMPERATURE_CHILLY:&#xD;
         poleTemperature = -20;&#xD;
         equatorTemperature = 30;&#xD;
         break;&#xD;
     case MapGeneratorOptions.TEMPERATURE_TEMPERATE:&#xD;
         poleTemperature = -10;&#xD;
         equatorTemperature = 35;&#xD;
         break;&#xD;
     case MapGeneratorOptions.TEMPERATURE_WARM:&#xD;
         poleTemperature = -5;&#xD;
         equatorTemperature = 40;&#xD;
         break;&#xD;
     case MapGeneratorOptions.TEMPERATURE_HOT:&#xD;
         poleTemperature = 0;&#xD;
         equatorTemperature = 40;&#xD;
         break;&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
&#xD;
     final Specification spec = game.getSpecification();&#xD;
     int temperatureRange = equatorTemperature-poleTemperature;&#xD;
     int localeTemperature = poleTemperature + (90 - Math.abs(latitude))&#xD;
         * temperatureRange/90;&#xD;
     int temperatureDeviation = 7; // +/- 7 degrees randomization&#xD;
     localeTemperature += randomInt(logger, &quot;Temperature&quot;, random,&#xD;
                                    temperatureDeviation * 2)&#xD;
         - temperatureDeviation;&#xD;
     localeTemperature = limitToRange(localeTemperature, -20, 40);&#xD;
&#xD;
     // humidity calculation&#xD;
     int localeHumidity = spec.getRangeOption(MapGeneratorOptions.HUMIDITY)&#xD;
         .getValue();&#xD;
     int humidityDeviation = 20; // +/- 20% randomization&#xD;
     localeHumidity += randomInt(logger, &quot;Humidity&quot;, random,&#xD;
                                 humidityDeviation * 2)&#xD;
         - humidityDeviation;&#xD;
     localeHumidity = limitToRange(localeHumidity, 0, 100);&#xD;
&#xD;
     List&lt;TileType> candidateTileTypes = new ArrayList&lt;>(candidates);&#xD;
&#xD;
     // Filter the candidates by temperature.&#xD;
     int i = 0;&#xD;
     while (i &lt; candidateTileTypes.size()) {&#xD;
         TileType type = candidateTileTypes.get(i);&#xD;
         if (!type.withinRange(TileType.RangeType.TEMPERATURE,&#xD;
                               localeTemperature)) {&#xD;
             candidateTileTypes.remove(i);&#xD;
             continue;&#xD;
         }&#xD;
         i++;&#xD;
     }&#xD;
&#xD;
     // Need to continue?&#xD;
     switch (candidateTileTypes.size()) {&#xD;
     case 0:&#xD;
         throw new RuntimeException(&quot;No TileType for&quot;&#xD;
             + &quot; temperature==&quot; + localeTemperature);&#xD;
     case 1:&#xD;
         return candidateTileTypes.get(0);&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
&#xD;
     // Filter the candidates by humidity.&#xD;
     i = 0;&#xD;
     while (i &lt; candidateTileTypes.size()) {&#xD;
         TileType type = candidateTileTypes.get(i);&#xD;
         if (!type.withinRange(TileType.RangeType.HUMIDITY,&#xD;
                               localeHumidity)) {&#xD;
             candidateTileTypes.remove(i);&#xD;
             continue;&#xD;
         }&#xD;
         i++;&#xD;
     }&#xD;
&#xD;
     // Need to continue?&#xD;
     switch (candidateTileTypes.size()) {&#xD;
     case 0:&#xD;
         throw new RuntimeException(&quot;No TileType for&quot;&#xD;
             + &quot; humidity==&quot; + localeHumidity);&#xD;
     case 1:&#xD;
         return candidateTileTypes.get(0);&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
&#xD;
     // Filter the candidates by forest presence.&#xD;
     boolean forested = randomInt(logger, &quot;Forest&quot;, random, 100) &lt; forestChance;&#xD;
     i = 0;&#xD;
     while (i &lt; candidateTileTypes.size()) {&#xD;
         TileType type = candidateTileTypes.get(i);&#xD;
         if (type.isForested() != forested) {&#xD;
             candidateTileTypes.remove(i);&#xD;
             continue;&#xD;
         }&#xD;
         i++;&#xD;
     }&#xD;
&#xD;
     // Done&#xD;
     switch (i = candidateTileTypes.size()) {&#xD;
     case 0:&#xD;
         throw new RuntimeException(&quot;No TileType for&quot;&#xD;
             + &quot; forested==&quot; + forested);&#xD;
     case 1:&#xD;
         return candidateTileTypes.get(0);&#xD;
     default:&#xD;
         return candidateTileTypes.get(randomInt(logger, &quot;Forest tile&quot;,&#xD;
                                                 random, i));&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGkyVJREeiyW7NaN4qWdw" name="createLandRegions" specification="_CXlnYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGkylJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGky1JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGkzFJREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYGkzVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Create &quot;explorable&quot; land regions&#xD;
     int continents = 0;&#xD;
     boolean[][] landmap = new boolean[map.getWidth()][map.getHeight()];&#xD;
     int[][] continentmap = new int[map.getWidth()][map.getHeight()];&#xD;
     int landsize = 0;&#xD;
&#xD;
     // Initialize both maps&#xD;
     for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
         for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
             continentmap[x][y] = 0;&#xD;
             landmap[x][y] = false;&#xD;
             if (map.isValid(x, y)) {&#xD;
                 Tile tile = map.getTile(x, y);&#xD;
                 // Exclude existing regions (arctic/antarctic, mountains,&#xD;
                 // rivers).&#xD;
                 landmap[x][y] = tile.isLand()&#xD;
                     &amp;&amp; tile.getRegion() == null;&#xD;
                 if (tile.isLand()) landsize++;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Flood fill, so that we end up with individual landmasses&#xD;
     // numbered in continentmap[][]&#xD;
     for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             if (landmap[x][y]) { // Found a new region.&#xD;
                 continents++;&#xD;
                 boolean[][] continent = Map.floodFill(landmap, x, y);&#xD;
&#xD;
                 for (int yy = 0; yy &lt; map.getHeight(); yy++) {&#xD;
                     for (int xx = 0; xx &lt; map.getWidth(); xx++) {&#xD;
                         if (continent[xx][yy]) {&#xD;
                             continentmap[xx][yy] = continents;&#xD;
                             landmap[xx][yy] = false;&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Number of individual landmasses is &quot;, continents, &quot;\n&quot;);&#xD;
&#xD;
     // Get landmass sizes&#xD;
     int[] continentsize = new int[continents+1];&#xD;
     for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             continentsize[continentmap[x][y]]++;&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Go through landmasses, split up those too big&#xD;
     int oldcontinents = continents;&#xD;
     for (int c = 1; c &lt;= oldcontinents; c++) {&#xD;
         // c starting at 1, c=0 is all excluded tiles&#xD;
         if (continentsize[c] > LAND_REGION_MAX_SIZE) {&#xD;
             boolean[][] splitcontinent&#xD;
                 = new boolean[map.getWidth()][map.getHeight()];&#xD;
             int splitX = 0, splitY = 0;&#xD;
&#xD;
             for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
                 for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
                     if (continentmap[x][y] == c) {&#xD;
                         splitcontinent[x][y] = true;&#xD;
                         splitX = x; splitY = y;&#xD;
                     } else {&#xD;
                         splitcontinent[x][y] = false;&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
&#xD;
             while (continentsize[c] > LAND_REGION_MAX_SIZE) {&#xD;
                 int targetsize = LAND_REGION_MAX_SIZE;&#xD;
                 if (continentsize[c] &lt; 2*LAND_REGION_MAX_SIZE) {&#xD;
                     targetsize = continentsize[c]/2;&#xD;
                 }&#xD;
                 continents++; //index of the new region in continentmap[][]&#xD;
                 boolean[][] newregion = Map.floodFill(splitcontinent,&#xD;
                     splitX, splitY, targetsize);&#xD;
                 for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
                     for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
                         if (newregion[x][y]) {&#xD;
                             continentmap[x][y] = continents;&#xD;
                             splitcontinent[x][y] = false;&#xD;
                             continentsize[c]--;&#xD;
                         }&#xD;
                         if (splitcontinent[x][y]) {&#xD;
                             splitX = x; splitY = y;&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Number of land regions being created: &quot;, continents, &quot;\n&quot;);&#xD;
&#xD;
     // Create ServerRegions for all land regions&#xD;
     ServerRegion[] landregions = new ServerRegion[continents+1];&#xD;
     int landIndex = 1;&#xD;
     for (int c = 1; c &lt;= continents; c++) {&#xD;
         // c starting at 1, c=0 is all water tiles&#xD;
         landregions[c] = new ServerRegion(game, RegionType.LAND);&#xD;
     }&#xD;
&#xD;
     // Add tiles to ServerRegions&#xD;
     for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             if (continentmap[x][y] > 0) {&#xD;
                 Tile tile = map.getTile(x, y);&#xD;
                 landregions[continentmap[x][y]].addTile(tile);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     for (int c = 1; c &lt;= continents; c++) {&#xD;
         ServerRegion sr = landregions[c];&#xD;
&#xD;
         // Set exploration points for land regions based on size&#xD;
         int score = Math.max((int)(((float)sr.getSize() / landsize)&#xD;
                                    * LAND_REGIONS_SCORE_VALUE),&#xD;
                              LAND_REGION_MIN_SCORE);&#xD;
         sr.setScoreValue(score);&#xD;
         lb.add(&quot;Created land region &quot;, sr.toString(),&#xD;
             &quot; (size &quot;, sr.getSize(),&#xD;
             &quot;, score &quot;, sr.getScoreValue(),&#xD;
             &quot;, parent &quot;, ((sr.getParent() == null) ? &quot;(null)&quot;&#xD;
                 : sr.getParent().toString()), &quot;)\n&quot;);&#xD;
     }&#xD;
     return Arrays.asList(Arrays.copyOfRange(landregions, 1, continents+1));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGkzlJREeiyW7NaN4qWdw" name="getGoodMountainTile" specification="_CXmOcFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGkz1JREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGk0FJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>final TileType hills = spec.getTileType(&quot;model.tile.hills&quot;);&#xD;
     final TileType mountains = spec.getTileType(&quot;model.tile.mountains&quot;);&#xD;
     Tile tile = null;&#xD;
     while ((tile = map.getRandomLandTile(random)) != null) {&#xD;
         // Can not be high ground already&#xD;
         if (tile.getType() != hills &amp;&amp; tile.getType() != mountains&#xD;
             &#xD;
             // Not too close to a mountain range as this would&#xD;
             // defeat the purpose of adding random hills&#xD;
             &amp;&amp; none(tile.getSurroundingTiles(1, 3), t -> t.getType() == mountains)&#xD;
&#xD;
             // Do not add hills too close to the ocean/lake, as&#xD;
             // this helps with good locations for building&#xD;
             // colonies on shore.&#xD;
             &amp;&amp; none(tile.getSurroundingTiles(1, 1), t -> !t.isLand())) {&#xD;
             return tile;&#xD;
         }&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGk0VJREeiyW7NaN4qWdw" name="createMountains" specification="_CXmOc1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGk0lJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGk01JREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGk1FJREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYGk1VJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;ServerRegion> result = new ArrayList&lt;>();&#xD;
     float randomHillsRatio = 0.5f;&#xD;
     // 50% of user settings will be allocated for random hills&#xD;
     // here and there the rest will be allocated for large&#xD;
     // mountain ranges&#xD;
     int maximumLength&#xD;
         = Math.max(mapOptions.getInteger(MapGeneratorOptions.MAP_WIDTH),&#xD;
             mapOptions.getInteger(MapGeneratorOptions.MAP_HEIGHT)) / 10;&#xD;
     int number = (int)((1.0f - randomHillsRatio)&#xD;
         * (getApproximateLandCount()&#xD;
             / mapOptions.getInteger(MapGeneratorOptions.MOUNTAIN_NUMBER)));&#xD;
     lb.add(&quot;Number of mountain tiles is &quot;, number, &quot;\n&quot;,&#xD;
         &quot;Maximum length of mountain ranges is &quot;, maximumLength, &quot;\n&quot;);&#xD;
&#xD;
     // lookup the resources from specification&#xD;
     final TileType hills = spec.getTileType(&quot;model.tile.hills&quot;);&#xD;
     final TileType mountains = spec.getTileType(&quot;model.tile.mountains&quot;);&#xD;
     if (hills == null || mountains == null) {&#xD;
         throw new RuntimeException(&quot;Both Hills and Mountains TileTypes must be defined&quot;);&#xD;
     }&#xD;
&#xD;
     // Generate the mountain ranges&#xD;
     int counter = 0;&#xD;
     for (int tries = 0; tries &lt; 100; tries++) {&#xD;
         Tile startTile = getGoodMountainTile(map);&#xD;
         if (startTile == null) break;&#xD;
&#xD;
         ServerRegion mountainRegion&#xD;
             = new ServerRegion(game, RegionType.MOUNTAIN);&#xD;
         startTile.setType(mountains);&#xD;
         mountainRegion.addTile(startTile);&#xD;
         Direction direction = Direction.getRandomDirection(&quot;getLand&quot;,&#xD;
             logger, random);&#xD;
         int length = maximumLength&#xD;
             - randomInt(logger, &quot;MLen&quot;, random, maximumLength/2);&#xD;
         for (int index = 0; index &lt; length; index++) {&#xD;
             Tile nextTile = startTile.getNeighbourOrNull(direction);&#xD;
             if (nextTile == null || !nextTile.isLand()) continue;&#xD;
             nextTile.setType(mountains);&#xD;
             mountainRegion.addTile(nextTile);&#xD;
             counter++;&#xD;
             for (Tile neighbour : nextTile.getSurroundingTiles(1)) {&#xD;
                 if (!neighbour.isLand()&#xD;
                     || neighbour.getType() == mountains) continue;&#xD;
                 int r = randomInt(logger, &quot;MSiz&quot;, random, 8);&#xD;
                 if (r == 0) {&#xD;
                     neighbour.setType(mountains);&#xD;
                     mountainRegion.addTile(neighbour);&#xD;
                     counter++;&#xD;
                 } else if (r > 2) {&#xD;
                     neighbour.setType(hills);&#xD;
                     mountainRegion.addTile(neighbour);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         int scoreValue = 2 * mountainRegion.getSize();&#xD;
         mountainRegion.setScoreValue(scoreValue);&#xD;
         result.add(mountainRegion);&#xD;
         lb.add(&quot;Created mountain region (direction &quot;, direction,&#xD;
             &quot;, length &quot;, length,&#xD;
             &quot;, size &quot;, mountainRegion.getSize(),&#xD;
             &quot;, score value &quot;, scoreValue, &quot;).\n&quot;);&#xD;
         if (counter >= number) break;&#xD;
     }&#xD;
     lb.add(&quot;Added &quot;, counter, &quot; mountain range tiles.\n&quot;);&#xD;
&#xD;
     // and sprinkle a few random hills/mountains here and there&#xD;
     number = (int) (getApproximateLandCount() * randomHillsRatio)&#xD;
         / mapOptions.getInteger(MapGeneratorOptions.MOUNTAIN_NUMBER);&#xD;
     counter = 0;&#xD;
     for (int tries = 0; tries &lt; 1000; tries++) {&#xD;
         Tile t = getGoodMountainTile(map);&#xD;
         if (t == null) break;&#xD;
&#xD;
         // 25% mountains, 75% hills&#xD;
         boolean m = randomInt(logger, &quot;MorH&quot;, random, 4) == 0;&#xD;
         t.setType((m) ? mountains : hills);&#xD;
         if (++counter >= number) break;&#xD;
     }&#xD;
     lb.add(&quot;Added &quot;, counter, &quot; random hilly tiles.\n&quot;);&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYGk1lJREeiyW7NaN4qWdw" name="createRivers" specification="_CXm1gFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYGk11JREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGk2FJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYGk2VJREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYGk2lJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;ServerRegion> result = new ArrayList&lt;>();&#xD;
     final TileImprovementType riverType&#xD;
         = spec.getTileImprovementType(&quot;model.improvement.river&quot;);&#xD;
     final int number = getApproximateLandCount()&#xD;
         / mapOptions.getInteger(MapGeneratorOptions.RIVER_NUMBER);&#xD;
     int counter = 0;&#xD;
     HashMap&lt;Tile, River> riverMap = new HashMap&lt;>();&#xD;
     List&lt;River> rivers = new ArrayList&lt;>();&#xD;
&#xD;
     outer: for (int i = 0; i &lt; number; i++) {&#xD;
         for (int tries = 0; tries &lt; 100; tries++) {&#xD;
             Tile tile = map.getRandomLandTile(random);&#xD;
             if (tile == null) break outer;&#xD;
&#xD;
             if (!riverType.isTileTypeAllowed(tile.getType())) continue;&#xD;
&#xD;
             // check the river source/spring is not too close to the ocean&#xD;
             if (!all(tile.getSurroundingTiles(1, 2),&#xD;
                     Tile::isLand)) continue;&#xD;
&#xD;
             if (riverMap.get(tile) == null) {&#xD;
                 // no river here yet&#xD;
                 ServerRegion riverRegion = new ServerRegion(game, RegionType.RIVER);&#xD;
                 River river = new River(map, riverMap, riverRegion, random);&#xD;
                 if (river.flowFromSource(tile)) {&#xD;
                     lb.add(&quot;Created new river with length &quot;,&#xD;
                         river.getLength(), &quot;\n&quot;);&#xD;
                     result.add(riverRegion);&#xD;
                     rivers.add(river);&#xD;
                     if (++counter >= number) break;&#xD;
                 } else {&#xD;
                     lb.add(&quot;Failed to generate river.\n&quot;);&#xD;
                 }&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;Created &quot;, counter, &quot; rivers of maximum &quot;, number, &quot;\n&quot;);&#xD;
&#xD;
     for (River river : rivers) {&#xD;
         ServerRegion region = river.getRegion();&#xD;
         int scoreValue = 2 * river.getSections().stream()&#xD;
             .mapToInt(rs -> rs.getSize()).sum();&#xD;
         region.setScoreValue(scoreValue);&#xD;
         lb.add(&quot;Created river region (length &quot;, river.getLength(),&#xD;
             &quot;, score value &quot;, scoreValue, &quot;).\n&quot;);&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL0FJREeiyW7NaN4qWdw" name="createLakeRegions" specification="_CXnckFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL0VJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL0lJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL01JREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYHL1FJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final TileType lakeType = spec.getTileType(&quot;model.tile.lake&quot;);&#xD;
&#xD;
     // Create the water map, and find any tiles that are water but&#xD;
     // not part of any region (such as the oceans).  These are&#xD;
     // lake tiles.&#xD;
     List&lt;Tile> lakes = new ArrayList&lt;>();&#xD;
     lb.add(&quot;Lakes at:&quot;);&#xD;
     for (int y = 0; y &lt; map.getHeight(); y++) {&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             Tile tile;&#xD;
             if (map.isValid(x, y)&#xD;
                 &amp;&amp; !(tile = map.getTile(x, y)).isLand()&#xD;
                 &amp;&amp; map.getTile(x, y).getRegion() == null) {&#xD;
                 lakes.add(tile);&#xD;
                 lb.add(&quot; &quot;, x, &quot;,&quot;, y);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.add(&quot;\n&quot;);&#xD;
     &#xD;
     return makeLakes(map, lakes);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL1VJREeiyW7NaN4qWdw" name="makeLakes" specification="_CXoDoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL1lJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL11JREeiyW7NaN4qWdw" name="lakes" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL2FJREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CYHL2VJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Game game = map.getGame();&#xD;
     final TileType lakeType = map.getSpecification()&#xD;
         .getTileType(&quot;model.tile.lake&quot;);&#xD;
     List&lt;Tile> todo = new ArrayList&lt;>();&#xD;
     List&lt;ServerRegion> result = new ArrayList&lt;>();&#xD;
     int lakeCount = 0;&#xD;
     while (!lakes.isEmpty()) {&#xD;
         Tile tile = lakes.get(0);&#xD;
         if (tile.getRegion() != null) continue;&#xD;
&#xD;
         ServerRegion lakeRegion = new ServerRegion(game, RegionType.LAKE);&#xD;
         // Pretend lakes are discovered with the surrounding terrain?&#xD;
         todo.clear();&#xD;
         todo.add(tile);&#xD;
         while (!todo.isEmpty()) {&#xD;
             Tile t = todo.remove(0);&#xD;
             if (lakes.contains(t)) {&#xD;
                 t.setRegion(lakeRegion);&#xD;
                 t.setType(lakeType);&#xD;
                 lakes.remove(t);&#xD;
                 // It would be better to do:&#xD;
                 //   todo.addAll(t.getSurroundingTiles(1, 1));&#xD;
                 // but this routine can be called from Map.readChildren&#xD;
                 // before game.getMap() works.  When that use goes away,&#xD;
                 // use the above code.&#xD;
                 for (Direction d : Direction.allDirections) {&#xD;
                     Tile t0 = map.getAdjacentTile(t, d);&#xD;
                     if (t0 != null) todo.add(t0);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         result.add(lakeRegion);&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL2lJREeiyW7NaN4qWdw" name="perhapsAddBonus" specification="_CXoqsVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL21JREeiyW7NaN4qWdw" name="t" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL3FJREeiyW7NaN4qWdw" name="generateBonus">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Specification spec = t.getSpecification();&#xD;
     TileImprovementType fishBonusLandType&#xD;
         = spec.getTileImprovementType(&quot;model.improvement.fishBonusLand&quot;);&#xD;
     TileImprovementType fishBonusRiverType&#xD;
         = spec.getTileImprovementType(&quot;model.improvement.fishBonusRiver&quot;);&#xD;
     final int bonusNumber&#xD;
         = mapOptions.getInteger(MapGeneratorOptions.BONUS_NUMBER);&#xD;
     if (t.isLand()) {&#xD;
         if (generateBonus&#xD;
             &amp;&amp; randomInt(logger, &quot;Land Resource&quot;, random, 100) &lt; bonusNumber) {&#xD;
             // Create random Bonus Resource&#xD;
             t.addResource(createResource(t));&#xD;
         }&#xD;
     } else {&#xD;
         int adjacentLand = 0;&#xD;
         boolean adjacentRiver = false;&#xD;
         for (Direction direction : Direction.values()) {&#xD;
             Tile otherTile = t.getNeighbourOrNull(direction);&#xD;
             if (otherTile != null &amp;&amp; otherTile.isLand()) {&#xD;
                 adjacentLand++;&#xD;
                 if (otherTile.hasRiver()) {&#xD;
                     adjacentRiver = true;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // In Col1, ocean tiles with less than 3 land neighbours&#xD;
         // produce 2 fish, all others produce 4 fish&#xD;
         if (adjacentLand > 2) {&#xD;
             t.add(new TileImprovement(game, t, fishBonusLandType));&#xD;
         }&#xD;
&#xD;
         // In Col1, the ocean tile in front of a river mouth would&#xD;
         // get an additional +1 bonus&#xD;
         // FIXME: This probably has some false positives, means&#xD;
         // river tiles that are NOT a river mouth next to this tile!&#xD;
         if (!t.hasRiver() &amp;&amp; adjacentRiver) {&#xD;
             t.add(new TileImprovement(game, t, fishBonusRiverType));&#xD;
         }&#xD;
&#xD;
         if (t.getType().isHighSeasConnected()) {&#xD;
             if (generateBonus &amp;&amp; adjacentLand > 1&#xD;
                 &amp;&amp; randomInt(logger, &quot;Sea resource&quot;, random,&#xD;
                              10 - adjacentLand) == 0) {&#xD;
                 t.addResource(createResource(t));&#xD;
             }&#xD;
         } else {&#xD;
             if (randomInt(logger, &quot;Water resource&quot;, random, 100) &lt; bonusNumber) {&#xD;
                 // Create random Bonus Resource&#xD;
                 t.addResource(createResource(t));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL3VJREeiyW7NaN4qWdw" name="createResource" specification="_CXpRwlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL3lJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL31JREeiyW7NaN4qWdw" type="_CW6R8VJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>if (tile == null) return null;&#xD;
     ResourceType resourceType = RandomChoice.getWeightedRandom(null, null,&#xD;
         tile.getType().getWeightedResources(), random);&#xD;
     if (resourceType == null) return null;&#xD;
     int minValue = resourceType.getMinValue();&#xD;
     int maxValue = resourceType.getMaxValue();&#xD;
     int quantity = (minValue == maxValue) ? maxValue&#xD;
         : (minValue + randomInt(logger, &quot;Rsiz&quot;, random, &#xD;
                                 maxValue - minValue + 1));&#xD;
     return new Resource(game, tile, resourceType, quantity);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL4FJREeiyW7NaN4qWdw" name="encodeStyle" specification="_CXpRxVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL4VJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>EnumMap&lt;Direction, Boolean> connections&#xD;
         = new EnumMap&lt;>(Direction.class);&#xD;
&#xD;
     // corners&#xD;
     for (Direction d : Direction.corners) {&#xD;
         Tile t = tile.getNeighbourOrNull(d);&#xD;
         connections.put(d, t != null &amp;&amp; t.isLand());&#xD;
     }&#xD;
     // edges&#xD;
     for (Direction d : Direction.longSides) {&#xD;
         Tile t = tile.getNeighbourOrNull(d);&#xD;
         if (t != null &amp;&amp; t.isLand()) {&#xD;
             connections.put(d, Boolean.TRUE);&#xD;
             // ignore adjacent corners&#xD;
             connections.put(d.getNextDirection(), Boolean.FALSE);&#xD;
             connections.put(d.getPreviousDirection(), Boolean.FALSE);&#xD;
         } else {&#xD;
             connections.put(d, Boolean.FALSE);&#xD;
         }&#xD;
     }&#xD;
     int result = 0;&#xD;
     int index = 0;&#xD;
     for (Direction d : Direction.corners) {&#xD;
         if (connections.get(d)) result += (int)Math.pow(2, index);&#xD;
         index++;&#xD;
     }&#xD;
     for (Direction d : Direction.longSides) {&#xD;
         if (connections.get(d)) result += (int)Math.pow(2, index);&#xD;
         index++;&#xD;
     }&#xD;
     tile.setStyle(result);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CYHL4lJREeiyW7NaN4qWdw" name="createMap" specification="_CXp40FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CYHL41JREeiyW7NaN4qWdw" name="landMap" type="_CV3wIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL5FJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CYHL5VJREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>final int width = landMap.getWidth();&#xD;
     final int height = landMap.getHeight();&#xD;
     final boolean importTerrain = (importGame != null)&#xD;
         &amp;&amp; mapOptions.getBoolean(MapGeneratorOptions.IMPORT_TERRAIN);&#xD;
     final boolean importBonuses = (importGame != null)&#xD;
         &amp;&amp; mapOptions.getBoolean(MapGeneratorOptions.IMPORT_BONUSES);&#xD;
&#xD;
     boolean mapHasLand = false;&#xD;
     Map map = new Map(game, width, height);&#xD;
     int minimumLatitude = mapOptions&#xD;
         .getInteger(MapGeneratorOptions.MINIMUM_LATITUDE);&#xD;
     int maximumLatitude = mapOptions&#xD;
         .getInteger(MapGeneratorOptions.MAXIMUM_LATITUDE);&#xD;
     // make sure the values are in range&#xD;
     minimumLatitude = limitToRange(minimumLatitude, -90, 90);&#xD;
     maximumLatitude = limitToRange(maximumLatitude, -90, 90);&#xD;
     map.setMinimumLatitude(Math.min(minimumLatitude, maximumLatitude));&#xD;
     map.setMaximumLatitude(Math.max(minimumLatitude, maximumLatitude));&#xD;
&#xD;
     java.util.Map&lt;String, ServerRegion> regionMap = new HashMap&lt;>();&#xD;
     if (importTerrain) { // Import the regions&#xD;
         lb.add(&quot;Imported regions: &quot;);&#xD;
         for (Region r : importGame.getMap().getRegions()) {&#xD;
             ServerRegion region = new ServerRegion(game, r);&#xD;
             map.addRegion(region);&#xD;
             regionMap.put(r.getId(), region);&#xD;
             lb.add(&quot; &quot;, region.toString());&#xD;
         }&#xD;
         for (Region r : importGame.getMap().getRegions()) {&#xD;
             ServerRegion region = regionMap.get(r.getId());&#xD;
             Region x = r.getParent();&#xD;
             if (x != null) x = regionMap.get(x.getId());&#xD;
             region.setParent(x);&#xD;
             for (Region c : r.getChildren()) {&#xD;
                 x = regionMap.get(c.getId());&#xD;
                 if (x != null) region.addChild(x);&#xD;
             }&#xD;
         }&#xD;
         lb.add(&quot;\n&quot;);&#xD;
     }&#xD;
&#xD;
     List&lt;Tile> fixRegions = new ArrayList&lt;>();&#xD;
     for (int y = 0; y &lt; height; y++) {&#xD;
         int latitude = map.getLatitude(y);&#xD;
         for (int x = 0; x &lt; width; x++) {&#xD;
             if (landMap.isLand(x, y)) mapHasLand = true;&#xD;
             Tile t, importTile = null;&#xD;
             if (importTerrain&#xD;
                 &amp;&amp; importGame.getMap().isValid(x, y)&#xD;
                 &amp;&amp; (importTile = importGame.getMap().getTile(x, y)) != null&#xD;
                 &amp;&amp; importTile.isLand() == landMap.isLand(x, y)) {&#xD;
                 String id = importTile.getType().getId();&#xD;
                 t = new Tile(game, spec.getTileType(id), x, y);&#xD;
                 if (importTile.getMoveToEurope() != null) {&#xD;
                     t.setMoveToEurope(importTile.getMoveToEurope());&#xD;
                 }&#xD;
                 if (importTile.getTileItemContainer() != null) {&#xD;
                     TileItemContainer container&#xD;
                         = new TileItemContainer(game, t);&#xD;
                     // TileItemContainer copies every natural item&#xD;
                     // including Resource unless importBonuses ==&#xD;
                     // false Rumors and roads are not copied&#xD;
                     container.copyFrom(importTile.getTileItemContainer(),&#xD;
                         importBonuses, true);&#xD;
                     t.setTileItemContainer(container);&#xD;
                 }&#xD;
                 Region r = importTile.getRegion();&#xD;
                 if (r == null) {&#xD;
                     fixRegions.add(t);&#xD;
                 } else {&#xD;
                     ServerRegion ours = regionMap.get(r.getId());&#xD;
                     if (ours == null) {&#xD;
                         lb.add(&quot;Could not set tile region &quot;, r.getId(),&#xD;
                             &quot; for tile: &quot;, t, &quot;\n&quot;);&#xD;
                         fixRegions.add(t);&#xD;
                     } else {&#xD;
                         ours.addTile(t);&#xD;
                     }&#xD;
                 }&#xD;
             } else {&#xD;
                 t = createTile(x, y, landMap, latitude);&#xD;
             }&#xD;
             map.setTile(t, x, y);&#xD;
         }&#xD;
     }&#xD;
     game.setMap(map);&#xD;
&#xD;
     // Build the regions.&#xD;
     List&lt;ServerRegion> fixed = ServerRegion.requireFixedRegions(map, lb);&#xD;
     List&lt;ServerRegion> newRegions = new ArrayList&lt;>();&#xD;
     if (importTerrain) {&#xD;
         if (!fixRegions.isEmpty()) { // Fix the tiles missing regions.&#xD;
             newRegions.addAll(createLakeRegions(map, lb));&#xD;
             newRegions.addAll(createLandRegions(map, lb));&#xD;
         }&#xD;
     } else {&#xD;
         map.resetHighSeas(&#xD;
             mapOptions.getInteger(MapGeneratorOptions.DISTANCE_TO_HIGH_SEA),&#xD;
             mapOptions.getInteger(MapGeneratorOptions.MAXIMUM_DISTANCE_TO_EDGE));&#xD;
         if (mapHasLand) {&#xD;
             newRegions.addAll(createMountains(map, lb));&#xD;
             newRegions.addAll(createRivers(map, lb));&#xD;
             newRegions.addAll(createLakeRegions(map, lb));&#xD;
             newRegions.addAll(createLandRegions(map, lb));&#xD;
         }&#xD;
     }&#xD;
     lb.shrink(&quot;\n&quot;);&#xD;
&#xD;
     // Connect all new regions to their geographic parent and add to&#xD;
     // the map.&#xD;
     List&lt;ServerRegion> geographic = new ArrayList&lt;>();&#xD;
     for (ServerRegion sr : fixed) {&#xD;
         if (sr.isGeographic()) geographic.add(sr);&#xD;
     }&#xD;
     for (ServerRegion sr : newRegions) {&#xD;
         for (ServerRegion gr : geographic) {&#xD;
             if (gr.containsCenter(sr)) {&#xD;
                 sr.setParent(gr);&#xD;
                 gr.addChild(sr);&#xD;
                 gr.setSize(gr.getSize() + sr.getSize());&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         map.addRegion(sr);&#xD;
     }&#xD;
&#xD;
     // Probably only needed on import of old maps.&#xD;
     map.fixupRegions();&#xD;
&#xD;
     // Add the bonuses only after the map is completed.&#xD;
     // Otherwise we risk creating resources on fields where they&#xD;
     // do not belong (like sugar in large rivers or tobacco on hills).&#xD;
     for (Tile tile : map.getAllTiles()) {&#xD;
         perhapsAddBonus(tile, !importBonuses);&#xD;
         if (!tile.isLand()) {&#xD;
             encodeStyle(tile);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Final cleanups&#xD;
     map.resetContiguity();&#xD;
     map.resetHighSeasCount();&#xD;
     return map;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_CJ0RIFJREeiyW7NaN4qWdw" name="limitToRange" visibility="private" method="_CYF9tVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_CJ0RIVJREeiyW7NaN4qWdw" name="value">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CJ0RIlJREeiyW7NaN4qWdw" name="lower">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CJ0RI1JREeiyW7NaN4qWdw" name="upper">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CJ0RJFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CJ04MFJREeiyW7NaN4qWdw" name="getApproximateLandCount" visibility="private" method="_CYF9ulJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoElJREeiyW7NaN4qWdw">
                    <body>Gets the approximate number of land tiles.&#xD;
     *&#xD;
     * @return The approximate number of land tiles</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJ04MVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CJ04MlJREeiyW7NaN4qWdw" name="getRandomLandTileType" visibility="private" method="_CYF9wlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoFFJREeiyW7NaN4qWdw">
                    <body>Gets a random land tile type based on the latitude.&#xD;
     *&#xD;
     * @param latitude The location of the tile relative to the north/south&#xD;
     *     poles and equator:&#xD;
     *     0 is the mid-section of the map (equator)&#xD;
     *     +/-90 is on the bottom/top of the map (poles).&#xD;
     * @return A suitable random land tile type.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJ1fQFJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXkZQVJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CJ1fQVJREeiyW7NaN4qWdw" name="getRandomOceanTileType" visibility="private" method="_CYGkwlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoFVJREeiyW7NaN4qWdw">
                    <body>Gets a random ocean tile type.&#xD;
     *&#xD;
     * @param latitude The latitude of the proposed tile.&#xD;
     * @return A suitable random ocean tile type.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CJ1fQlJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXkZQlJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXjLIFJREeiyW7NaN4qWdw" name="TerrainGenerator" method="_CYF9sFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_CXjLJFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_CXjLJVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_CYJoEVJREeiyW7NaN4qWdw">
                    <body>Creates a new &lt;code>TerrainGenerator&lt;/code>.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> to generate for.&#xD;
     * @param importGame A &lt;code>Game&lt;/code> to selectively import from.&#xD;
     * @param random A &lt;code>Random&lt;/code> number source.&#xD;
     * @see #createMap</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXjLIVJREeiyW7NaN4qWdw" name="game" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXjLIlJREeiyW7NaN4qWdw" name="importGame" type="_CVQsI1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXjLI1JREeiyW7NaN4qWdw" name="random" type="_CVeHgVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXjLJlJREeiyW7NaN4qWdw" type="_CJyb8FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXjyMFJREeiyW7NaN4qWdw" name="createTile" visibility="private" method="_CYF9vFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoE1JREeiyW7NaN4qWdw">
                    <body>Creates a random tile for the specified position.&#xD;
     *&#xD;
     * @param x The tile x coordinate.&#xD;
     * @param y The tile y coordinate.&#xD;
     * @param landMap A boolean array defining where the land is.&#xD;
     * @param latitude The tile latitude.&#xD;
     * @return The created tile.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXjyMVJREeiyW7NaN4qWdw" name="x">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXjyMlJREeiyW7NaN4qWdw" name="y">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXjyM1JREeiyW7NaN4qWdw" name="landMap" type="_CV3wIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXjyNFJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXkZQFJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXkZQ1JREeiyW7NaN4qWdw" name="getRandomTileType" visibility="private" method="_CYGkxVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoFlJREeiyW7NaN4qWdw">
                    <body>Gets a tile type fitted to the regional requirements.&#xD;
     *&#xD;
     * FIXME: Can be used for mountains and rivers too.&#xD;
     *&#xD;
     * @param candidates A list of &lt;code>TileType&lt;/code>s to use for&#xD;
     *     calculations.&#xD;
     * @param latitude The tile latitude.&#xD;
     * @return A suitable &lt;code>TileType&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXkZRFJREeiyW7NaN4qWdw" name="candidates" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXkZRVJREeiyW7NaN4qWdw" name="latitude">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_CXkZRlJREeiyW7NaN4qWdw" type="_CVTIYVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXlnYFJREeiyW7NaN4qWdw" name="createLandRegions" visibility="private" method="_CYGkyVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoF1JREeiyW7NaN4qWdw">
                    <body>Creates land map regions in the given Map.&#xD;
     *&#xD;
     * First, the arctic/antarctic regions are defined, based on&#xD;
     * &lt;code>Map.POLAR_HEIGHT&lt;/code>.&#xD;
     *&#xD;
     * For the remaining land tiles, one region per contiguous&#xD;
     * landmass is created.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to work on.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return A list of created &lt;code>ServerRegion&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXlnYVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXlnYlJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXlnY1JREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXlnZFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXmOcFJREeiyW7NaN4qWdw" name="getGoodMountainTile" visibility="private" method="_CYGkzlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoGFJREeiyW7NaN4qWdw">
                    <body>Pick a good tile to put elevated terrain on.&#xD;
     *&#xD;
     * @param map A &lt;code>Map&lt;/code> to choose from.&#xD;
     * @return A suitable &lt;code>Tile&lt;/code>, or null if none found.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXmOcVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXmOclJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXmOc1JREeiyW7NaN4qWdw" name="createMountains" visibility="private" method="_CYGk0VJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoGVJREeiyW7NaN4qWdw">
                    <body>Creates mountain ranges on the given map.  The number and size&#xD;
     * of mountain ranges depends on the map size.&#xD;
     *&#xD;
     * @param map The map to use.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return A list of created &lt;code>ServerRegion&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXmOdFJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXmOdVJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXmOdlJREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXmOd1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXm1gFJREeiyW7NaN4qWdw" name="createRivers" visibility="private" method="_CYGk1lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoGlJREeiyW7NaN4qWdw">
                    <body>Creates rivers on the given map. The number of rivers depends&#xD;
     * on the map size.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to create rivers on.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return A list of created &lt;code>ServerRegion&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXm1gVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXm1glJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXm1g1JREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXm1hFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXnckFJREeiyW7NaN4qWdw" name="createLakeRegions" visibility="private" method="_CYHL0FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoG1JREeiyW7NaN4qWdw">
                    <body>Finds all the lake regions.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to work on.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return A list of created &lt;code>ServerRegion&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXnckVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXncklJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXnck1JREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXnclFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXoDoFJREeiyW7NaN4qWdw" name="makeLakes" isStatic="true" method="_CYHL1VJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYJoHFJREeiyW7NaN4qWdw">
                    <body>Make lake regions from unassigned lake tiles.&#xD;
     *&#xD;
     * // @compat 0.10.x&#xD;
     * // Public/static to allow Map to remediate missing lake regions&#xD;
     * // end @compat 0.10.x&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to add to.&#xD;
     * @param lakes A list of lake &lt;code>Tile&lt;/code>s.&#xD;
     * @return A list of new &lt;code>ServerRegion&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXoDoVJREeiyW7NaN4qWdw" name="map" type="_CVWyw1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXoDolJREeiyW7NaN4qWdw" name="lakes" type="_CVdgcVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXoDo1JREeiyW7NaN4qWdw" type="_CVZ2E1JREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_CXoDpFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXoqsVJREeiyW7NaN4qWdw" name="perhapsAddBonus" visibility="private" method="_CYHL2lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYKPIFJREeiyW7NaN4qWdw">
                    <body>Adds a terrain bonus with a probability determined by the&#xD;
     * &lt;code>MapGeneratorOptions&lt;/code>.&#xD;
     *&#xD;
     * @param t The &lt;code>Tile&lt;/code> to add bonuses to.&#xD;
     * @param generateBonus Generate the bonus or not.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXpRwFJREeiyW7NaN4qWdw" name="t" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXpRwVJREeiyW7NaN4qWdw" name="generateBonus">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_CXpRwlJREeiyW7NaN4qWdw" name="createResource" visibility="private" method="_CYHL3VJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYKPIVJREeiyW7NaN4qWdw">
                    <body>Create a random resource on a tile.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to create the resource on.&#xD;
     * @return The created resource, or null if it is not possible.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXpRw1JREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXpRxFJREeiyW7NaN4qWdw" type="_CW6R8VJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXpRxVJREeiyW7NaN4qWdw" name="encodeStyle" isStatic="true" method="_CYHL4FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYKPIlJREeiyW7NaN4qWdw">
                    <body>Sets the style of the tiles.&#xD;
     * Only relevant to water tiles for now.&#xD;
     * Public because it is used in the river generator.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to set the style of.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXpRxlJREeiyW7NaN4qWdw" name="tile" type="_CVRTMVJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_CXp40FJREeiyW7NaN4qWdw" name="createMap" method="_CYHL4lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_CYKPI1JREeiyW7NaN4qWdw">
                    <body>Creates a &lt;code>Map&lt;/code>.&#xD;
     *&#xD;
     * @param landMap The &lt;code>LandMap&lt;/code> to use as a template.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @return The new &lt;code>Map&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_CXp40VJREeiyW7NaN4qWdw" name="landMap" type="_CV3wIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXp40lJREeiyW7NaN4qWdw" name="lb" type="_CVbrQFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_CXp401JREeiyW7NaN4qWdw" type="_CVWyw1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYNScFJREeiyW7NaN4qWdw" name="" memberEnd="_CYNScVJREeiyW7NaN4qWdw _CXuxUlJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYNScVJREeiyW7NaN4qWdw" name="" type="_CJJiwFJREeiyW7NaN4qWdw" association="_CYNScFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYN5gVJREeiyW7NaN4qWdw" name="" memberEnd="_CYN5glJREeiyW7NaN4qWdw _CXvYYVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYN5glJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYN5gVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYOgkFJREeiyW7NaN4qWdw" name="" memberEnd="_CYOgkVJREeiyW7NaN4qWdw _CXvYY1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYOgkVJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYOgkFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYOgk1JREeiyW7NaN4qWdw" name="" memberEnd="_CYOglFJREeiyW7NaN4qWdw _CXv_cVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYOglFJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYOgk1JREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYOgllJREeiyW7NaN4qWdw" name="" memberEnd="_CYOgl1JREeiyW7NaN4qWdw _CXwmgFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYOgl1JREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYOgllJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYPHoVJREeiyW7NaN4qWdw" name="" memberEnd="_CYPHolJREeiyW7NaN4qWdw _CXxNkVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYPHolJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYPHoVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYPHpFJREeiyW7NaN4qWdw" name="" memberEnd="_CYPHpVJREeiyW7NaN4qWdw _CXxNk1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYPHpVJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYPHpFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYPusVJREeiyW7NaN4qWdw" name="" memberEnd="_CYPuslJREeiyW7NaN4qWdw _CXx0oVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYPuslJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYPusVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYPutFJREeiyW7NaN4qWdw" name="" memberEnd="_CYPutVJREeiyW7NaN4qWdw _CXx0pFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYPutVJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYPutFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYQVwVJREeiyW7NaN4qWdw" name="" memberEnd="_CYQVwlJREeiyW7NaN4qWdw _CXybsFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYQVwlJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYQVwVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYQVxFJREeiyW7NaN4qWdw" name="" memberEnd="_CYQVxVJREeiyW7NaN4qWdw _CXybslJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYQVxVJREeiyW7NaN4qWdw" name="" type="_CJQQcFJREeiyW7NaN4qWdw" association="_CYQVxFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYQ80VJREeiyW7NaN4qWdw" name="" memberEnd="_CYQ80lJREeiyW7NaN4qWdw _CX0Q5FJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYQ80lJREeiyW7NaN4qWdw" name="" type="_CJfhAFJREeiyW7NaN4qWdw" association="_CYQ80VJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYQ81FJREeiyW7NaN4qWdw" name="" memberEnd="_CYQ81VJREeiyW7NaN4qWdw _CX2GEVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYQ81VJREeiyW7NaN4qWdw" name="" type="_CJfhAFJREeiyW7NaN4qWdw" association="_CYQ81FJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYRj4FJREeiyW7NaN4qWdw" name="" memberEnd="_CYRj4VJREeiyW7NaN4qWdw _CX2tIFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYRj4VJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYRj4FJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYRj41JREeiyW7NaN4qWdw" name="" memberEnd="_CYRj5FJREeiyW7NaN4qWdw _CX3UMVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYRj5FJREeiyW7NaN4qWdw" name="" type="_CJkZgFJREeiyW7NaN4qWdw" association="_CYRj41JREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYRj5lJREeiyW7NaN4qWdw" name="" memberEnd="_CYRj51JREeiyW7NaN4qWdw _CX3UM1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYRj51JREeiyW7NaN4qWdw" name="" type="_CJkZgFJREeiyW7NaN4qWdw" association="_CYRj5lJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYSK8VJREeiyW7NaN4qWdw" name="" memberEnd="_CYSK8lJREeiyW7NaN4qWdw _CX37QVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYSK8lJREeiyW7NaN4qWdw" name="" type="_CJkZgFJREeiyW7NaN4qWdw" association="_CYSK8VJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYSK9FJREeiyW7NaN4qWdw" name="" memberEnd="_CYSK9VJREeiyW7NaN4qWdw _CX4iUVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYSK9VJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYSK9FJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYSyAVJREeiyW7NaN4qWdw" name="" memberEnd="_CYSyAlJREeiyW7NaN4qWdw _CX4iU1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYSyAlJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYSyAVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYSyBFJREeiyW7NaN4qWdw" name="" memberEnd="_CYSyBVJREeiyW7NaN4qWdw _CX5JYFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYSyBVJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYSyBFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYTZEVJREeiyW7NaN4qWdw" name="" memberEnd="_CYTZElJREeiyW7NaN4qWdw _CX5JYlJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYTZElJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYTZEVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYTZFFJREeiyW7NaN4qWdw" name="" memberEnd="_CYTZFVJREeiyW7NaN4qWdw _CX5wcVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYTZFVJREeiyW7NaN4qWdw" name="" type="_CJjLYFJREeiyW7NaN4qWdw" association="_CYTZFFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYUAIVJREeiyW7NaN4qWdw" name="" memberEnd="_CYUAIlJREeiyW7NaN4qWdw _CX6-kFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYUAIlJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYUAIVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYUAJFJREeiyW7NaN4qWdw" name="" memberEnd="_CYUAJVJREeiyW7NaN4qWdw _CX7lolJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYUAJVJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYUAJFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYUnMVJREeiyW7NaN4qWdw" name="" memberEnd="_CYUnMlJREeiyW7NaN4qWdw _CX7lpFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYUnMlJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYUnMVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYVOQVJREeiyW7NaN4qWdw" name="" memberEnd="_CYVOQlJREeiyW7NaN4qWdw _CX8MsVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYVOQlJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYVOQVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYVORFJREeiyW7NaN4qWdw" name="" memberEnd="_CYVORVJREeiyW7NaN4qWdw _CX8zwFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYVORVJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYVORFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYV1UVJREeiyW7NaN4qWdw" name="" memberEnd="_CYV1UlJREeiyW7NaN4qWdw _CX8zwlJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYV1UlJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYV1UVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYV1VFJREeiyW7NaN4qWdw" name="" memberEnd="_CYV1VVJREeiyW7NaN4qWdw _CX8zxFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYV1VVJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYV1VFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_CYWcYVJREeiyW7NaN4qWdw" name="" memberEnd="_CYWcYlJREeiyW7NaN4qWdw _CX9a01JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_CYWcYlJREeiyW7NaN4qWdw" name="" type="_CJyb8FJREeiyW7NaN4qWdw" association="_CYWcYVJREeiyW7NaN4qWdw"/>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CIJdMFJREeiyW7NaN4qWdw" name="model">
              <packagedElement xmi:type="uml:Class" xmi:id="_CVZPAVJREeiyW7NaN4qWdw" name="ServerGame"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVZPA1JREeiyW7NaN4qWdw" name="ServerIndianSettlement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVZ2EVJREeiyW7NaN4qWdw" name="ServerPlayer"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVZ2E1JREeiyW7NaN4qWdw" name="ServerRegion"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWvS0VJREeiyW7NaN4qWdw" name="ServerBuilding"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWv54VJREeiyW7NaN4qWdw" name="ServerColony"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWwg8VJREeiyW7NaN4qWdw" name="ServerUnit"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_CVYn8VJREeiyW7NaN4qWdw" name="FreeColServer"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_CIFy1VJREeiyW7NaN4qWdw" name="common">
            <packagedElement xmi:type="uml:Package" xmi:id="_CIFy1lJREeiyW7NaN4qWdw" name="model">
              <packagedElement xmi:type="uml:Package" xmi:id="_CIGZ4FJREeiyW7NaN4qWdw" name="Map">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_CVTIY1JREeiyW7NaN4qWdw" name="Layer"/>
                <packagedElement xmi:type="uml:Class" xmi:id="_CV4-QVJREeiyW7NaN4qWdw" name="Position"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_CIliEVJREeiyW7NaN4qWdw" name="Region">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_CW5q4VJREeiyW7NaN4qWdw" name="RegionType"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVQsI1JREeiyW7NaN4qWdw" name="Game"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVRTMVJREeiyW7NaN4qWdw" name="Tile"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVR6QVJREeiyW7NaN4qWdw" name="TileImprovement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVR6Q1JREeiyW7NaN4qWdw" name="TileImprovementType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVShUVJREeiyW7NaN4qWdw" name="TileItemContainer"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVTIYVJREeiyW7NaN4qWdw" name="TileType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVTvcVJREeiyW7NaN4qWdw" name="Specification"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVWywVJREeiyW7NaN4qWdw" name="IndianSettlement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVWyw1JREeiyW7NaN4qWdw" name="Map"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVXZ0VJREeiyW7NaN4qWdw" name="Nation"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVYA4VJREeiyW7NaN4qWdw" name="Player"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVYA41JREeiyW7NaN4qWdw" name="Region"/>
              <packagedElement xmi:type="uml:Enumeration" xmi:id="_CVeuklJREeiyW7NaN4qWdw" name="Direction"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVxpgVJREeiyW7NaN4qWdw" name="Ability"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVyQkFJREeiyW7NaN4qWdw" name="AbstractUnit"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVy3oVJREeiyW7NaN4qWdw" name="Building"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVzesVJREeiyW7NaN4qWdw" name="BuildingType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV0FwVJREeiyW7NaN4qWdw" name="Colony"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV0Fw1JREeiyW7NaN4qWdw" name="ColonyTile"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV0s0VJREeiyW7NaN4qWdw" name="EuropeanNationType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV1T4VJREeiyW7NaN4qWdw" name="FreeColObject"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV168VJREeiyW7NaN4qWdw" name="GameOptions"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV2iAVJREeiyW7NaN4qWdw" name="Goods"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV3JEVJREeiyW7NaN4qWdw" name="GoodsType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV3JE1JREeiyW7NaN4qWdw" name="IndianNationType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV3wIVJREeiyW7NaN4qWdw" name="LandMap"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV4XMVJREeiyW7NaN4qWdw" name="LostCityRumour"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV5lUVJREeiyW7NaN4qWdw" name="NationType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV6MYFJREeiyW7NaN4qWdw" name="Role"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV6MYlJREeiyW7NaN4qWdw" name="Settlement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV6zcVJREeiyW7NaN4qWdw" name="Unit"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CV8BkVJREeiyW7NaN4qWdw" name="UnitType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CW6R8VJREeiyW7NaN4qWdw" name="Resource"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CW65AFJREeiyW7NaN4qWdw" name="ResourceType"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CII2IVJREeiyW7NaN4qWdw" name="io">
              <packagedElement xmi:type="uml:Class" xmi:id="_CVWLsVJREeiyW7NaN4qWdw" name="FreeColSavegameFile"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CIKrUFJREeiyW7NaN4qWdw" name="util">
              <packagedElement xmi:type="uml:Class" xmi:id="_CVbrQFJREeiyW7NaN4qWdw" name="LogBuilder"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVfVoVJREeiyW7NaN4qWdw" name="CollectionUtils"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CVf8sVJREeiyW7NaN4qWdw" name="RandomUtils"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWurw1JREeiyW7NaN4qWdw" name="RandomChoice"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CIai8VJREeiyW7NaN4qWdw" name="debug">
              <packagedElement xmi:type="uml:Class" xmi:id="_CVwbYVJREeiyW7NaN4qWdw" name="FreeColDebugger"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CIbKAFJREeiyW7NaN4qWdw" name="i18n">
              <packagedElement xmi:type="uml:Class" xmi:id="_CVxCcVJREeiyW7NaN4qWdw" name="Messages"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_CIbxEFJREeiyW7NaN4qWdw" name="option">
              <packagedElement xmi:type="uml:Class" xmi:id="_CV8ooFJREeiyW7NaN4qWdw" name="IntegerOption"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWtdoFJREeiyW7NaN4qWdw" name="FileOption"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWuEsVJREeiyW7NaN4qWdw" name="MapGeneratorOptions"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_CWurwVJREeiyW7NaN4qWdw" name="OptionGroup"/>
            </packagedElement>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_CIFy01JREeiyW7NaN4qWdw" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_CIFy1FJREeiyW7NaN4qWdw" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_CVQFEFJREeiyW7NaN4qWdw" name="File"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVQsIVJREeiyW7NaN4qWdw" name="RandomAccessFile"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_CII2IFJREeiyW7NaN4qWdw" name="util">
        <packagedElement xmi:type="uml:Package" xmi:id="_CIMggFJREeiyW7NaN4qWdw" name="logging">
          <packagedElement xmi:type="uml:Class" xmi:id="_CVeukFJREeiyW7NaN4qWdw" name="Logger"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_CIai8FJREeiyW7NaN4qWdw" name="Map">
          <packagedElement xmi:type="uml:Interface" xmi:id="_CVv0U1JREeiyW7NaN4qWdw" name="Entry"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_CIliEFJREeiyW7NaN4qWdw" name="stream">
          <packagedElement xmi:type="uml:Class" xmi:id="_CW5D0VJREeiyW7NaN4qWdw" name="Collectors"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVVkoFJREeiyW7NaN4qWdw" name="HashMap"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVc5YFJREeiyW7NaN4qWdw" name="ArrayList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CVdgcVJREeiyW7NaN4qWdw" name="List"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVeHgVJREeiyW7NaN4qWdw" name="Random"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CVgjwFJREeiyW7NaN4qWdw" name="Map"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVk1MFJREeiyW7NaN4qWdw" name="EnumMap"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CVvNQFJREeiyW7NaN4qWdw" name="Collections"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CVv0UVJREeiyW7NaN4qWdw" name="Comparator"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_CW4cwFJREeiyW7NaN4qWdw" name="Arrays"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_CXFREFJREeiyW7NaN4qWdw" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_CXF4IFJREeiyW7NaN4qWdw" name="Exception"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_Bzh4EFJREeiyW7NaN4qWdw">
      <eAnnotations xmi:id="_Bzh4EVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_Bzh4ElJREeiyW7NaN4qWdw" base_Package="_A1VxgFJREeiyW7NaN4qWdw">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CJHGgFJREeiyW7NaN4qWdw" base_Element="_CJCOAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CJHtkFJREeiyW7NaN4qWdw" base_Element="_CJCOAFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CJHtkVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CJKw4VJREeiyW7NaN4qWdw" base_Element="_CJKw4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CJLX8FJREeiyW7NaN4qWdw" base_Element="_CJKw4FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CJLX8VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CJVwAFJREeiyW7NaN4qWdw" base_Element="_CJVI8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CJVwBFJREeiyW7NaN4qWdw" base_Element="_CJVwAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CJlnolJREeiyW7NaN4qWdw" base_Element="_CJlnoFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CJmOsFJREeiyW7NaN4qWdw" base_Element="_CJlnoFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CJmOsVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_CVQsIFJREeiyW7NaN4qWdw" base_Element="_CVQFEFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVQsIlJREeiyW7NaN4qWdw" base_Element="_CVQsIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVRTMFJREeiyW7NaN4qWdw" base_Element="_CVQsI1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVR6QFJREeiyW7NaN4qWdw" base_Element="_CVRTMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVR6QlJREeiyW7NaN4qWdw" base_Element="_CVR6QVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVShUFJREeiyW7NaN4qWdw" base_Element="_CVR6Q1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVTIYFJREeiyW7NaN4qWdw" base_Element="_CVShUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVTIYlJREeiyW7NaN4qWdw" base_Element="_CVTIYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVTvcFJREeiyW7NaN4qWdw" base_Element="_CVTIY1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVUWgFJREeiyW7NaN4qWdw" base_Element="_CVTvcVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVWLsFJREeiyW7NaN4qWdw" base_Element="_CVVkoFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVWywFJREeiyW7NaN4qWdw" base_Element="_CVWLsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVWywlJREeiyW7NaN4qWdw" base_Element="_CVWywVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVXZ0FJREeiyW7NaN4qWdw" base_Element="_CVWyw1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVYA4FJREeiyW7NaN4qWdw" base_Element="_CVXZ0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVYA4lJREeiyW7NaN4qWdw" base_Element="_CVYA4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVYn8FJREeiyW7NaN4qWdw" base_Element="_CVYA41JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVZPAFJREeiyW7NaN4qWdw" base_Element="_CVYn8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVZPAlJREeiyW7NaN4qWdw" base_Element="_CVZPAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVZ2EFJREeiyW7NaN4qWdw" base_Element="_CVZPA1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVZ2ElJREeiyW7NaN4qWdw" base_Element="_CVZ2EVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVadIFJREeiyW7NaN4qWdw" base_Element="_CVZ2E1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVbrQVJREeiyW7NaN4qWdw" base_Element="_CVbrQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVdgcFJREeiyW7NaN4qWdw" base_Element="_CVc5YFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVeHgFJREeiyW7NaN4qWdw" base_Element="_CVdgcVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVeHglJREeiyW7NaN4qWdw" base_Element="_CVeHgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVeukVJREeiyW7NaN4qWdw" base_Element="_CVeukFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVfVoFJREeiyW7NaN4qWdw" base_Element="_CVeuklJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVf8sFJREeiyW7NaN4qWdw" base_Element="_CVfVoVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVf8slJREeiyW7NaN4qWdw" base_Element="_CVf8sVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVhK0FJREeiyW7NaN4qWdw" base_Element="_CVgjwFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVlcQFJREeiyW7NaN4qWdw" base_Element="_CVk1MFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CVmqYFJREeiyW7NaN4qWdw" genericsValue="Direction, Integer" base_Element="_CVmDUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVv0UFJREeiyW7NaN4qWdw" base_Element="_CVvNQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVv0UlJREeiyW7NaN4qWdw" base_Element="_CVv0UVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVwbYFJREeiyW7NaN4qWdw" base_Element="_CVv0U1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVxCcFJREeiyW7NaN4qWdw" base_Element="_CVwbYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVxpgFJREeiyW7NaN4qWdw" base_Element="_CVxCcVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVxpglJREeiyW7NaN4qWdw" base_Element="_CVxpgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVy3oFJREeiyW7NaN4qWdw" base_Element="_CVyQkFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CVzesFJREeiyW7NaN4qWdw" base_Element="_CVy3oVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV0FwFJREeiyW7NaN4qWdw" base_Element="_CVzesVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV0FwlJREeiyW7NaN4qWdw" base_Element="_CV0FwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV0s0FJREeiyW7NaN4qWdw" base_Element="_CV0Fw1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV1T4FJREeiyW7NaN4qWdw" base_Element="_CV0s0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV168FJREeiyW7NaN4qWdw" base_Element="_CV1T4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV2iAFJREeiyW7NaN4qWdw" base_Element="_CV168VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV3JEFJREeiyW7NaN4qWdw" base_Element="_CV2iAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV3JElJREeiyW7NaN4qWdw" base_Element="_CV3JEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV3wIFJREeiyW7NaN4qWdw" base_Element="_CV3JE1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV4XMFJREeiyW7NaN4qWdw" base_Element="_CV3wIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV4-QFJREeiyW7NaN4qWdw" base_Element="_CV4XMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV5lUFJREeiyW7NaN4qWdw" base_Element="_CV4-QVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV5lUlJREeiyW7NaN4qWdw" base_Element="_CV5lUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV6MYVJREeiyW7NaN4qWdw" base_Element="_CV6MYFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV6zcFJREeiyW7NaN4qWdw" base_Element="_CV6MYlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV8BkFJREeiyW7NaN4qWdw" base_Element="_CV6zcVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CV8BklJREeiyW7NaN4qWdw" base_Element="_CV8BkVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWmI4FJREeiyW7NaN4qWdw" base_Element="_CV8ooFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWuEsFJREeiyW7NaN4qWdw" base_Element="_CWtdoFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWurwFJREeiyW7NaN4qWdw" base_Element="_CWuEsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWurwlJREeiyW7NaN4qWdw" base_Element="_CWurwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWvS0FJREeiyW7NaN4qWdw" base_Element="_CWurw1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWv54FJREeiyW7NaN4qWdw" base_Element="_CWvS0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWwg8FJREeiyW7NaN4qWdw" base_Element="_CWv54VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CWwg8lJREeiyW7NaN4qWdw" base_Element="_CWwg8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CW5D0FJREeiyW7NaN4qWdw" base_Element="_CW4cwFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CW5q4FJREeiyW7NaN4qWdw" base_Element="_CW5D0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CW6R8FJREeiyW7NaN4qWdw" base_Element="_CW5q4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CW6R8lJREeiyW7NaN4qWdw" base_Element="_CW6R8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CW65AVJREeiyW7NaN4qWdw" base_Element="_CW65AFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CXF4IVJREeiyW7NaN4qWdw" base_Element="_CXF4IFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXHGQFJREeiyW7NaN4qWdw" base_Element="_CXGfM1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CXHGQVJREeiyW7NaN4qWdw" base_Element="_CXGfM1JREeiyW7NaN4qWdw">
    <annotations xmi:id="_CXHGQlJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXI7cFJREeiyW7NaN4qWdw" base_Element="_CXIUYFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CXI7cVJREeiyW7NaN4qWdw" base_Element="_CXIUYFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CXI7clJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_CXMl1VJREeiyW7NaN4qWdw" genericsValue="Tile, River" base_Element="_CXL-wlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXQQMlJREeiyW7NaN4qWdw" genericsValue="RiverSection" base_Element="_CXQQMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXYzEFJREeiyW7NaN4qWdw" genericsValue="Tile" base_Element="_CXYMAlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXZaJFJREeiyW7NaN4qWdw" genericsValue="Territory" base_Element="_CXZaIlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXaoQFJREeiyW7NaN4qWdw" genericsValue="Tile" base_Element="_CXaBNFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXdEgFJREeiyW7NaN4qWdw" genericsValue="Player" base_Element="_CXcdclJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXe5sFJREeiyW7NaN4qWdw" genericsValue="Player" base_Element="_CXeSpFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXfgxVJREeiyW7NaN4qWdw" base_Element="_CXfgwFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CXgH0FJREeiyW7NaN4qWdw" base_Element="_CXfgwFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CXgH0VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXgu4VJREeiyW7NaN4qWdw" base_Element="_CXgH0lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_CXgu4lJREeiyW7NaN4qWdw" base_Element="_CXgH0lJREeiyW7NaN4qWdw">
    <annotations xmi:id="_CXgu41JREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_CXlAUFJREeiyW7NaN4qWdw" genericsValue="TileType" base_Element="_CXkZRFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXoqsFJREeiyW7NaN4qWdw" genericsValue="Tile" base_Element="_CXoDolJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_CXtjNFJREeiyW7NaN4qWdw" base_Element="_CXtjMlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_CXuKQVJREeiyW7NaN4qWdw" base_Element="_CXtjNlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_CXuxUFJREeiyW7NaN4qWdw" base_Element="_CXuKQ1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXuxUVJREeiyW7NaN4qWdw" base_Element="_CXuKQ1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXvYYFJREeiyW7NaN4qWdw" base_Element="_CXuxUlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXv_cFJREeiyW7NaN4qWdw" base_Element="_CXvYY1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXv_clJREeiyW7NaN4qWdw" genericsValue="Direction, Direction" base_Element="_CXv_cVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXwmgVJREeiyW7NaN4qWdw" genericsValue="Direction, Direction" base_Element="_CXwmgFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXxNkFJREeiyW7NaN4qWdw" base_Element="_CXwmglJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXxNklJREeiyW7NaN4qWdw" base_Element="_CXxNkVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXx0o1JREeiyW7NaN4qWdw" base_Element="_CXx0oVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXybsVJREeiyW7NaN4qWdw" base_Element="_CXybsFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CXzCwFJREeiyW7NaN4qWdw" genericsValue="Tile, River" base_Element="_CXybslJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXzCwVJREeiyW7NaN4qWdw" base_Element="_CXybslJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CXzp0FJREeiyW7NaN4qWdw" base_Element="_CXzCwlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_CX0Q4lJREeiyW7NaN4qWdw" base_Element="_CX0Q4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_CX038FJREeiyW7NaN4qWdw" genericsValue="Direction, Integer" base_Element="_CX0Q5FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX038lJREeiyW7NaN4qWdw" base_Element="_CX0Q5FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX1fAFJREeiyW7NaN4qWdw" base_Element="_CX0381JREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_CX1fAlJREeiyW7NaN4qWdw" name="getSize" isLeaf="true" method="_CYBsS1JREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_CX1fA1JREeiyW7NaN4qWdw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX2GEFJREeiyW7NaN4qWdw" base_Element="_CX1fBFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX2GElJREeiyW7NaN4qWdw" base_Element="_CX2GEVJREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_CX2GE1JREeiyW7NaN4qWdw" name="getTile" isLeaf="true" method="_CYCTUFJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_CX2GFFJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX3UMlJREeiyW7NaN4qWdw" base_Element="_CX3UMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX37QFJREeiyW7NaN4qWdw" base_Element="_CX3UM1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX37QlJREeiyW7NaN4qWdw" base_Element="_CX37QVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX4iUFJREeiyW7NaN4qWdw" base_Element="_CX37Q1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX4iUlJREeiyW7NaN4qWdw" base_Element="_CX4iUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX4iVFJREeiyW7NaN4qWdw" base_Element="_CX4iU1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX5JYVJREeiyW7NaN4qWdw" base_Element="_CX5JYFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX5wcFJREeiyW7NaN4qWdw" base_Element="_CX5JYlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX5wclJREeiyW7NaN4qWdw" base_Element="_CX5wcVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX7lo1JREeiyW7NaN4qWdw" base_Element="_CX7lolJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX8MsFJREeiyW7NaN4qWdw" base_Element="_CX7lpFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX8MslJREeiyW7NaN4qWdw" base_Element="_CX8MsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX8zwVJREeiyW7NaN4qWdw" base_Element="_CX8zwFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX8zw1JREeiyW7NaN4qWdw" base_Element="_CX8zwlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX9a0lJREeiyW7NaN4qWdw" base_Element="_CX8zxFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_CX-B4FJREeiyW7NaN4qWdw" base_Element="_CX9a01JREeiyW7NaN4qWdw"/>
  <uml:OpaqueBehavior xmi:id="_CX_3G1JREeiyW7NaN4qWdw" name="getNewDirection" specification="_CXLXsFJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_CX_3HFJREeiyW7NaN4qWdw" name="oldDirection" type="_CVeuklJREeiyW7NaN4qWdw"/>
    <ownedParameter xmi:id="_CX_3HVJREeiyW7NaN4qWdw" type="_CVeuklJREeiyW7NaN4qWdw" direction="return"/>
    <language>java</language>
    <body>switch(this) {&#xD;
         case STRAIGHT_AHEAD:&#xD;
             return oldDirection;&#xD;
         case RIGHT_TURN:&#xD;
         		return rightMap.get(oldDirection);&#xD;
         case LEFT_TURN:&#xD;
         		return leftMap.get(oldDirection);&#xD;
         }&#xD;
         return oldDirection;&#xD;
     </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_CYBsS1JREeiyW7NaN4qWdw" name="getSize" specification="_CX1fAlJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_CYBsTFJREeiyW7NaN4qWdw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>return size;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_CYCTUFJREeiyW7NaN4qWdw" name="getTile" specification="_CX2GE1JREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_CYCTUVJREeiyW7NaN4qWdw" type="_CVRTMVJREeiyW7NaN4qWdw" direction="return"/>
    <language>java</language>
    <body>return tile;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:Reference xmi:id="_CYN5gFJREeiyW7NaN4qWdw" base_Element="_CYNScFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYN5g1JREeiyW7NaN4qWdw" base_Element="_CYN5gVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYOgklJREeiyW7NaN4qWdw" base_Element="_CYOgkFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYOglVJREeiyW7NaN4qWdw" base_Element="_CYOgk1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYPHoFJREeiyW7NaN4qWdw" base_Element="_CYOgllJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYPHo1JREeiyW7NaN4qWdw" base_Element="_CYPHoVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYPusFJREeiyW7NaN4qWdw" base_Element="_CYPHpFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYPus1JREeiyW7NaN4qWdw" base_Element="_CYPusVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYQVwFJREeiyW7NaN4qWdw" base_Element="_CYPutFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYQVw1JREeiyW7NaN4qWdw" base_Element="_CYQVwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYQ80FJREeiyW7NaN4qWdw" base_Element="_CYQVxFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYQ801JREeiyW7NaN4qWdw" base_Element="_CYQ80VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYQ81lJREeiyW7NaN4qWdw" base_Element="_CYQ81FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYRj4lJREeiyW7NaN4qWdw" base_Element="_CYRj4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYRj5VJREeiyW7NaN4qWdw" base_Element="_CYRj41JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYSK8FJREeiyW7NaN4qWdw" base_Element="_CYRj5lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYSK81JREeiyW7NaN4qWdw" base_Element="_CYSK8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYSyAFJREeiyW7NaN4qWdw" base_Element="_CYSK9FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYSyA1JREeiyW7NaN4qWdw" base_Element="_CYSyAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYTZEFJREeiyW7NaN4qWdw" base_Element="_CYSyBFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYTZE1JREeiyW7NaN4qWdw" base_Element="_CYTZEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYUAIFJREeiyW7NaN4qWdw" base_Element="_CYTZFFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYUAI1JREeiyW7NaN4qWdw" base_Element="_CYUAIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYUnMFJREeiyW7NaN4qWdw" base_Element="_CYUAJFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYVOQFJREeiyW7NaN4qWdw" base_Element="_CYUnMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYVOQ1JREeiyW7NaN4qWdw" base_Element="_CYVOQVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYV1UFJREeiyW7NaN4qWdw" base_Element="_CYVORFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYV1U1JREeiyW7NaN4qWdw" base_Element="_CYV1UVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYWcYFJREeiyW7NaN4qWdw" base_Element="_CYV1VFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_CYWcY1JREeiyW7NaN4qWdw" base_Element="_CYWcYVJREeiyW7NaN4qWdw"/>
</xmi:XMI>
