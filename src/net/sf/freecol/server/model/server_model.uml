<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_OLWwYFJREeiyW7NaN4qWdw" name="server_model">
    <eAnnotations xmi:id="_Oyoy0FJREeiyW7NaN4qWdw" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_Oyoy0VJREeiyW7NaN4qWdw" source="codegen">
        <details xmi:id="_Oyoy0lJREeiyW7NaN4qWdw" key="codegenDirectory" value="/COSC442-FinalProject/src"/>
        <details xmi:id="_RDy9IFJREeiyW7NaN4qWdw" key="AssociatedSourceCode" value="/COSC442-FinalProject/src/net/sf/freecol/server/model/DiplomacySession.java;1248294488/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/LootSession.java;3567229988/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/MonarchSession.java;473823509/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerBuilding.java;2541893112/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerColony.java;546159412/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerColonyTile.java;1891187922/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerEurope.java;434118171/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerGame.java;2457970474/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerIndianSettlement.java;1525565295/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerModelObject.java;450388713/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/TransactionSession.java;2216133166/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerRegion.java;3886637826/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerUnit.java;2179820888/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/TradeSession.java;2458481794/1;/COSC442-FinalProject/src/net/sf/freecol/server/model/ServerPlayer.java;2802670156/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_P_oxcVJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_P_pYgFJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_P_pYgVJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_P_pYglJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_P_pYg1JREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_P_pYhFJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_P_pYhVJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_P_pYhlJREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_P_pYh1JREeiyW7NaN4qWdw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_P9rCkFJREeiyW7NaN4qWdw" name="net">
      <packagedElement xmi:type="uml:Package" xmi:id="_P9rpoFJREeiyW7NaN4qWdw" name="sf">
        <packagedElement xmi:type="uml:Package" xmi:id="_P9rpoVJREeiyW7NaN4qWdw" name="freecol">
          <packagedElement xmi:type="uml:Package" xmi:id="_P9rpolJREeiyW7NaN4qWdw" name="server">
            <packagedElement xmi:type="uml:Package" xmi:id="_P9sQtFJREeiyW7NaN4qWdw" name="control">
              <packagedElement xmi:type="uml:Package" xmi:id="_P9sQtVJREeiyW7NaN4qWdw" name="ChangeSet">
                <packagedElement xmi:type="uml:Class" xmi:id="_QRYBslJREeiyW7NaN4qWdw" name="See"/>
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QSElQFJREeiyW7NaN4qWdw" name="ChangePriority"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRYBsFJREeiyW7NaN4qWdw" name="ChangeSet"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P9yXUFJREeiyW7NaN4qWdw" name="model">
              <packagedElement xmi:type="uml:Class" xmi:id="_P_oxcFJREeiyW7NaN4qWdw" name="DiplomacySession">
                <ownedComment xmi:id="_QWBRIFJREeiyW7NaN4qWdw">
                  <body>A type of session to handle diplomacy.</body>
                </ownedComment>
                <generalization xmi:id="_QRZP0FJREeiyW7NaN4qWdw" general="_QAY_YVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVMKsFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWWBQFJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVMKsVJREeiyW7NaN4qWdw" value="Logger.getLogger(DiplomacySession.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVMxwFJREeiyW7NaN4qWdw" name="agreement" type="_QRWMgVJREeiyW7NaN4qWdw" association="_QWB4MFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVMxwVJREeiyW7NaN4qWdw" name="unit" visibility="private" isLeaf="true" type="_QRXaoVJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWWoUVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVMxw1JREeiyW7NaN4qWdw" name="settlement" isLeaf="true" type="_QRWzkVJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWXPYVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVNY01JREeiyW7NaN4qWdw" name="otherUnit" visibility="private" isLeaf="true" type="_QRXaoVJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWX2cVJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVgTwVJREeiyW7NaN4qWdw" name="DiplomacySession" specification="_QTYz4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVgTwlJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVgTw1JREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVgTxFJREeiyW7NaN4qWdw" type="_P_oxcFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(DiplomacySession.class, unit, settlement));&#xD;
     this.agreement = null;&#xD;
     this.unit = unit;&#xD;
     this.settlement = settlement;&#xD;
     this.otherUnit = null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVgTxVJREeiyW7NaN4qWdw" name="DiplomacySession" specification="_QTZa9VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVgTxlJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVgTx1JREeiyW7NaN4qWdw" name="otherUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVgTyFJREeiyW7NaN4qWdw" type="_P_oxcFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(DiplomacySession.class, unit, otherUnit));&#xD;
     this.agreement = null;&#xD;
     this.unit = unit;&#xD;
     this.settlement = null;&#xD;
     this.otherUnit = otherUnit;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVgTyVJREeiyW7NaN4qWdw" name="complete" specification="_QTaCAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVgTylJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>unit.setMovesLeft(0);&#xD;
     cs.add(See.only((ServerPlayer)unit.getOwner()), unit);&#xD;
     super.complete(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVgTy1JREeiyW7NaN4qWdw" name="getUnit" specification="_P_p_kFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVgTzFJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return unit;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVgTzVJREeiyW7NaN4qWdw" name="getOtherUnit" specification="_P_qmoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVgTzlJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return otherUnit;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_P_p_kFJREeiyW7NaN4qWdw" name="getUnit" method="_QVgTy1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTapEFJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_P_qmoFJREeiyW7NaN4qWdw" name="getOtherUnit" method="_QVgTzVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTapEVJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTYz4FJREeiyW7NaN4qWdw" name="DiplomacySession" method="_QVgTwVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTZa8lJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTZa81JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_QTZa8FJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTZa8VJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTZa9FJREeiyW7NaN4qWdw" type="_P_oxcFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTZa9VJREeiyW7NaN4qWdw" name="DiplomacySession" method="_QVgTxVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTZa-FJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTZa-VJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_QTZa9lJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTZa91JREeiyW7NaN4qWdw" name="otherUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTZa-lJREeiyW7NaN4qWdw" type="_P_oxcFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTaCAFJREeiyW7NaN4qWdw" name="complete" method="_QVgTyVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTaCAVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_P_sb0FJREeiyW7NaN4qWdw" name="LootSession">
                <ownedComment xmi:id="_QWCfQFJREeiyW7NaN4qWdw">
                  <body>A type of session to handle looting of cargo.</body>
                </ownedComment>
                <generalization xmi:id="_QRc6MFJREeiyW7NaN4qWdw" general="_QAY_YVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVN_4FJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWYdgVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVN_4VJREeiyW7NaN4qWdw" value="Logger.getLogger(LootSession.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVN_4lJREeiyW7NaN4qWdw" name="capture" isLeaf="true" type="_QRbFAVJREeiyW7NaN4qWdw" isOrdered="true" isReadOnly="true" association="_QWZEkFJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVN_5FJREeiyW7NaN4qWdw" value="*"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVg601JREeiyW7NaN4qWdw" name="LootSession" specification="_QTbQIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVg61FJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg61VJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg61lJREeiyW7NaN4qWdw" name="capture" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg611JREeiyW7NaN4qWdw" type="_P_sb0FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(LootSession.class, winner, loser));&#xD;
     this.capture = capture;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVg62FJREeiyW7NaN4qWdw" name="complete" specification="_QTceQVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVg62VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>super.complete(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QTbQIFJREeiyW7NaN4qWdw" name="LootSession" method="_QVg601JREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTb3MlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTb3M1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_QTbQIVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTb3MFJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTb3MVJREeiyW7NaN4qWdw" name="capture" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTb3NFJREeiyW7NaN4qWdw" type="_P_sb0FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTceQVJREeiyW7NaN4qWdw" name="complete" method="_QVg62FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTceQlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_P_tp8FJREeiyW7NaN4qWdw" name="MonarchSession">
                <ownedComment xmi:id="_QWCfQVJREeiyW7NaN4qWdw">
                  <body>A type of session to handle monarch actions that require response.</body>
                </ownedComment>
                <generalization xmi:id="_QRf9gFJREeiyW7NaN4qWdw" general="_QAY_YVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVOm81JREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWZEk1JREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVOm9FJREeiyW7NaN4qWdw" value="Logger.getLogger(MonarchSession.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVPOAFJREeiyW7NaN4qWdw" name="serverPlayer" visibility="private" isLeaf="true" type="_QAyoAFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWZroVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVPOAlJREeiyW7NaN4qWdw" name="action" visibility="private" isLeaf="true" type="_QReIUVJREeiyW7NaN4qWdw" isReadOnly="true"/>
                <ownedAttribute xmi:id="_QVPOBFJREeiyW7NaN4qWdw" name="tax" visibility="private" isLeaf="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVP1EVJREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWaSsVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVP1ElJREeiyW7NaN4qWdw" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVP1E1JREeiyW7NaN4qWdw" name="mercenaries" type="_QRdhQFJREeiyW7NaN4qWdw" isOrdered="true" isReadOnly="true" association="_QWa5wVJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVP1FFJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVP1FVJREeiyW7NaN4qWdw" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVP1FlJREeiyW7NaN4qWdw" name="price" isLeaf="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVg63FJREeiyW7NaN4qWdw" name="MonarchSession" specification="_QTdsYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVg63VJREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg63lJREeiyW7NaN4qWdw" name="action" type="_QReIUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg631JREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVg64FJREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVg64VJREeiyW7NaN4qWdw" type="_P_tp8FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(MonarchSession.class, serverPlayer.getId(), &quot;&quot;));&#xD;
&#xD;
     this.serverPlayer = serverPlayer;&#xD;
     this.action = action;&#xD;
     this.tax = tax;&#xD;
     this.goods = goods;&#xD;
     this.mercenaries = null;&#xD;
     this.price = 0;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVhh4FJREeiyW7NaN4qWdw" name="MonarchSession" specification="_QTeTdFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVhh4VJREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVhh4lJREeiyW7NaN4qWdw" name="action" type="_QReIUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVhh41JREeiyW7NaN4qWdw" name="mercenaries" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVhh5FJREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVhh5VJREeiyW7NaN4qWdw" type="_P_tp8FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(MonarchSession.class, serverPlayer.getId(), &quot;&quot;));&#xD;
&#xD;
     this.serverPlayer = serverPlayer;&#xD;
     this.action = action;&#xD;
     this.tax = 0;&#xD;
     this.goods = null;&#xD;
     this.mercenaries = mercenaries;&#xD;
     this.price = price;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVhh5lJREeiyW7NaN4qWdw" name="complete" specification="_QTfhkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVhh51JREeiyW7NaN4qWdw" name="result">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVhh6FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>switch (action) {&#xD;
     case RAISE_TAX_ACT: case RAISE_TAX_WAR:&#xD;
         serverPlayer.csRaiseTax(tax, goods, result, cs);&#xD;
         break;&#xD;
     case MONARCH_MERCENARIES: case HESSIAN_MERCENARIES:&#xD;
         if (result) serverPlayer.csAddMercenaries(mercenaries, price, cs);&#xD;
         break;&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
     super.complete(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVhh6VJREeiyW7NaN4qWdw" name="complete" specification="_QTfhk1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVhh6lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>switch (action) {&#xD;
     case RAISE_TAX_ACT: case RAISE_TAX_WAR:&#xD;
         serverPlayer.ignoreTax(tax, goods, cs);&#xD;
         break;&#xD;
     case MONARCH_MERCENARIES: case HESSIAN_MERCENARIES:&#xD;
         serverPlayer.ignoreMercenaries(cs);&#xD;
         break;&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
     super.complete(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVhh61JREeiyW7NaN4qWdw" name="getAction" specification="_P_u4EFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVhh7FJREeiyW7NaN4qWdw" type="_QReIUVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return this.action;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViI8FJREeiyW7NaN4qWdw" name="getTax" specification="_P_vfIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViI8VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return this.tax;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_P_u4EFJREeiyW7NaN4qWdw" name="getAction" method="_QVhh61JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTgIpFJREeiyW7NaN4qWdw" type="_QReIUVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_P_vfIFJREeiyW7NaN4qWdw" name="getTax" method="_QViI8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_P_vfIVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTdsYFJREeiyW7NaN4qWdw" name="MonarchSession" method="_QVg63FJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTeTcVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTeTclJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_QTdsYVJREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTdsYlJREeiyW7NaN4qWdw" name="action" type="_QReIUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTdsY1JREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTeTcFJREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTeTc1JREeiyW7NaN4qWdw" type="_P_tp8FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTeTdFJREeiyW7NaN4qWdw" name="MonarchSession" method="_QVhh4FJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTe6hFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTe6hVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_QTe6gFJREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTe6gVJREeiyW7NaN4qWdw" name="action" type="_QReIUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTe6glJREeiyW7NaN4qWdw" name="mercenaries" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTe6g1JREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTe6hlJREeiyW7NaN4qWdw" type="_P_tp8FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTfhkFJREeiyW7NaN4qWdw" name="complete" method="_QVhh5lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTfhkVJREeiyW7NaN4qWdw" name="result">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTfhklJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTfhk1JREeiyW7NaN4qWdw" name="complete" method="_QVhh6VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTgIoFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_P_xUUFJREeiyW7NaN4qWdw" name="ServerBuilding">
                <ownedComment xmi:id="_QWCfQlJREeiyW7NaN4qWdw">
                  <body>The server version of a building.</body>
                </ownedComment>
                <generalization xmi:id="_QTjzBlJREeiyW7NaN4qWdw" general="_QRjA0VJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVRDMFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWbg0FJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVRDMVJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerBuilding.class.getName())"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QRnSQVJREeiyW7NaN4qWdw" client="_P_xUUFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViI8lJREeiyW7NaN4qWdw" name="ServerBuilding" specification="_QTgvsFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViI81JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI9FJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QViI9VJREeiyW7NaN4qWdw" type="_P_xUUFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViI9lJREeiyW7NaN4qWdw" name="ServerBuilding" specification="_QThWxVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViI91JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI-FJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI-VJREeiyW7NaN4qWdw" name="type" type="_QRjn4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI-lJREeiyW7NaN4qWdw" type="_P_xUUFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, colony, type);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViI-1JREeiyW7NaN4qWdw" name="csNewTurn" specification="_QTh90FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViI_FJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI_VJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViI_lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>BuildingType type = getType();&#xD;
&#xD;
     if (canTeach()) csTeach(cs);&#xD;
&#xD;
     if (type.hasAbility(Ability.REPAIR_UNITS)) {&#xD;
         csRepairUnits(cs);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwAFJREeiyW7NaN4qWdw" name="csTeach" specification="_QTik4lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwAVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final ServerPlayer owner = (ServerPlayer)getColony().getOwner();&#xD;
     &#xD;
     for (Unit teacher : getUnitList()) {&#xD;
         Unit student = teacher.getStudent();&#xD;
&#xD;
         if (student != null &amp;&amp; student.getTeacher() != teacher) {&#xD;
             // Sanitation, make sure we have the proper&#xD;
             // teacher/student relation.&#xD;
             logger.warning(&quot;Bogus teacher/student assignment.&quot;);&#xD;
             teacher.setStudent(null);&#xD;
             student = null;&#xD;
         }&#xD;
&#xD;
         // Student may have changed&#xD;
         if (student == null &amp;&amp; csAssignStudent(teacher, cs)) {&#xD;
             student = teacher.getStudent();&#xD;
         }&#xD;
&#xD;
         // Update teaching amount.&#xD;
         teacher.setTurnsOfTraining((student == null) ? 0&#xD;
             : teacher.getTurnsOfTraining() + 1);&#xD;
         cs.add(See.only(owner), teacher);&#xD;
&#xD;
         // Do not check for completed training, see csCheckTeach below.&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwAlJREeiyW7NaN4qWdw" name="csCheckTeach" specification="_QTik5FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwA1JREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwBFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwBVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final ServerPlayer owner = (ServerPlayer)getColony().getOwner();&#xD;
&#xD;
     Unit student = teacher.getStudent();&#xD;
     if (student != null&#xD;
         &amp;&amp; teacher.getTurnsOfTraining()&#xD;
             >= teacher.getNeededTurnsOfTraining()) {&#xD;
         csTrainStudent(teacher, student, cs);&#xD;
         // Student will have changed, teacher already added in csTeach&#xD;
         cs.add(See.only(owner), student);&#xD;
         if (teacher.getStudent() == null) csAssignStudent(teacher, cs);&#xD;
         return true;&#xD;
     }&#xD;
     return false;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwBlJREeiyW7NaN4qWdw" name="csTrainStudent" specification="_QTjL8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwB1JREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwCFJREeiyW7NaN4qWdw" name="student" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwCVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwClJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final ServerPlayer owner = (ServerPlayer)getColony().getOwner();&#xD;
     StringTemplate oldName = student.getLabel();&#xD;
     UnitType teach = teacher.getType().getSkillTaught();&#xD;
     UnitType skill = Unit.getUnitTypeTeaching(teach, student.getType());&#xD;
     boolean ret = skill != null;&#xD;
     if (skill == null) {&#xD;
         logger.warning(&quot;Student &quot; + student.getId()&#xD;
                        + &quot; can not learn from &quot; + teacher.getId());&#xD;
     } else {&#xD;
         student.changeType(skill);//-vis: safe within colony&#xD;
         StringTemplate newName = student.getLabel();&#xD;
         cs.addMessage(See.only(owner),&#xD;
             new ModelMessage(ModelMessage.MessageType.UNIT_IMPROVED,&#xD;
                              &quot;model.building.unitEducated&quot;,&#xD;
                              getColony(), this)&#xD;
                 .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, newName)&#xD;
                 .addName(&quot;%colony%&quot;, getColony().getName()));&#xD;
     }&#xD;
     student.setTurnsOfTraining(0);&#xD;
     student.setMovesLeft(0);&#xD;
     teacher.setTurnsOfTraining(0);&#xD;
     teacher.setMovesLeft(0);&#xD;
     if (!student.canBeStudent(teacher)) {&#xD;
         student.setTeacher(null);&#xD;
         teacher.setStudent(null);&#xD;
     }&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwC1JREeiyW7NaN4qWdw" name="csAssignStudent" specification="_QTjL9VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwDFJREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwDVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwDlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Colony colony = getColony();&#xD;
     final ServerPlayer owner = (ServerPlayer)colony.getOwner();&#xD;
     final Unit student = colony.findStudent(teacher);&#xD;
     if (student == null) {&#xD;
         cs.addMessage(See.only(owner),&#xD;
             new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                              &quot;model.building.noStudent&quot;,&#xD;
                              colony, teacher)&#xD;
                       .addStringTemplate(&quot;%teacher%&quot;, teacher.getLabel())&#xD;
                       .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
         return false;&#xD;
     }&#xD;
     teacher.setStudent(student);&#xD;
     teacher.changeWorkType(null);&#xD;
     student.setTeacher(teacher);&#xD;
     cs.add(See.only(owner), student);&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwD1JREeiyW7NaN4qWdw" name="csRepairUnits" specification="_QTjzAVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwEFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (Unit unit : getTile().getUnitList()) {&#xD;
         if (unit.isDamaged()&#xD;
             &amp;&amp; getType().hasAbility(Ability.REPAIR_UNITS,&#xD;
                                     unit.getType())) {&#xD;
             ((ServerUnit) unit).csRepairUnit(cs);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QViwEVJREeiyW7NaN4qWdw" name="csCheckMissingInput" specification="_QTjzA1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QViwElJREeiyW7NaN4qWdw" name="pi" type="_QRldEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QViwE1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>List&lt;AbstractGoods> inputs = getInputs();&#xD;
     if (!(inputs.isEmpty()&#xD;
           || isEmpty()&#xD;
           || canAutoProduce())&#xD;
         &amp;&amp; pi.getProduction().isEmpty()) {&#xD;
         for (AbstractGoods goods : inputs) {&#xD;
             cs.addMessage(See.only((ServerPlayer)getOwner()),&#xD;
                 new ModelMessage(ModelMessage.MessageType.MISSING_GOODS,&#xD;
                                  &quot;model.building.notEnoughInput&quot;,&#xD;
                                  this, goods.getType())&#xD;
                     .addNamed(&quot;%inputGoods%&quot;, goods.getType())&#xD;
                     .addNamed(&quot;%building%&quot;, this)&#xD;
                     .addName(&quot;%colony%&quot;, getColony().getName()));&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVjXEFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_P_zJgFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVjXEVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverBuilding&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_P_zJgFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVjXEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_P_zJgVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTgvsFJREeiyW7NaN4qWdw" name="ServerBuilding" method="_QViI8lJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QThWwlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QThWw1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWCfQ1JREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QThWwFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QThWwVJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QThWxFJREeiyW7NaN4qWdw" type="_P_xUUFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QThWxVJREeiyW7NaN4qWdw" name="ServerBuilding" method="_QViI9lJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QThWyVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QThWylJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWCfRFJREeiyW7NaN4qWdw">
                    <body>Creates a new ServerBuilding.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> this object belongs to.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> in which this building is located.&#xD;
     * @param type The &lt;code>BuildingType&lt;/code> of building.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QThWxlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QThWx1JREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QThWyFJREeiyW7NaN4qWdw" name="type" type="_QRjn4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QThWy1JREeiyW7NaN4qWdw" type="_P_xUUFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTh90FJREeiyW7NaN4qWdw" name="csNewTurn" method="_QViI-1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTh90VJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTh90lJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTh901JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTik4lJREeiyW7NaN4qWdw" name="csTeach" visibility="private" method="_QViwAFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfRVJREeiyW7NaN4qWdw">
                    <body>Teach all the units in this school.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTik41JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTik5FJREeiyW7NaN4qWdw" name="csCheckTeach" method="_QViwAlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfRlJREeiyW7NaN4qWdw">
                    <body>Check and complete teaching if possible.&#xD;
     *&#xD;
     * This needs to be separate and public because of the recheck of&#xD;
     * teaching required if the colony production bonus rises at end&#xD;
     * of new turn calculations.&#xD;
     *&#xD;
     * @param teacher The teaching &lt;code>Unit&lt;/code>.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if teaching occurred.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTik5VJREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTik5lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTik51JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTjL8FJREeiyW7NaN4qWdw" name="csTrainStudent" visibility="private" method="_QViwBlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfR1JREeiyW7NaN4qWdw">
                    <body>Train a student.&#xD;
     *&#xD;
     * @param teacher The teacher &lt;code>Unit&lt;/code>.&#xD;
     * @param student The student &lt;code>Unit&lt;/code> to train.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if teaching occurred.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTjL8VJREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjL8lJREeiyW7NaN4qWdw" name="student" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjL81JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjL9FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTjL9VJREeiyW7NaN4qWdw" name="csAssignStudent" visibility="private" method="_QViwC1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfSFJREeiyW7NaN4qWdw">
                    <body>Assigns a student to a teacher within a building.&#xD;
     *&#xD;
     * @param teacher The &lt;code>Unit&lt;/code> that is teaching.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if a student was assigned.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTjL9lJREeiyW7NaN4qWdw" name="teacher" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjL91JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjzAFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTjzAVJREeiyW7NaN4qWdw" name="csRepairUnits" visibility="private" method="_QViwD1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfSVJREeiyW7NaN4qWdw">
                    <body>Repair the units in this building.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTjzAlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTjzA1JREeiyW7NaN4qWdw" name="csCheckMissingInput" method="_QViwEVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWCfSlJREeiyW7NaN4qWdw">
                    <body>Check a building to see if it is missing input.&#xD;
     *&#xD;
     * The building must need input, have a person working there, and have&#xD;
     * no production occurring.&#xD;
     *&#xD;
     * @param pi The &lt;code>ProductionInfo&lt;/code> for the building.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTjzBFJREeiyW7NaN4qWdw" name="pi" type="_QRldEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTjzBVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_P_2z4FJREeiyW7NaN4qWdw" name="ServerColony">
                <ownedComment xmi:id="_QWCfS1JREeiyW7NaN4qWdw">
                  <body>The server version of a colony.</body>
                </ownedComment>
                <generalization xmi:id="_QTru1lJREeiyW7NaN4qWdw" general="_QRkO8FJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVRDMlJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWbg01JREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVRDM1JREeiyW7NaN4qWdw" value="Logger.getLogger(ServerColony.class.getName())"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QRyRYVJREeiyW7NaN4qWdw" client="_P_2z4FJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVjXElJREeiyW7NaN4qWdw" name="ServerColony" specification="_QTkaEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVjXE1JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXFFJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVjXFVJREeiyW7NaN4qWdw" type="_P_2z4FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVjXFlJREeiyW7NaN4qWdw" name="ServerColony" specification="_QTlBI1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVjXF1JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXGFJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXGVJREeiyW7NaN4qWdw" name="name">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVjXGlJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXG1JREeiyW7NaN4qWdw" type="_P_2z4FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, owner, name, tile);&#xD;
     Specification spec = getSpecification();&#xD;
&#xD;
     setGoodsContainer(new GoodsContainer(game, this));&#xD;
     sonsOfLiberty = 0;&#xD;
     oldSonsOfLiberty = 0;&#xD;
     established = game.getTurn();&#xD;
&#xD;
     ColonyTile colonyTile = new ServerColonyTile(game, this, tile);&#xD;
     colonyTiles.add(colonyTile);&#xD;
     for (Tile t : tile.getSurroundingTiles(getRadius())) {&#xD;
         colonyTiles.add(new ServerColonyTile(game, this, t));&#xD;
     }&#xD;
&#xD;
     Building building;&#xD;
     List&lt;BuildingType> buildingTypes = spec.getBuildingTypeList();&#xD;
     for (BuildingType buildingType : buildingTypes) {&#xD;
         if (buildingType.isAutomaticBuild()&#xD;
             || isAutomaticBuild(buildingType)) {&#xD;
             building = new ServerBuilding(getGame(), this, buildingType);&#xD;
             addBuilding(building);&#xD;
         }&#xD;
     }&#xD;
     // Set up default production queues.  Do this after calling&#xD;
     // addBuilding because that will check build queue integrity,&#xD;
     // and these might fail the population check.&#xD;
     // FIXME: express this in the spec somehow.&#xD;
     if (isLandLocked()) {&#xD;
         buildQueue.add(spec.getBuildingType(&quot;model.building.warehouse&quot;));&#xD;
     } else {&#xD;
         buildQueue.add(spec.getBuildingType(&quot;model.building.docks&quot;));&#xD;
         addPortAbility();&#xD;
     }&#xD;
     for (UnitType unitType : spec.getUnitTypesWithAbility(Ability.BORN_IN_COLONY)) {&#xD;
         if (unitType.needsGoodsToBuild()) {&#xD;
             populationQueue.add(unitType);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVjXHFJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QTloMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVjXHVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXHlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVjXH1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>lb.add(&quot;COLONY &quot;, this);&#xD;
     final Specification spec = getSpecification();&#xD;
     final ServerPlayer owner = (ServerPlayer) getOwner();&#xD;
     BuildQueue&lt;?>[] queues = new BuildQueue&lt;?>[] { buildQueue,&#xD;
              populationQueue };&#xD;
     final Tile tile = getTile();&#xD;
&#xD;
     // The AI is prone to removing all units from a colony.&#xD;
     // Clean up such cases, to avoid other players seeing the&#xD;
     // nonsensical 0-unit colony.&#xD;
     if (getUnitCount() &lt;= 0) {&#xD;
         lb.add(&quot; 0-unit DISPOSING, &quot;);&#xD;
         owner.csDisposeSettlement(this, cs);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     boolean tileDirty = false;&#xD;
     boolean newUnitBorn = false;&#xD;
     GoodsContainer container = getGoodsContainer();&#xD;
     container.saveState();&#xD;
&#xD;
     // Check for learning by experience&#xD;
     for (WorkLocation workLocation : getCurrentWorkLocations()) {&#xD;
         ((ServerModelObject)workLocation).csNewTurn(random, lb, cs);&#xD;
         ProductionInfo productionInfo = getProductionInfo(workLocation);&#xD;
         if (productionInfo == null) continue;&#xD;
         if (!workLocation.isEmpty()) {&#xD;
             for (AbstractGoods goods : productionInfo.getProduction()) {&#xD;
                 UnitType expert = spec.getExpertForProducing(goods.getType());&#xD;
                 int experience = goods.getAmount() / workLocation.getUnitCount();&#xD;
                 for (Unit unit : workLocation.getUnitList()) {&#xD;
                     if (goods.getType() == unit.getExperienceType()&#xD;
                         &amp;&amp; unit.getType().canBeUpgraded(expert, ChangeType.EXPERIENCE)) {&#xD;
                         unit.setExperience(unit.getExperience() + experience);&#xD;
                         cs.addPartial(See.only(owner), unit, &quot;experience&quot;);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         if (workLocation instanceof ServerBuilding) {&#xD;
             // FIXME: generalize to other WorkLocations?&#xD;
             ((ServerBuilding)workLocation).csCheckMissingInput(productionInfo, cs);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Check the build queues and build new stuff.  If a queue&#xD;
     // does a build add it to the built list, so that we can&#xD;
     // remove the item built from it *after* applying the&#xD;
     // production changes.&#xD;
     List&lt;BuildQueue&lt;? extends BuildableType>> built = new ArrayList&lt;>();&#xD;
     for (BuildQueue&lt;?> queue : queues) {&#xD;
         ProductionInfo info = getProductionInfo(queue);&#xD;
         if (info == null) continue;&#xD;
         if (info.getConsumption().isEmpty()) {&#xD;
             BuildableType build = queue.getCurrentlyBuilding();&#xD;
             if (build != null) {&#xD;
                 AbstractGoods needed = new AbstractGoods();&#xD;
                 int complete = getTurnsToComplete(build, needed);&#xD;
                 // Warn if about to fail, or if no useful progress&#xD;
                 // towards completion is possible.&#xD;
                 if (complete == -2 || complete == -1) {&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.MISSING_GOODS,&#xD;
                                          &quot;model.colony.buildableNeedsGoods&quot;,&#xD;
                                          this, build)&#xD;
                             .addName(&quot;%colony%&quot;, getName())&#xD;
                             .addNamed(&quot;%buildable%&quot;, build)&#xD;
                             .addAmount(&quot;%amount%&quot;, needed.getAmount())&#xD;
                             .addNamed(&quot;%goodsType%&quot;, needed.getType()));&#xD;
                 }&#xD;
             }&#xD;
         } else {&#xD;
             // Ready to build something.  FIXME: OO!&#xD;
             BuildableType buildable = csNextBuildable(queue, cs);&#xD;
             if (buildable == null) {&#xD;
                 ; // It was invalid, ignore.&#xD;
             } else if (buildable instanceof UnitType) {&#xD;
                 Unit newUnit = csBuildUnit(queue, random, cs);&#xD;
                 if (newUnit.hasAbility(Ability.BORN_IN_COLONY)) {&#xD;
                     newUnitBorn = true;&#xD;
                 }&#xD;
                 built.add(queue);&#xD;
             } else if (buildable instanceof BuildingType) {&#xD;
                 int unitCount = getUnitCount();&#xD;
                 if (csBuildBuilding(queue, cs)) {&#xD;
                     built.add(queue);&#xD;
                     // Visible change if building changed the&#xD;
                     // stockade level or ejected units.&#xD;
                     tileDirty = ((BuildingType)buildable).isDefenceType()&#xD;
                         || unitCount != getUnitCount();&#xD;
                 }&#xD;
             } else {&#xD;
                 throw new IllegalStateException(&quot;Bogus buildable: &quot;&#xD;
                                                 + buildable);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Apply the accumulated production changes.&#xD;
     // Beware that if you try to build something requiring hammers&#xD;
     // and tools, as soon as one is updated in the colony the&#xD;
     // current production cache is invalidated, and the&#xD;
     // recalculated one will see the build as incomplete due to&#xD;
     // missing the goods just updated.&#xD;
     // Hence the need for a copy of the current production map.&#xD;
     TypeCountMap&lt;GoodsType> productionMap = getProductionMap();&#xD;
     for (GoodsType goodsType : productionMap.keySet()) {&#xD;
         int net = productionMap.getCount(goodsType);&#xD;
         int stored = getGoodsCount(goodsType);&#xD;
         if (net + stored &lt;= 0) {&#xD;
             removeGoods(goodsType, stored);&#xD;
         } else {&#xD;
             addGoods(goodsType, net);&#xD;
         }&#xD;
&#xD;
         // Handle the food situation&#xD;
         if (goodsType == spec.getPrimaryFoodType()) {&#xD;
             // Check for famine when total primary food goes negative.&#xD;
             if (net + stored &lt; 0) {&#xD;
                 if (getUnitCount() > 1) {&#xD;
                     Unit victim = getRandomMember(logger, &quot;Starver&quot;,&#xD;
                                                   getUnitList(), random);&#xD;
                     cs.addRemove(See.only(owner), null,&#xD;
                                  victim);//-vis: safe, all within colony&#xD;
                     victim.dispose();&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.UNIT_LOST,&#xD;
                                          &quot;model.colony.colonistStarved&quot;,&#xD;
                                          this)&#xD;
                             .addName(&quot;%colony%&quot;, getName()));&#xD;
                 } else { // Its dead, Jim.&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.UNIT_LOST,&#xD;
                                          &quot;model.colony.colonyStarved&quot;,&#xD;
                                          this)&#xD;
                             .addName(&quot;%colony%&quot;, getName()));&#xD;
                     owner.csDisposeSettlement(this, cs);&#xD;
                     return;&#xD;
                 }&#xD;
             } else if (net &lt; 0) {&#xD;
                 int turns = stored / -net;&#xD;
                 if (turns &lt;= Colony.FAMINE_TURNS &amp;&amp; !newUnitBorn) {&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                                          &quot;model.colony.famineFeared&quot;,&#xD;
                                          this)&#xD;
                             .addName(&quot;%colony%&quot;, getName())&#xD;
                             .addAmount(&quot;%number%&quot;, turns));&#xD;
                     lb.add(&quot; famine in &quot;, turns,&#xD;
                            &quot; food=&quot;, stored, &quot; production=&quot;, net);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     invalidateCache();&#xD;
&#xD;
     // Now that the goods have been updated it is safe to remove the&#xD;
     // built item from its build queue.&#xD;
     if (!built.isEmpty()) {&#xD;
         for (BuildQueue&lt;? extends BuildableType> queue : built) {&#xD;
             switch (queue.getCompletionAction()) {&#xD;
             case SHUFFLE:&#xD;
                 if (queue.size() > 1) {&#xD;
                     randomShuffle(logger, &quot;Build queue&quot;,&#xD;
                                   queue.getValues(), random);&#xD;
                 }&#xD;
                 break;&#xD;
             case REMOVE_EXCEPT_LAST:&#xD;
                 if (queue.size() == 1&#xD;
                     &amp;&amp; queue.getCurrentlyBuilding() instanceof UnitType) {&#xD;
                     // Repeat last unit&#xD;
                     break;&#xD;
                 }&#xD;
                 // Fall through&#xD;
             case REMOVE:&#xD;
             default:&#xD;
                 queue.remove(0);&#xD;
                 break;&#xD;
             }&#xD;
             csNextBuildable(queue, cs);&#xD;
         }&#xD;
         tileDirty = true;&#xD;
     }&#xD;
&#xD;
     // Export goods if custom house is built.&#xD;
     // Do not flush price changes yet, as any price change may change&#xD;
     // yet again in csYearlyGoodsAdjust.&#xD;
     if (hasAbility(Ability.EXPORT)) {&#xD;
         LogBuilder lb2 = new LogBuilder(64);&#xD;
         lb2.add(&quot; &quot;);&#xD;
         lb2.mark();&#xD;
         for (Goods goods : getCompactGoods()) {&#xD;
             GoodsType type = goods.getType();&#xD;
             ExportData data = getExportData(type);&#xD;
             if (!data.getExported()&#xD;
                 || !owner.canTrade(goods.getType(), Market.Access.CUSTOM_HOUSE)) continue;&#xD;
             int amount = goods.getAmount() - data.getExportLevel();&#xD;
             if (amount &lt;= 0) continue;&#xD;
             int oldGold = owner.getGold();&#xD;
             int marketAmount = owner.sell(container, type, amount);&#xD;
             if (marketAmount > 0) {&#xD;
                 owner.addExtraTrade(new AbstractGoods(type, marketAmount));&#xD;
             }&#xD;
             StringTemplate st = StringTemplate.template(&quot;model.colony.customs.saleData&quot;)&#xD;
                 .addAmount(&quot;%amount%&quot;, amount)&#xD;
                 .addNamed(&quot;%goods%&quot;, type)&#xD;
                 .addAmount(&quot;%gold%&quot;, (owner.getGold() - oldGold));&#xD;
             lb2.add(Messages.message(st), &quot;, &quot;);&#xD;
         }&#xD;
         if (lb2.grew()) {&#xD;
             lb2.shrink(&quot;, &quot;);&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,&#xD;
                                  &quot;model.colony.customs.sale&quot;, this)&#xD;
                     .addName(&quot;%colony%&quot;, getName())&#xD;
                     .addName(&quot;%data%&quot;, lb2.toString()));&#xD;
             cs.addPartial(See.only(owner), owner, &quot;gold&quot;);&#xD;
             lb.add(lb2.toString());&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Throw away goods there is no room for, and warn about&#xD;
     // levels that will be exceeded next turn&#xD;
     int limit = getWarehouseCapacity();&#xD;
     int adjustment = limit / GoodsContainer.CARGO_SIZE;&#xD;
     for (Goods goods : getCompactGoods()) {&#xD;
         GoodsType type = goods.getType();&#xD;
         if (!type.isStorable()) continue;&#xD;
         ExportData exportData = getExportData(type);&#xD;
         int low = exportData.getLowLevel() * adjustment;&#xD;
         int high = exportData.getHighLevel() * adjustment;&#xD;
         int amount = goods.getAmount();&#xD;
         int oldAmount = container.getOldGoodsCount(type);&#xD;
&#xD;
         if (amount &lt; low &amp;&amp; oldAmount >= low&#xD;
             &amp;&amp; !(type == spec.getPrimaryFoodType() &amp;&amp; newUnitBorn)) {&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.WAREHOUSE_CAPACITY,&#xD;
                                  &quot;model.colony.warehouseEmpty&quot;,&#xD;
                                  this, type)&#xD;
                           .addNamed(&quot;%goods%&quot;, type)&#xD;
                           .addAmount(&quot;%level%&quot;, low)&#xD;
                           .addName(&quot;%colony%&quot;, getName()));&#xD;
             continue;&#xD;
         }&#xD;
         if (type.limitIgnored()) continue;&#xD;
&#xD;
         String messageId = null;&#xD;
         int waste = 0;&#xD;
         if (amount > limit) {&#xD;
             // limit has been exceeded&#xD;
             waste = amount - limit;&#xD;
             container.removeGoods(type, waste);&#xD;
             messageId = &quot;model.colony.warehouseWaste&quot;;&#xD;
         } else if (amount == limit &amp;&amp; oldAmount &lt; limit) {&#xD;
             // limit has been reached during this turn&#xD;
             messageId = &quot;model.colony.warehouseOverfull&quot;;&#xD;
         } else if (amount > high &amp;&amp; oldAmount &lt;= high) {&#xD;
             // high-water-mark has been reached this turn&#xD;
             messageId = &quot;model.colony.warehouseFull&quot;;&#xD;
         }&#xD;
         if (messageId != null) {&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.WAREHOUSE_CAPACITY,&#xD;
                                  messageId, this, type)&#xD;
                     .addNamed(&quot;%goods%&quot;, type)&#xD;
                     .addAmount(&quot;%waste%&quot;, waste)&#xD;
                     .addAmount(&quot;%level%&quot;, high)&#xD;
                     .addName(&quot;%colony%&quot;, getName()));&#xD;
         }&#xD;
&#xD;
         // No problem this turn, but what about the next?&#xD;
         if (!(exportData.getExported()&#xD;
               &amp;&amp; hasAbility(Ability.EXPORT)&#xD;
               &amp;&amp; owner.canTrade(type, Market.Access.CUSTOM_HOUSE))&#xD;
             &amp;&amp; amount &lt;= limit) {&#xD;
             int loss = amount + getNetProductionOf(type) - limit;&#xD;
             if (loss > 0) {&#xD;
                 cs.addMessage(See.only(owner),&#xD;
                     new ModelMessage(ModelMessage.MessageType.WAREHOUSE_CAPACITY,&#xD;
                                      &quot;model.colony.warehouseSoonFull&quot;,&#xD;
                                      this, type)&#xD;
                         .addNamed(&quot;%goods%&quot;, goods)&#xD;
                         .addName(&quot;%colony%&quot;, getName())&#xD;
                         .addAmount(&quot;%amount%&quot;, loss));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Check for free buildings&#xD;
     for (BuildingType buildingType : spec.getBuildingTypeList()) {&#xD;
         if (isAutomaticBuild(buildingType)) {&#xD;
             buildBuilding(new ServerBuilding(getGame(), this,&#xD;
                                              buildingType));//-til&#xD;
         }&#xD;
     }&#xD;
     checkBuildQueueIntegrity(true);&#xD;
&#xD;
     // If a build queue is empty, check that we are not producing&#xD;
     // any goods types useful for BuildableTypes, except if that&#xD;
     // type is the input to some other form of production.  (Note:&#xD;
     // isBuildingMaterial is also true for goods used to produce&#xD;
     // role-equipment, hence neededForBuildableType).  Such&#xD;
     // production probably means we forgot to reset the build&#xD;
     // queue.  Thus, if hammers are being produced it is worth&#xD;
     // warning about, but not if producing tools.&#xD;
     for (BuildQueue&lt;?> queue : queues) {&#xD;
         if (queue.isEmpty()) {&#xD;
             for (GoodsType g : spec.getGoodsTypeList()) {&#xD;
                 if (g.isBuildingMaterial()&#xD;
                     &amp;&amp; !g.isRawMaterial()&#xD;
                     &amp;&amp; !g.isBreedable()&#xD;
                     &amp;&amp; getAdjustedNetProductionOf(g) > 0&#xD;
                     &amp;&amp; neededForBuildableType(g)) {&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.BUILDING_COMPLETED,&#xD;
                                          &quot;model.colony.notBuildingAnything&quot;,&#xD;
                                          this)&#xD;
                             .addName(&quot;%colony%&quot;, getName()));&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Update SoL.&#xD;
     updateSoL();&#xD;
     if (sonsOfLiberty / 10 != oldSonsOfLiberty / 10) {&#xD;
         cs.addMessage(See.only(owner),&#xD;
             new ModelMessage(ModelMessage.MessageType.SONS_OF_LIBERTY,&#xD;
                              (sonsOfLiberty > oldSonsOfLiberty)&#xD;
                              ? &quot;model.colony.soLIncrease&quot;&#xD;
                              : &quot;model.colony.soLDecrease&quot;,&#xD;
                              this, spec.getGoodsType(&quot;model.goods.bells&quot;))&#xD;
                 .addAmount(&quot;%oldSoL%&quot;, oldSonsOfLiberty)&#xD;
                 .addAmount(&quot;%newSoL%&quot;, sonsOfLiberty)&#xD;
                 .addName(&quot;%colony%&quot;, getName()));&#xD;
&#xD;
         ModelMessage govMgtMessage = checkForGovMgtChangeMessage();&#xD;
         if (govMgtMessage != null) {&#xD;
             cs.addMessage(See.only(owner), govMgtMessage);&#xD;
         }&#xD;
     }&#xD;
     updateProductionBonus();&#xD;
     // We have to wait for the production bonus to stabilize&#xD;
     // before checking for completion of training.  This is a rare&#xD;
     // case so it is not worth reordering the work location calls&#xD;
     // to csNewTurn.&#xD;
     for (WorkLocation workLocation : getCurrentWorkLocations()) {&#xD;
         if (workLocation.canTeach()) {&#xD;
             ServerBuilding building = (ServerBuilding)workLocation;&#xD;
             for (Unit teacher : building.getUnitList()) {&#xD;
                 building.csCheckTeach(teacher, cs);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Try to update minimally.&#xD;
     if (tileDirty) {&#xD;
         cs.add(See.perhaps(), tile);&#xD;
     } else {&#xD;
         cs.add(See.only(owner), this);&#xD;
     }&#xD;
     lb.add(&quot;, &quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVj-IFJREeiyW7NaN4qWdw" name="neededForBuildableType" specification="_QTmPQlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVj-IVJREeiyW7NaN4qWdw" name="goodsType" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-IlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     List&lt;BuildableType> buildables = new ArrayList&lt;>();&#xD;
     buildables.addAll(spec.getBuildingTypeList());&#xD;
     buildables.addAll(spec.getUnitTypesWithoutAbility(Ability.PERSON));&#xD;
     return any(buildables, bt -> canBuild(bt)&#xD;
         &amp;&amp; AbstractGoods.containsType(goodsType, bt.getRequiredGoods()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVj-I1JREeiyW7NaN4qWdw" name="csBuildUnit" specification="_QTmPRVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVj-JFJREeiyW7NaN4qWdw" name="buildQueue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-JVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-JlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-J1JREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>UnitType type = (UnitType)buildQueue.getCurrentlyBuilding();&#xD;
     Unit unit = new ServerUnit(getGame(), getTile(), owner,&#xD;
                                type);//-vis: safe, within colony&#xD;
     if (unit.hasAbility(Ability.BORN_IN_COLONY)) {&#xD;
         cs.addMessage(See.only((ServerPlayer) owner),&#xD;
                       new ModelMessage(ModelMessage.MessageType.UNIT_ADDED,&#xD;
                                        &quot;model.colony.newColonist&quot;,&#xD;
                                        this, unit)&#xD;
                       .addName(&quot;%colony%&quot;, getName()));&#xD;
     } else {&#xD;
         unit.setName(owner.getNameForUnit(type, random));&#xD;
         cs.addMessage(See.only((ServerPlayer) owner),&#xD;
                       new ModelMessage(ModelMessage.MessageType.UNIT_ADDED,&#xD;
                                        &quot;model.colony.unitReady&quot;,&#xD;
                                        this, unit)&#xD;
                       .addName(&quot;%colony%&quot;, getName())&#xD;
                       .addStringTemplate(&quot;%unit%&quot;, unit.getLabel()));&#xD;
     }&#xD;
&#xD;
     logger.info(&quot;New unit in &quot; + getName() + &quot;: &quot; + type.getSuffix());&#xD;
     return unit;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVj-KFJREeiyW7NaN4qWdw" name="ejectUnits" specification="_QTndYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVj-KVJREeiyW7NaN4qWdw" name="workLocation" type="_QRxDQVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-KlJREeiyW7NaN4qWdw" name="units" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-K1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (units == null || units.isEmpty()) return false;&#xD;
     unit: for (Unit u : units) {&#xD;
         for (WorkLocation wl : getAvailableWorkLocations()) {&#xD;
             if (wl == workLocation || !wl.canAdd(u)) continue;&#xD;
             u.setLocation(wl);//-vis: safe/colony&#xD;
             continue unit;&#xD;
         }&#xD;
         u.setLocation(getTile());//-vis: safe/colony&#xD;
     }&#xD;
     if (getOwner().isAI()) {&#xD;
         firePropertyChange(REARRANGE_WORKERS, true, false);&#xD;
     }&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVj-LFJREeiyW7NaN4qWdw" name="csBuildBuilding" specification="_QToEcVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVj-LVJREeiyW7NaN4qWdw" name="buildQueue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-LlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-L1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>BuildingType type = (BuildingType) buildQueue.getCurrentlyBuilding();&#xD;
     Tile copied = getTile().getTileToCache();&#xD;
     BuildingType from = type.getUpgradesFrom();&#xD;
     boolean success;&#xD;
     if (from == null) {&#xD;
         success = buildBuilding(new ServerBuilding(getGame(), this, type));//-til&#xD;
     } else {&#xD;
         Building building = getBuilding(from);&#xD;
         List&lt;Unit> eject = building.upgrade();//-til&#xD;
         success = eject != null;&#xD;
         if (success) {&#xD;
             ejectUnits(building, eject);//-til&#xD;
             if (!eject.isEmpty()) getTile().cacheUnseen(copied);//+til&#xD;
         } else {&#xD;
             cs.addMessage(See.only((ServerPlayer)owner),&#xD;
                           getUnbuildableMessage(type));&#xD;
         }&#xD;
     }&#xD;
     if (success) {&#xD;
         cs.addMessage(See.only((ServerPlayer) owner),&#xD;
             new ModelMessage(ModelMessage.MessageType.BUILDING_COMPLETED,&#xD;
                              &quot;model.colony.buildingReady&quot;, this)&#xD;
                 .addName(&quot;%colony%&quot;, getName())&#xD;
                 .addNamed(&quot;%building%&quot;, type));&#xD;
         if (owner.isAI()) {&#xD;
             firePropertyChange(REARRANGE_WORKERS, true, false);&#xD;
         }&#xD;
         logger.info(&quot;New building in &quot; + getName()&#xD;
             + &quot;: &quot; + type.getSuffix());&#xD;
     }&#xD;
     return success;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVj-MFJREeiyW7NaN4qWdw" name="csNextBuildable" specification="_QTorgVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVj-MVJREeiyW7NaN4qWdw" name="queue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-MlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVj-M1JREeiyW7NaN4qWdw" type="_QRrjslJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Specification spec = getSpecification();&#xD;
     ServerPlayer owner = (ServerPlayer) getOwner();&#xD;
     BuildableType buildable;&#xD;
     boolean invalidate = false;&#xD;
&#xD;
     while ((buildable = queue.getCurrentlyBuilding()) != null) {&#xD;
         switch (getNoBuildReason(buildable, null)) {&#xD;
         case LIMIT_EXCEEDED:&#xD;
             // Expected when a player builds its last available wagon&#xD;
             // and there is nothing else in the build queue.&#xD;
             break;&#xD;
         case NONE:&#xD;
             return buildable;&#xD;
         case NOT_BUILDING:&#xD;
             for (GoodsType goodsType : spec.getGoodsTypeList()) {&#xD;
                 if (goodsType.isBuildingMaterial()&#xD;
                     &amp;&amp; !goodsType.isStorable()&#xD;
                     &amp;&amp; getTotalProductionOf(goodsType) > 0) {&#xD;
                     // Production is idle&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                                          &quot;model.colony.cannotBuild&quot;,&#xD;
                                          this)&#xD;
                             .addName(&quot;%colony%&quot;, getName()));&#xD;
                 }&#xD;
             }&#xD;
             return null;&#xD;
             &#xD;
         case POPULATION_TOO_SMALL:&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                                  &quot;model.colony.buildNeedPop&quot;,&#xD;
                                  this)&#xD;
                     .addName(&quot;%colony%&quot;, getName())&#xD;
                     .addNamed(&quot;%building%&quot;, buildable));&#xD;
             break;&#xD;
         default: // Are there other warnings to send?&#xD;
             logger.warning(&quot;Unexpected build failure at &quot; + getName()&#xD;
                 + &quot; for &quot; + buildable&#xD;
                 + &quot;: &quot; + getNoBuildReason(buildable, null));&#xD;
             cs.addMessage(See.only(owner),&#xD;
                           getUnbuildableMessage(buildable));&#xD;
             break;&#xD;
         }&#xD;
         queue.remove(0);&#xD;
         invalidate = true;&#xD;
     }&#xD;
     if (invalidate) invalidateCache();&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVklMFJREeiyW7NaN4qWdw" name="csEvictUsers" specification="_QTpSkVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVklMVJREeiyW7NaN4qWdw" name="enemyUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklMlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer serverPlayer = (ServerPlayer)getOwner();&#xD;
     Tile tile = enemyUnit.getTile();&#xD;
     ServerColonyTile ct = (ServerColonyTile)getColonyTile(tile);&#xD;
     if (ct == null) return;&#xD;
     Tile colonyTile = ct.getColony().getTile();&#xD;
     Tile copied = colonyTile.getTileToCache();&#xD;
     if (!ejectUnits(ct, ct.getUnitList())) return;//-til&#xD;
     colonyTile.cacheUnseen(copied);//+til&#xD;
     cs.addMessage(See.only(serverPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                          &quot;model.colony.workersEvicted&quot;, this, this)&#xD;
             .addName(&quot;%colony%&quot;, getName())&#xD;
             .addStringTemplate(&quot;%location%&quot;, tile.getLocationLabel())&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, enemyUnit.getLabel()));&#xD;
     cs.add(See.only(serverPlayer), ct);&#xD;
     cs.add(See.perhaps(), getTile()); // Colony size might have changed&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVklM1JREeiyW7NaN4qWdw" name="csChangeOwner" specification="_QTp5oFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVklNFJREeiyW7NaN4qWdw" name="newOwner" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklNVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklNlJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVklN1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final ServerPlayer owner = (ServerPlayer)getOwner();&#xD;
&#xD;
     for (Tile t : getOwnedTiles()) t.cacheUnseen(newOwner);//+til&#xD;
&#xD;
     changeOwner(newOwner);//-vis(both),-til&#xD;
&#xD;
     ChangeType change = (newOwner.isUndead()) ? ChangeType.UNDEAD&#xD;
         : ChangeType.CAPTURE;&#xD;
     List&lt;Unit> units = getUnitList();&#xD;
     units.addAll(getTile().getUnitList());&#xD;
     for (Unit u : units) {//-vis(both)&#xD;
         owner.csChangeOwner(u, newOwner, change, null, cs);&#xD;
     }&#xD;
     cs.addRemoves(See.only(owner), this, units);&#xD;
&#xD;
     // Disable all exports&#xD;
     for (ExportData exportDatum : exportData.values()) {&#xD;
         exportDatum.setExported(false);&#xD;
     }&#xD;
&#xD;
     // Clear the build queue&#xD;
     buildQueue.clear();&#xD;
&#xD;
     // Add free buildings from new owner&#xD;
     for (BuildingType bt : newOwner.getFreeBuildingTypes()) {&#xD;
         csFreeBuilding(bt, cs);&#xD;
     }&#xD;
&#xD;
     // Changing the owner might alter bonuses applied by founding fathers:&#xD;
     updateSoL();&#xD;
     updateProductionBonus();&#xD;
     return newOwner.exploreForSettlement(this);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVklOFJREeiyW7NaN4qWdw" name="csFreeBuilding" specification="_QTqgsFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVklOVJREeiyW7NaN4qWdw" name="type" type="_QRjn4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklOlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (canBuild(type)) {&#xD;
         final ServerPlayer owner = (ServerPlayer)getOwner();&#xD;
         buildBuilding(new ServerBuilding(getGame(), this, type));//-til&#xD;
         checkBuildQueueIntegrity(true);&#xD;
         cs.add(See.only(owner), this);&#xD;
         if (owner.isAI()) {&#xD;
             firePropertyChange(Colony.REARRANGE_WORKERS, true, false);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVklO1JREeiyW7NaN4qWdw" name="buildBuilding" specification="_QTqgs1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVklPFJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklPVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>net.sf.freecol.common.debug.FreeColDebugger.debugLog(&quot;BUILD &quot; + building + &quot;\n&quot; +net.sf.freecol.common.debug.FreeColDebugger.stackTraceToString());&#xD;
     Tile copied = (building.getType().isDefenceType())&#xD;
         ? getTile().getTileToCache() : null;&#xD;
     if (!addBuilding(building)) return false;&#xD;
     getTile().cacheUnseen(copied);&#xD;
     invalidateCache();&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVklPlJREeiyW7NaN4qWdw" name="csEquipForRole" specification="_QTrHwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVklP1JREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklQFJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklQVJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVklQlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklQ1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVklRFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>boolean ret = equipForRole(unit, role, roleCount);&#xD;
&#xD;
     if (ret) {&#xD;
         if (unit.isOnCarrier()) unit.setMovesLeft(0);&#xD;
         Tile tile = getTile();&#xD;
         tile.cacheUnseen();//+til&#xD;
         unit.setLocation(tile);&#xD;
         cs.add(See.perhaps(), tile);&#xD;
     }&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlMQFJREeiyW7NaN4qWdw" name="csAddConvert" specification="_QTru0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlMQVJREeiyW7NaN4qWdw" name="brave" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlMQlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (brave == null) return;&#xD;
     ServerPlayer newOwner = (ServerPlayer)getOwner();&#xD;
     ServerPlayer oldOwner = (ServerPlayer)brave.getOwner();&#xD;
     if (oldOwner.csChangeOwner(brave, newOwner, ChangeType.CONVERSION, &#xD;
                                getTile(), cs)) { //-vis(other)&#xD;
         brave.changeRole(getSpecification().getDefaultRole(), 0);&#xD;
         brave.setMovesLeft(0);&#xD;
         brave.setState(Unit.UnitState.ACTIVE);&#xD;
         cs.addDisappear(newOwner, tile, brave);&#xD;
         cs.add(See.only(newOwner), getTile());&#xD;
         StringTemplate nation = oldOwner.getNationLabel();&#xD;
         cs.addMessage(See.only(newOwner),&#xD;
             new ModelMessage(ModelMessage.MessageType.UNIT_ADDED,&#xD;
                             &quot;model.colony.newConvert&quot;, brave)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, nation)&#xD;
                 .addName(&quot;%colony%&quot;, getName()));&#xD;
         newOwner.invalidateCanSeeTiles();//+vis(other)&#xD;
         logger.fine(&quot;Convert at &quot; + getName() + &quot; for &quot; + getName());&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlMQ1JREeiyW7NaN4qWdw" name="destroyBuilding" specification="_QTru01JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlMRFJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlMRVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Tile copied = (building.getType().isDefenceType())&#xD;
         ? getTile().getTileToCache() : null;&#xD;
     if (!removeBuilding(building)) return false;&#xD;
     getTile().cacheUnseen(copied);&#xD;
     invalidateCache();&#xD;
     checkBuildQueueIntegrity(true);&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlMRlJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_P_5QIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlMR1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverColony&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_P_5QIFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVlMRlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_P_5QIVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTkaEFJREeiyW7NaN4qWdw" name="ServerColony" method="_QVjXElJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTlBIFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTlBIVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWCfTFJREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTkaEVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTkaElJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTlBIlJREeiyW7NaN4qWdw" type="_P_2z4FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTlBI1JREeiyW7NaN4qWdw" name="ServerColony" method="_QVjXFlJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTlBKFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTlBKVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDGUFJREeiyW7NaN4qWdw">
                    <body>Creates a new ServerColony.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this object belongs.&#xD;
     * @param owner The &lt;code>Player&lt;/code> owning this &lt;code>Colony&lt;/code>.&#xD;
     * @param name The name of the new &lt;code>Colony&lt;/code>.&#xD;
     * @param tile The location of the &lt;code>Colony&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTlBJFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTlBJVJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTlBJlJREeiyW7NaN4qWdw" name="name">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTlBJ1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTlBKlJREeiyW7NaN4qWdw" type="_P_2z4FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTloMFJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVjXHFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTloMVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTloMlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTloM1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTmPQlJREeiyW7NaN4qWdw" name="neededForBuildableType" visibility="private" method="_QVj-IFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGUVJREeiyW7NaN4qWdw">
                    <body>Is a goods type needed for a buildable that this colony could&#xD;
     * be building.&#xD;
     *&#xD;
     * @param goodsType The &lt;code>GoodsType&lt;/code> to check.&#xD;
     * @return True if the goods could be used to build something.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTmPQ1JREeiyW7NaN4qWdw" name="goodsType" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTmPRFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTmPRVJREeiyW7NaN4qWdw" name="csBuildUnit" visibility="private" method="_QVj-I1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGUlJREeiyW7NaN4qWdw">
                    <body>Build a unit from a build queue.&#xD;
     *&#xD;
     * @param buildQueue The &lt;code>BuildQueue&lt;/code> to find the unit in.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return The unit that was built.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTm2UFJREeiyW7NaN4qWdw" name="buildQueue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTm2UVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTm2UlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTm2U1JREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTndYFJREeiyW7NaN4qWdw" name="ejectUnits" method="_QVj-KFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGU1JREeiyW7NaN4qWdw">
                    <body>Eject units to any available work location.&#xD;
     *&#xD;
     * Called on building type changes, see below and&#xD;
     * @see ServerPlayer#csDamageBuilding&#xD;
     *&#xD;
     * -til: Might change the visible colony size.&#xD;
     *&#xD;
     * @param workLocation The &lt;code>WorkLocation&lt;/code> to eject from.&#xD;
     * @param units A list of &lt;code>Unit&lt;/code>s to eject.&#xD;
     * @return True if units were ejected.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTndYVJREeiyW7NaN4qWdw" name="workLocation" type="_QRxDQVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTndYlJREeiyW7NaN4qWdw" name="units" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTndY1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QToEcVJREeiyW7NaN4qWdw" name="csBuildBuilding" visibility="private" method="_QVj-LFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGVFJREeiyW7NaN4qWdw">
                    <body>Builds a building from a build queue.&#xD;
     *&#xD;
     * @param buildQueue The &lt;code>BuildQueue&lt;/code> to build from.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the build succeeded.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QToEclJREeiyW7NaN4qWdw" name="buildQueue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QToEc1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QToEdFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTorgVJREeiyW7NaN4qWdw" name="csNextBuildable" visibility="private" method="_QVj-MFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGVVJREeiyW7NaN4qWdw">
                    <body>Removes a buildable from a build queue, and updates the queue so that&#xD;
     * a valid buildable is now being built if possible.&#xD;
     *&#xD;
     * @param queue The &lt;code>BuildQueue&lt;/code> to update.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return The next buildable that can be built, or null if nothing.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTorglJREeiyW7NaN4qWdw" name="queue" type="_QRrjsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTorg1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTorhFJREeiyW7NaN4qWdw" type="_QRrjslJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTpSkVJREeiyW7NaN4qWdw" name="csEvictUsers" method="_QVklMFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGVlJREeiyW7NaN4qWdw">
                    <body>Evict the users from a tile used by this colony, due to military&#xD;
     * action from another unit.&#xD;
     *&#xD;
     * @param enemyUnit The &lt;code>Unit&lt;/code> that has moved in.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTpSklJREeiyW7NaN4qWdw" name="enemyUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTpSk1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTp5oFJREeiyW7NaN4qWdw" name="csChangeOwner" method="_QVklM1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGV1JREeiyW7NaN4qWdw">
                    <body>Change the owner of this colony.&#xD;
     *&#xD;
     * -vis: Owner and new owner&#xD;
     *&#xD;
     * @param newOwner The new owning &lt;code>ServerPlayer&lt;/code>.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return A set of newly explored &lt;code>Tile&lt;/code>s as a result of the&#xD;
     *     ownership change.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTp5oVJREeiyW7NaN4qWdw" name="newOwner" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTp5olJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTp5o1JREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QTp5pFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTqgsFJREeiyW7NaN4qWdw" name="csFreeBuilding" method="_QVklOFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGWFJREeiyW7NaN4qWdw">
                    <body>Add a free building to this colony.&#xD;
     *&#xD;
     * Triggered by election of laSalle and colony capture by a player&#xD;
     * with laSalle.&#xD;
     *&#xD;
     * @param type The &lt;code>BuildingType&lt;/code> to add.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTqgsVJREeiyW7NaN4qWdw" name="type" type="_QRjn4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTqgslJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTqgs1JREeiyW7NaN4qWdw" name="buildBuilding" method="_QVklO1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGWVJREeiyW7NaN4qWdw">
                    <body>Build a new building in this colony.&#xD;
     *&#xD;
     * @param building The &lt;code>Building&lt;/code> to build.&#xD;
     * @return True if the building was built.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTqgtFJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTqgtVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTrHwFJREeiyW7NaN4qWdw" name="csEquipForRole" method="_QVklPlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGWlJREeiyW7NaN4qWdw">
                    <body>Equip a unit for a specific role.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> to equip.&#xD;
     * @param role The &lt;code>Role&lt;/code> to equip for.&#xD;
     * @param roleCount The role count.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the equipping succeeds.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTrHwVJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTrHwlJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTrHw1JREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTrHxFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTrHxVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTrHxlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTru0FJREeiyW7NaN4qWdw" name="csAddConvert" method="_QVlMQFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGW1JREeiyW7NaN4qWdw">
                    <body>Add a new convert to this colony.&#xD;
     *&#xD;
     * @param brave The convert &lt;code>Unit&lt;/code>.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTru0VJREeiyW7NaN4qWdw" name="brave" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTru0lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTru01JREeiyW7NaN4qWdw" name="destroyBuilding" method="_QVlMQ1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGXFJREeiyW7NaN4qWdw">
                    <body>Destroy an existing building in this colony.&#xD;
     *&#xD;
     * @param building The &lt;code>Building&lt;/code> to destroy.&#xD;
     * @return True if the building was destroyed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTru1FJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTru1VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_P_-vsFJREeiyW7NaN4qWdw" name="ServerColonyTile">
                <ownedComment xmi:id="_QWDGXVJREeiyW7NaN4qWdw">
                  <body>The server version of a colony tile.</body>
                </ownedComment>
                <generalization xmi:id="_QTuyI1JREeiyW7NaN4qWdw" general="_QRsKwVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVRqQFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWcH4VJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVRqQVJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerColonyTile.class.getName())"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QR2i0lJREeiyW7NaN4qWdw" client="_P_-vsFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlzUFJREeiyW7NaN4qWdw" name="ServerColonyTile" specification="_QTsV4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlzUVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzUlJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVlzU1JREeiyW7NaN4qWdw" type="_P_-vsFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlzVFJREeiyW7NaN4qWdw" name="ServerColonyTile" specification="_QTs881JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlzVVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzVlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzV1JREeiyW7NaN4qWdw" name="workTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzWFJREeiyW7NaN4qWdw" type="_P_-vsFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, colony, workTile);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlzWVJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QTtkAVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlzWlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzW1JREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzXFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Colony colony = getColony();&#xD;
     ServerPlayer owner = (ServerPlayer)colony.getOwner();&#xD;
&#xD;
     Tile workTile = getWorkTile();&#xD;
     if (!isColonyCenterTile() &amp;&amp; !isEmpty() &amp;&amp; canBeWorked()) {&#xD;
         for (Unit unit : getUnitList()) {&#xD;
             Resource resource = expendResource(workTile, unit.getWorkType(),&#xD;
                                                unit.getType());&#xD;
             if (resource != null) {&#xD;
                 lb.add(&quot; &quot;, getId(), &quot; exhausted resource &quot;,&#xD;
                        resource.getType().getSuffix());&#xD;
                 cs.addMessage(See.only(owner),&#xD;
                     new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                         &quot;model.colonyTile.resourceExhausted&quot;, colony)&#xD;
                         .addNamed(&quot;%resource%&quot;, resource)&#xD;
                         .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
                 cs.add(See.perhaps(), workTile);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlzXVJREeiyW7NaN4qWdw" name="expendResource" specification="_QTuLE1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVlzXlJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzX1JREeiyW7NaN4qWdw" name="goodsType" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzYFJREeiyW7NaN4qWdw" name="unitType" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVlzYVJREeiyW7NaN4qWdw" type="_QR2i0FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>if (!tile.hasResource()) return null;&#xD;
&#xD;
     Resource resource = tile.getResource();&#xD;
     if (resource.isUnlimited()) return null;&#xD;
&#xD;
     if (resource.useQuantity(goodsType, unitType,&#xD;
                              tile.getPotentialProduction(goodsType, unitType)) == 0) {&#xD;
         tile.cacheUnseen();//+til&#xD;
         tile.removeResource();//-til&#xD;
         return resource;&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVlzYlJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_P__90FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVmaYFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverColonyTile&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_P__90FJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVlzYlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_P__90VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTsV4FJREeiyW7NaN4qWdw" name="ServerColonyTile" method="_QVlzUFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTs88FJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTs88VJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDGXlJREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTsV4VJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTsV4lJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTs88lJREeiyW7NaN4qWdw" type="_P_-vsFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTs881JREeiyW7NaN4qWdw" name="ServerColonyTile" method="_QVlzVFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTs891JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTs8-FJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDGX1JREeiyW7NaN4qWdw">
                    <body>Creates at new ServerColonyTile.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> this object belongs to.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> this object belongs to.&#xD;
     * @param workTile The tile in which this &lt;code>ColonyTile&lt;/code>&#xD;
     *                 represents a &lt;code>WorkLocation&lt;/code> for.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTs89FJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTs89VJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTs89lJREeiyW7NaN4qWdw" name="workTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTtkAFJREeiyW7NaN4qWdw" type="_P_-vsFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTtkAVJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVlzWVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTtkAlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTtkA1JREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTtkBFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTuLE1JREeiyW7NaN4qWdw" name="expendResource" visibility="private" method="_QVlzXVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDGYFJREeiyW7NaN4qWdw">
                    <body>This method is called only when a new turn is beginning.  It&#xD;
     * will reduce the quantity of the bonus &lt;code>Resource&lt;/code>&#xD;
     * that is on the given tile, if any and if applicable.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to check for a resource.&#xD;
     * @param goodsType The &lt;code>GoodsType&lt;/code> the goods type to expend.&#xD;
     * @param unitType The &lt;code>UnitType&lt;/code> doing the production.&#xD;
     * @return The &lt;code>Resource&lt;/code> if it is exhausted by this&#xD;
     *     call (so it can be used in a message), otherwise null.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTuLFFJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTuyIFJREeiyW7NaN4qWdw" name="goodsType" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTuyIVJREeiyW7NaN4qWdw" name="unitType" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTuyIlJREeiyW7NaN4qWdw" type="_QR2i0FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QABzAFJREeiyW7NaN4qWdw" name="ServerEurope">
                <ownedComment xmi:id="_QWDGYVJREeiyW7NaN4qWdw">
                  <body>The server version of Europe.</body>
                </ownedComment>
                <generalization xmi:id="_QT04xVJREeiyW7NaN4qWdw" general="_QR4YAFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVRqQlJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWcu8VJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVRqQ1JREeiyW7NaN4qWdw" value="Logger.getLogger(ServerEurope.class.getName())"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QR6NMFJREeiyW7NaN4qWdw" client="_QABzAFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVmaYVJREeiyW7NaN4qWdw" name="ServerEurope" specification="_QTvZMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVmaYlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVmaY1JREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVmaZFJREeiyW7NaN4qWdw" type="_QABzAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVmaZVJREeiyW7NaN4qWdw" name="ServerEurope" specification="_QTvZNlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVmaZlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVmaZ1JREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVmaaFJREeiyW7NaN4qWdw" type="_QABzAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, owner);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVmaaVJREeiyW7NaN4qWdw" name="equipForRole" specification="_QTwAQ1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVmaalJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVmaa1JREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVmabFJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVmabVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (!unit.roleIsAvailable(role)) return false;&#xD;
&#xD;
     // Get the change in goods&#xD;
     List&lt;AbstractGoods> required = unit.getGoodsDifference(role, roleCount);&#xD;
&#xD;
     // Check the pricing&#xD;
     int price = priceGoods(required);&#xD;
     if (price &lt; 0 || !unit.getOwner().checkGold(price)) return false;&#xD;
&#xD;
     // Sell any excess&#xD;
     final ServerPlayer owner = (ServerPlayer)getOwner();&#xD;
     for (AbstractGoods ag : required) {&#xD;
         if (ag.getAmount() >= 0) continue;&#xD;
         if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {&#xD;
             int rm = owner.sell(null, ag.getType(), -ag.getAmount());&#xD;
             if (rm > 0) {&#xD;
                 owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     // Buy what is needed&#xD;
     for (AbstractGoods ag : required) {&#xD;
         if (ag.getAmount() &lt;= 0) continue;&#xD;
         int m = owner.buy(null, ag.getType(), ag.getAmount());&#xD;
         if (m > 0) {&#xD;
             owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));&#xD;
         }&#xD;
     }&#xD;
&#xD;
     unit.changeRole(role, roleCount);&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnBcFJREeiyW7NaN4qWdw" name="initializeMigration" specification="_QTxOYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnBcVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Specification spec = getGame().getSpecification();&#xD;
     UnitType unitType;&#xD;
&#xD;
     if (spec.hasOption(GameOptions.IMMIGRANTS)) {&#xD;
         UnitListOption option&#xD;
             = (UnitListOption)spec.getOption(GameOptions.IMMIGRANTS);&#xD;
         for (AbstractUnit au : option.getOptionValues()) {&#xD;
             unitType = au.getType(spec);&#xD;
             addRecruitable(au.getType(spec));&#xD;
         }&#xD;
     } else {&#xD;
         // @compat 0.10.3&#xD;
         for (int index = 0;; index++) {&#xD;
             String optionId = &quot;model.option.recruitable.slot&quot; + index;&#xD;
             String unitTypeId;&#xD;
             if (spec.hasOption(optionId)&#xD;
                 &amp;&amp; (unitTypeId = spec.getString(optionId)) != null&#xD;
                 &amp;&amp; (unitType = spec.getUnitType(unitTypeId)) != null&#xD;
                 &amp;&amp; addRecruitable(unitType)) continue;&#xD;
             break; // Failed&#xD;
         }&#xD;
         // end @compat&#xD;
     }&#xD;
&#xD;
     // Fill out to the full amount of recruits if the above failed&#xD;
     List&lt;RandomChoice&lt;UnitType>> recruits = generateRecruitablesList();&#xD;
     do {&#xD;
         unitType = RandomChoice.getWeightedRandom(logger, &quot;Recruits&quot;,&#xD;
                                                   recruits, random);&#xD;
     } while (addRecruitable(unitType));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnBclJREeiyW7NaN4qWdw" name="increaseRecruitmentDifficulty" specification="_QADBIFJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     recruitPrice += spec.getInteger(GameOptions.RECRUIT_PRICE_INCREASE);&#xD;
     recruitLowerCap += spec.getInteger(GameOptions.LOWER_CAP_INCREASE);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnBc1JREeiyW7NaN4qWdw" name="extractRecruitable" specification="_QTxOYlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnBdFJREeiyW7NaN4qWdw" name="slot">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVnBdVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnBdlJREeiyW7NaN4qWdw" type="_QRmEIlJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>// An invalid slot is normal when the player has no control over&#xD;
     // recruit type.&#xD;
     final int count = MigrationType.getMigrantCount();&#xD;
     int index = (MigrationType.specificMigrantSlot(slot))&#xD;
         ? MigrationType.migrantSlotToIndex(slot)&#xD;
         : randomInt(logger, &quot;Choose emigrant&quot;, random, count);&#xD;
     UnitType result = recruitables.get(index);&#xD;
     for (int i = index; i &lt; count-1; i++) {&#xD;
         recruitables.set(i, recruitables.get(i+1));&#xD;
     }&#xD;
     recruitables.set(count-1, RandomChoice.getWeightedRandom(logger,&#xD;
             &quot;Replace recruit&quot;, generateRecruitablesList(), random));&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnBd1JREeiyW7NaN4qWdw" name="generateRecruitablesList" specification="_QADBIVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnBeFJREeiyW7NaN4qWdw" type="_QR5mIVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVnBeVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Player owner = getOwner();&#xD;
     List&lt;RandomChoice&lt;UnitType>> recruits = new ArrayList&lt;>();&#xD;
     for (UnitType unitType : getSpecification().getUnitTypeList()) {&#xD;
         if (unitType.isRecruitable()&#xD;
             &amp;&amp; owner.hasAbility(Ability.CAN_RECRUIT_UNIT, unitType)) {&#xD;
             recruits.add(new RandomChoice&lt;>(unitType,&#xD;
                     unitType.getRecruitProbability()));&#xD;
         }&#xD;
     }&#xD;
     return recruits;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnBelJREeiyW7NaN4qWdw" name="replaceRecruits" specification="_QTx1cVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnBe1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnBfFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;RandomChoice&lt;UnitType>> recruits = generateRecruitablesList();&#xD;
     boolean result = false;&#xD;
     int i = 0;&#xD;
     for (UnitType ut : recruitables) {&#xD;
         if (hasAbility(Ability.CAN_RECRUIT_UNIT, ut)) continue;&#xD;
         UnitType newType = RandomChoice.getWeightedRandom(logger,&#xD;
             &quot;Replace recruit&quot;, recruits, random);&#xD;
         recruitables.set(i, newType);&#xD;
         result = true;&#xD;
         i++;&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnogFJREeiyW7NaN4qWdw" name="generateFountainRecruits" specification="_QTycgFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnogVJREeiyW7NaN4qWdw" name="n">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVnoglJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Game game = getGame();&#xD;
     final Player owner = getOwner();&#xD;
     List&lt;RandomChoice&lt;UnitType>> recruits = generateRecruitablesList();&#xD;
     for (int k = 0; k &lt; n; k++) {&#xD;
         UnitType ut = RandomChoice.getWeightedRandom(logger, &quot;Choose FoY&quot;,&#xD;
                                                      recruits, random);&#xD;
         new ServerUnit(game, this, owner, ut);//-vis: safe, Europe&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnog1JREeiyW7NaN4qWdw" name="increasePrice" specification="_QTycg1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnohFJREeiyW7NaN4qWdw" name="unitType" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnohVJREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     String baseOption = GameOptions.PRICE_INCREASE_PER_TYPE;&#xD;
     String option = (spec.getBoolean(baseOption))&#xD;
         ? &quot;model.option.priceIncrease.&quot; + unitType.getSuffix()&#xD;
         : &quot;model.option.priceIncrease&quot;;&#xD;
     int increase = (spec.hasOption(option)) ? spec.getInteger(option) : 0;&#xD;
     if (increase != 0) {&#xD;
         unitPrices.put(unitType, price + increase);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnohlJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QTzDklJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnoh1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnoiFJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnoiVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>logger.finest(&quot;ServerEurope.csNewTurn, for &quot; + this);&#xD;
&#xD;
     for (Unit unit : getUnitList()) {&#xD;
         if (unit.isNaval() &amp;&amp; unit.isDamaged()) {&#xD;
             ((ServerUnit)unit).csRepairUnit(cs);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVnoilJREeiyW7NaN4qWdw" name="csEquipForRole" specification="_QT0RslJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVnoi1JREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnojFJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnojVJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVnojlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnoj1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVnokFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>boolean ret = equipForRole(unit, role, roleCount);&#xD;
&#xD;
     if (ret) {&#xD;
         ServerPlayer serverPlayer = (ServerPlayer)getOwner();&#xD;
         cs.addPartial(See.only(serverPlayer), serverPlayer, &quot;gold&quot;);&#xD;
         cs.add(See.only(serverPlayer), unit);&#xD;
         serverPlayer.flushExtraTrades(random);&#xD;
         serverPlayer.csFlushMarket(cs);&#xD;
     }&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVoPkFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_QAEPQFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVoPkVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverEurope&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QADBIFJREeiyW7NaN4qWdw" name="increaseRecruitmentDifficulty" method="_QVnBclJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtYVJREeiyW7NaN4qWdw">
                    <body>Increases the base price and lower cap for recruits.</body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_QADBIVJREeiyW7NaN4qWdw" name="generateRecruitablesList" method="_QVnBd1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtY1JREeiyW7NaN4qWdw">
                    <body>Generate a weighted list of unit types recruitable by this player.&#xD;
     *&#xD;
     * @return A weighted list of recruitable unit types.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QADBIlJREeiyW7NaN4qWdw" type="_QR5mIVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QADBI1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAEPQFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVoPkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAE2UFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTvZMFJREeiyW7NaN4qWdw" name="ServerEurope" method="_QVmaYVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTvZM1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTvZNFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDGYlJREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTvZMVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTvZMlJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTvZNVJREeiyW7NaN4qWdw" type="_QABzAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTvZNlJREeiyW7NaN4qWdw" name="ServerEurope" method="_QVmaZVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QTwAQFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QTwAQVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDGY1JREeiyW7NaN4qWdw">
                    <body>Creates a new ServerEurope.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this object belong.&#xD;
     * @param owner The &lt;code>Player&lt;/code> that will be using this object of&#xD;
     *            &lt;code>Europe&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTvZN1JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTvZOFJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTwAQlJREeiyW7NaN4qWdw" type="_QABzAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTwAQ1JREeiyW7NaN4qWdw" name="equipForRole" method="_QVmaaVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTwARFJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTwARVJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTwARlJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTwnUFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTxOYFJREeiyW7NaN4qWdw" name="initializeMigration" method="_QVnBcFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtYFJREeiyW7NaN4qWdw">
                    <body>Generates the initial recruits for this player.  Recruits may&#xD;
     * be determined by the difficulty level, or generated randomly.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTxOYVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTxOYlJREeiyW7NaN4qWdw" name="extractRecruitable" method="_QVnBc1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtYlJREeiyW7NaN4qWdw">
                    <body>Extract the recruitable at a given slot, and replace it with&#xD;
     * the given new recruitable type.&#xD;
     *&#xD;
     * Note that we shift the old units down, because the AI always&#xD;
     * recruits from the lowest slot.&#xD;
     *&#xD;
     * @param slot The slot to recruit with.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @return The recruited &lt;code>UnitType&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTxOY1JREeiyW7NaN4qWdw" name="slot">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTxOZFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTx1cFJREeiyW7NaN4qWdw" type="_QRmEIlJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTx1cVJREeiyW7NaN4qWdw" name="replaceRecruits" method="_QVnBelJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtZFJREeiyW7NaN4qWdw">
                    <body>Replace any non-recruitable recruits.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @return True if any recruit was replaced.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTx1clJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTx1c1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTycgFJREeiyW7NaN4qWdw" name="generateFountainRecruits" method="_QVnogFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtZVJREeiyW7NaN4qWdw">
                    <body>Generate new recruits following a Fountain of Youth discovery.&#xD;
     *&#xD;
     * FIXME: Get rid of this, it is only used because the AI is stupid.&#xD;
     *&#xD;
     * @param n The number of new units.&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTycgVJREeiyW7NaN4qWdw" name="n">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QTycglJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QTycg1JREeiyW7NaN4qWdw" name="increasePrice" method="_QVnog1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtZlJREeiyW7NaN4qWdw">
                    <body>Increases the price for a unit.&#xD;
     *&#xD;
     * @param unitType The &lt;code>UnitType&lt;/code>, trained or purchased&#xD;
     * @param price The current price of the unit</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QTzDkFJREeiyW7NaN4qWdw" name="unitType" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTzDkVJREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QTzDklJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVnohlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QTzDk1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTzqoFJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QTzqoVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT0RslJREeiyW7NaN4qWdw" name="csEquipForRole" method="_QVnoilJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtZ1JREeiyW7NaN4qWdw">
                    <body>Equip a unit for a specific role.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> to equip.&#xD;
     * @param role The &lt;code>Role&lt;/code> to equip for.&#xD;
     * @param roleCount The role count.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the equipping succeeds.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT0Rs1JREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT04wFJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT04wVJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QT04wlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT04w1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT04xFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAH5oFJREeiyW7NaN4qWdw" name="ServerGame">
                <ownedComment xmi:id="_QWDtaFJREeiyW7NaN4qWdw">
                  <body>The server representation of the game.</body>
                </ownedComment>
                <generalization xmi:id="_QT_341JREeiyW7NaN4qWdw" general="_QRkO8lJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVSRUFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWdWAFJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVSRUVJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerGame.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVSRUlJREeiyW7NaN4qWdw" name="lastTime" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVSRU1JREeiyW7NaN4qWdw" value="-1L"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QSFMUFJREeiyW7NaN4qWdw" client="_QAH5oFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVoPklJREeiyW7NaN4qWdw" name="ServerGame" specification="_QT1f0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVoPk1JREeiyW7NaN4qWdw" name="specification" type="_QRvOEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVoPlFJREeiyW7NaN4qWdw" type="_QAH5oFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(specification);&#xD;
&#xD;
     this.combatModel = new SimpleCombatModel();&#xD;
     currentPlayer = null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2oFJREeiyW7NaN4qWdw" name="ServerGame" specification="_QT2G41JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2oVJREeiyW7NaN4qWdw" name="freeColGameObjectListener" type="_QSBh8VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2olJREeiyW7NaN4qWdw" name="xr" type="_QSAT0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2o1JREeiyW7NaN4qWdw" name="specification" type="_QRvOEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2pFJREeiyW7NaN4qWdw" type="_QAH5oFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this(specification);&#xD;
&#xD;
     this.freeColGameObjectListener = freeColGameObjectListener;&#xD;
     this.setGame(this);&#xD;
     readFromXML(xr);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2pVJREeiyW7NaN4qWdw" name="getConnectedPlayers" specification="_QSFMUVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2plJREeiyW7NaN4qWdw" name="serverPlayers" type="_QAyoAFJREeiyW7NaN4qWdw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVo2p1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVo2qFJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVo2qVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return getLivePlayers(null).stream()&#xD;
         .map(p -> (ServerPlayer)p)&#xD;
         .filter(sp -> sp.isConnected()&#xD;
             &amp;&amp; none(serverPlayers, s -> s == sp))&#xD;
         .collect(Collectors.toList());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2qlJREeiyW7NaN4qWdw" name="sendToAll" specification="_QT2t8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2q1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2rFJREeiyW7NaN4qWdw" name="serverPlayers" type="_QAyoAFJREeiyW7NaN4qWdw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVo2rVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;ServerPlayer> live = getConnectedPlayers();&#xD;
     for (ServerPlayer sp : serverPlayers) {&#xD;
         if (!live.contains(sp)) live.add(sp);&#xD;
     }&#xD;
     sendToList(live, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2rlJREeiyW7NaN4qWdw" name="sendToOthers" specification="_QT3VAVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2r1JREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2sFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>sendToList(getConnectedPlayers(serverPlayer), cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2sVJREeiyW7NaN4qWdw" name="sendToList" specification="_QT38EFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2slJREeiyW7NaN4qWdw" name="serverPlayers" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVo2s1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (ServerPlayer s : serverPlayers) s.send(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVo2tFJREeiyW7NaN4qWdw" name="makeServerObject" specification="_QAJHwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVo2tVJREeiyW7NaN4qWdw" name="type">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVo2tlJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVpdsFJREeiyW7NaN4qWdw" type="_QT4jIVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>type = &quot;net.sf.freecol.server.model.&quot;&#xD;
         + type.substring(0,1).toUpperCase() + type.substring(1);&#xD;
     Class&lt;?> c = Class.forName(type);&#xD;
     return c.getConstructor(Game.class, String.class)&#xD;
         .newInstance(this, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVpdsVJREeiyW7NaN4qWdw" name="getServerModelObjects" specification="_QAJu0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVpdslJREeiyW7NaN4qWdw" type="_QAYYUFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVpds1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;ServerModelObject> objs = new ArrayList&lt;>();&#xD;
     for (FreeColGameObject fcgo : getFreeColGameObjects()) {&#xD;
         if (fcgo instanceof ServerModelObject) {&#xD;
             objs.add((ServerModelObject)fcgo);&#xD;
         }&#xD;
     }&#xD;
     return objs;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVpdtFJREeiyW7NaN4qWdw" name="updatePlayers" specification="_QT8NgFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVpdtVJREeiyW7NaN4qWdw" name="players" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ChangeSet cs = new ChangeSet();&#xD;
     for (ServerPlayer sp : players) cs.addPlayer(sp);&#xD;
     sendToAll(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVpdtlJREeiyW7NaN4qWdw" name="getNextId" specification="_QAKV4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVpdt1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>String id = Integer.toString(nextId);&#xD;
     nextId++;&#xD;
     return id;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVpduFJREeiyW7NaN4qWdw" name="randomize" specification="_QT80kVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVpduVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (random != null) NameCache.requireCitiesOfCibola(random);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVpdulJREeiyW7NaN4qWdw" name="checkForWinner" specification="_QAK88FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVpdu1JREeiyW7NaN4qWdw" type="_QRunAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     if (spec.getBoolean(GameOptions.VICTORY_DEFEAT_REF)) {&#xD;
         Player winner = find(getLiveEuropeanPlayers(null),&#xD;
             p -> p.getPlayerType() == Player.PlayerType.INDEPENDENT);&#xD;
         if (winner != null) return winner;&#xD;
     }&#xD;
     if (spec.getBoolean(GameOptions.VICTORY_DEFEAT_EUROPEANS)) {&#xD;
         List&lt;Player> winners = getLiveEuropeanPlayers(null).stream()&#xD;
             .filter(p -> !p.isREF())&#xD;
             .collect(Collectors.toList());&#xD;
         if (winners.size() == 1) return winners.get(0);&#xD;
     }&#xD;
     if (spec.getBoolean(GameOptions.VICTORY_DEFEAT_HUMANS)) {&#xD;
         List&lt;Player> winners = getLiveEuropeanPlayers(null).stream()&#xD;
             .filter(p -> !p.isAI())&#xD;
             .collect(Collectors.toList());&#xD;
         if (winners.size() == 1) return winners.get(0);&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqEwFJREeiyW7NaN4qWdw" name="isNextPlayerInNewTurn" specification="_QAK88VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqEwVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Player nextPlayer = getNextPlayer();&#xD;
     return players.indexOf(currentPlayer) > players.indexOf(nextPlayer)&#xD;
         || currentPlayer == nextPlayer;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqEwlJREeiyW7NaN4qWdw" name="csNextTurn" specification="_QT9boVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqEw1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>String duration = null;&#xD;
     long now = new Date().getTime();&#xD;
     if (lastTime >= 0) {&#xD;
         duration = &quot;, previous turn duration = &quot; + (now - lastTime) + &quot;ms&quot;;&#xD;
     }&#xD;
     lastTime = now;&#xD;
&#xD;
     TransactionSession.completeAll(cs);&#xD;
     setTurn(getTurn().next());&#xD;
     logger.finest(&quot;Turn is now &quot; + getTurn() + duration);&#xD;
     cs.addTrivial(See.all(), &quot;newTurn&quot;, ChangePriority.CHANGE_NORMAL,&#xD;
                   &quot;turn&quot;, Integer.toString(getTurn().getNumber()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqExFJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QT-CsFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqExVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqExlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqEx1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>lb.add(&quot;GAME &quot;, getId(), &quot;, &quot;);&#xD;
     for (Player player : getLivePlayers(null)) {&#xD;
         ((ServerPlayer)player).csNewTurn(random, lb, cs);&#xD;
     }&#xD;
&#xD;
     final Specification spec = getSpecification();&#xD;
     Event succession = spec.getEvent(&quot;model.event.spanishSuccession&quot;);&#xD;
     if (succession != null &amp;&amp; !getSpanishSuccession()) {&#xD;
         ServerPlayer loser = csSpanishSuccession(cs, lb, succession);&#xD;
         // TODO: send update to loser.  It will not see anything&#xD;
         // because it is no longer a live player.&#xD;
         // if (loser != null) sendElement(loser, cs);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqEyFJREeiyW7NaN4qWdw" name="csSpanishSuccession" specification="_QT-pwlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqEyVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqEylJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqEy1JREeiyW7NaN4qWdw" name="event" type="_QSAT01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqEzFJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Limit yearLimit&#xD;
         = event.getLimit(&quot;model.limit.spanishSuccession.year&quot;);&#xD;
     if (!yearLimit.evaluate(this)) return null;&#xD;
&#xD;
     Limit weakLimit&#xD;
         = event.getLimit(&quot;model.limit.spanishSuccession.weakestPlayer&quot;);&#xD;
     Limit strongLimit&#xD;
         = event.getLimit(&quot;model.limit.spanishSuccession.strongestPlayer&quot;);&#xD;
     Map&lt;Player, Integer> scores = new HashMap&lt;>();&#xD;
     boolean ready = false;&#xD;
     for (Player player : getLiveEuropeanPlayers(null)) {&#xD;
         if (player.isREF()) continue;&#xD;
         ready |= strongLimit.evaluate(player);&#xD;
         // Human players can trigger the event, but only transfer assets&#xD;
         // between AI players.&#xD;
         if (player.isAI()) { &#xD;
             scores.put(player, player.getSpanishSuccessionScore());&#xD;
         }&#xD;
     }&#xD;
     if (!ready) return null; // No player meets the support limit.&#xD;
&#xD;
     int bestScore = Integer.MIN_VALUE;&#xD;
     int worstScore = Integer.MAX_VALUE;&#xD;
     Player weakestAIPlayer = null;&#xD;
     Player strongestAIPlayer = null;&#xD;
     for (Entry&lt;Player, Integer> entry : scores.entrySet()) {&#xD;
         Player player = entry.getKey();&#xD;
         int score = entry.getValue();&#xD;
         if (worstScore > score &amp;&amp; weakLimit.evaluate(player)) {&#xD;
             worstScore = score;&#xD;
             weakestAIPlayer = player;&#xD;
         }&#xD;
         if (bestScore &lt; score) {&#xD;
             bestScore = score;&#xD;
             strongestAIPlayer = player;&#xD;
         }&#xD;
     }&#xD;
     if (weakestAIPlayer == null&#xD;
         || strongestAIPlayer == null&#xD;
         || weakestAIPlayer == strongestAIPlayer) return null;&#xD;
&#xD;
     lb.add(&quot;Spanish succession scores[&quot;);&#xD;
     for (Entry&lt;Player, Integer> entry : scores.entrySet()) {&#xD;
         lb.add(&quot; &quot;, entry.getKey().getName(), &quot;=&quot;, entry.getValue());&#xD;
     }&#xD;
     lb.add(&quot; ]=> &quot;, weakestAIPlayer.getName(),&#xD;
            &quot; cedes to &quot;, strongestAIPlayer.getName(), &quot;:&quot;);&#xD;
     List&lt;Tile> tiles = new ArrayList&lt;>();&#xD;
     ServerPlayer strongest = (ServerPlayer)strongestAIPlayer;&#xD;
     ServerPlayer weakest = (ServerPlayer)weakestAIPlayer;&#xD;
     for (Player player : getLiveNativePlayers(null)) {&#xD;
         for (IndianSettlement is : player.getIndianSettlements()) {&#xD;
             if (!is.hasMissionary(weakest)) continue;&#xD;
             lb.add(&quot; &quot;, is.getName(), &quot;(mission)&quot;);&#xD;
             is.getTile().cacheUnseen(strongest);//+til&#xD;
             tiles.add(is.getTile());&#xD;
             is.setContacted(strongest);//-til&#xD;
             ServerUnit missionary = (ServerUnit)is.getMissionary();&#xD;
             if (weakest.csChangeOwner(missionary, strongest,&#xD;
                     ChangeType.CAPTURE, null, cs)) {//-vis(both),-til&#xD;
                 is.getTile().updateIndianSettlement(strongest);&#xD;
                 cs.add(See.perhaps().always(strongest), is);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     for (Colony colony : weakest.getColonies()) {&#xD;
         for (Tile t : colony.getOwnedTiles()) {&#xD;
             t.cacheUnseen();//+til&#xD;
             tiles.add(t);&#xD;
         }&#xD;
         ((ServerColony)colony).csChangeOwner(strongest,&#xD;
                                              cs);//-vis(both),-til&#xD;
         cs.add(See.only(strongest),&#xD;
             strongest.exploreForSettlement(colony));&#xD;
         lb.add(&quot; &quot;, colony.getName());&#xD;
     }&#xD;
     for (Unit unit : weakest.getUnits()) {&#xD;
         if (weakest.csChangeOwner(unit, strongest, &#xD;
                 ChangeType.CAPTURE, null, cs)) { //-vis(both)&#xD;
             unit.setMovesLeft(0);&#xD;
             unit.setState(Unit.UnitState.ACTIVE);&#xD;
             lb.add(&quot; &quot;, unit.getId());&#xD;
             if (unit.getLocation() instanceof Europe) {&#xD;
                 unit.setLocation(strongestAIPlayer.getEurope());//-vis&#xD;
                 cs.add(See.only(strongest), unit);&#xD;
             } else if (unit.getLocation() instanceof HighSeas) {&#xD;
                 unit.setLocation(strongestAIPlayer.getHighSeas());//-vis&#xD;
                 cs.add(See.only(strongest), unit);&#xD;
             } else if (unit.getLocation() instanceof Tile) {&#xD;
                 Tile tile = unit.getTile();&#xD;
                 if (!tiles.contains(tile)) tiles.add(tile);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     StringTemplate loser = weakestAIPlayer.getNationLabel();&#xD;
     StringTemplate winner = strongestAIPlayer.getNationLabel();&#xD;
     cs.addMessage(See.all(),&#xD;
         new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
             &quot;model.game.spanishSuccession&quot;,&#xD;
             strongestAIPlayer)&#xD;
             .addStringTemplate(&quot;%loserNation%&quot;, loser)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, winner));&#xD;
     cs.addGlobalHistory(this,&#xD;
         new HistoryEvent(getTurn(),&#xD;
             HistoryEvent.HistoryEventType.SPANISH_SUCCESSION, null)&#xD;
             .addStringTemplate(&quot;%loserNation%&quot;, loser)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, winner));&#xD;
     setSpanishSuccession(true);&#xD;
     cs.addPartial(See.all(), this, &quot;spanishSuccession&quot;);&#xD;
     cs.add(See.perhaps(), tiles);&#xD;
     &#xD;
     weakest.csKill(cs);//+vis(weakest)&#xD;
     strongest.invalidateCanSeeTiles();//+vis(strongest)&#xD;
&#xD;
     // Trace fail where not all units are transferred&#xD;
     for (FreeColGameObject fcgo : getFreeColGameObjects()) {&#xD;
         if (fcgo instanceof Ownable&#xD;
             &amp;&amp; ((Ownable)fcgo).getOwner() == weakest) {&#xD;
             throw new RuntimeException(&quot;Lurking &quot; + weakest.getId()&#xD;
                 + &quot; fcgo: &quot; + fcgo);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     return weakest;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqEzVJREeiyW7NaN4qWdw" name="equals" specification="_QT_Q0lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqEzlJREeiyW7NaN4qWdw" name="o" type="_QT4jIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqEz1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return super.equals(o);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqr0FJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_QALkAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqr0VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverGame&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QAJHwFJREeiyW7NaN4qWdw" name="makeServerObject" visibility="private" method="_QVo2tFJREeiyW7NaN4qWdw" raisedException="_QT5xQFJREeiyW7NaN4qWdw _QT6YUFJREeiyW7NaN4qWdw _QT6_YFJREeiyW7NaN4qWdw _QR8pcFJREeiyW7NaN4qWdw _QT7mcFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtbVJREeiyW7NaN4qWdw">
                    <body>Makes a trivial server object in this game given a server object tag&#xD;
     * and an identifier.&#xD;
     *&#xD;
     * @param type The server object tag.&#xD;
     * @param id The object identifier.&#xD;
     * @return A trivial server object.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAJHwVJREeiyW7NaN4qWdw" name="type">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QAJHwlJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QT5KMVJREeiyW7NaN4qWdw" type="_QT4jIVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QAJu0FJREeiyW7NaN4qWdw" name="getServerModelObjects" method="_QVpdsVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtblJREeiyW7NaN4qWdw">
                    <body>Collects a list of all the ServerModelObjects in this game.&#xD;
     *&#xD;
     * @return A list of all the ServerModelObjects in this game.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAJu0VJREeiyW7NaN4qWdw" type="_QAYYUFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QAJu0lJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAKV4FJREeiyW7NaN4qWdw" name="getNextId" method="_QVpdtlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAKV4VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAK88FJREeiyW7NaN4qWdw" name="checkForWinner" method="_QVpdulJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUcFJREeiyW7NaN4qWdw">
                    <body>Checks if anybody has won this game.&#xD;
     *&#xD;
     * @return The &lt;code>Player&lt;/code> who has won the game or null if none.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT9boFJREeiyW7NaN4qWdw" type="_QRunAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QAK88VJREeiyW7NaN4qWdw" name="isNextPlayerInNewTurn" method="_QVqEwFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUcVJREeiyW7NaN4qWdw">
                    <body>Is the next player in a new turn?</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAK88lJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QALkAFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVqr0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QALkAVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QSFMUVJREeiyW7NaN4qWdw" name="getConnectedPlayers" method="_QVo2pVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QSFMUlJREeiyW7NaN4qWdw" name="serverPlayers" type="_QAyoAFJREeiyW7NaN4qWdw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QSFzY1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QSFzYFJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QSFzYVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QT1f0FJREeiyW7NaN4qWdw" name="ServerGame" method="_QVoPklJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QT2G4FJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QT2G4VJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDtaVJREeiyW7NaN4qWdw">
                    <body>Creates a new game model.&#xD;
     *&#xD;
     * @param specification The &lt;code>Specification&lt;/code> to use in this game.&#xD;
     * @see net.sf.freecol.server.FreeColServer</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT1f0VJREeiyW7NaN4qWdw" name="specification" type="_QRvOEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT2G4lJREeiyW7NaN4qWdw" type="_QAH5oFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT2G41JREeiyW7NaN4qWdw" name="ServerGame" method="_QVo2oFJREeiyW7NaN4qWdw" raisedException="_QR_swFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QT2G51JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QT2G6FJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWDtalJREeiyW7NaN4qWdw">
                    <body>Initiate a new &lt;code>ServerGame&lt;/code> with information from a&#xD;
     * saved game.&#xD;
     *&#xD;
     * @param freeColGameObjectListener A listener that should be monitoring&#xD;
     *     this &lt;code>Game&lt;/code>.&#xD;
     * @param xr The input stream containing the XML.&#xD;
     * @param specification The &lt;code>Specification&lt;/code> to use in this game.&#xD;
     * @exception XMLStreamException if an error occurred during parsing.&#xD;
     * @see net.sf.freecol.server.FreeColServer#loadGame</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT2G5FJREeiyW7NaN4qWdw" name="freeColGameObjectListener" type="_QSBh8VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT2G5VJREeiyW7NaN4qWdw" name="xr" type="_QSAT0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT2G5lJREeiyW7NaN4qWdw" name="specification" type="_QRvOEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT2G6VJREeiyW7NaN4qWdw" type="_QAH5oFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT2t8FJREeiyW7NaN4qWdw" name="sendToAll" method="_QVo2qlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QT2t8VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT2t8lJREeiyW7NaN4qWdw" name="serverPlayers" type="_QAyoAFJREeiyW7NaN4qWdw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QT2t9FJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QT3VAVJREeiyW7NaN4qWdw" name="sendToOthers" method="_QVo2rlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDta1JREeiyW7NaN4qWdw">
                    <body>Send a change set to all players, optionally excluding one.&#xD;
     *&#xD;
     * @param serverPlayer A &lt;code>ServerPlayer&lt;/code> to exclude.&#xD;
     * @param cs The &lt;code>ChangeSet&lt;/code> encapsulating the update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT3VAlJREeiyW7NaN4qWdw" name="serverPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT3VA1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT38EFJREeiyW7NaN4qWdw" name="sendToList" method="_QVo2sVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtbFJREeiyW7NaN4qWdw">
                    <body>Send a change set to a list of players.&#xD;
     *&#xD;
     * @param serverPlayers The list of &lt;code>ServerPlayer&lt;/code>s to send to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT38EVJREeiyW7NaN4qWdw" name="serverPlayers" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT38ElJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT8NgFJREeiyW7NaN4qWdw" name="updatePlayers" method="_QVpdtFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtb1JREeiyW7NaN4qWdw">
                    <body>Update the players.&#xD;
     *&#xD;
     * @param players A list of new &lt;code>ServerPlayer&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT8NgVJREeiyW7NaN4qWdw" name="players" type="_QRad8FJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT80kVJREeiyW7NaN4qWdw" name="randomize" method="_QVpduFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWDtcFJREeiyW7NaN4qWdw">
                    <body>Randomize a new game.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT80klJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT9boVJREeiyW7NaN4qWdw" name="csNextTurn" method="_QVqEwlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUclJREeiyW7NaN4qWdw">
                    <body>Change to the next turn for this game.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT9bolJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT-CsFJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVqExFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QT-CsVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT-CslJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT-Cs1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT-pwlJREeiyW7NaN4qWdw" name="csSpanishSuccession" visibility="private" method="_QVqEyFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUc1JREeiyW7NaN4qWdw">
                    <body>Checks for and if necessary performs the War of Spanish&#xD;
     * Succession changes.&#xD;
     *&#xD;
     * Visibility changes for the winner, loser is killed/irrelevant.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.&#xD;
     * @param event The Spanish Succession &lt;code>Event&lt;/code>.&#xD;
     * @return The &lt;code>ServerPlayer&lt;/code> that is eliminated if&#xD;
     *     any, or null if none found.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QT-pw1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT-pxFJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT_Q0FJREeiyW7NaN4qWdw" name="event" type="_QSAT01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT_Q0VJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QT_Q0lJREeiyW7NaN4qWdw" name="equals" method="_QVqEzVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QT_Q01JREeiyW7NaN4qWdw" name="o" type="_QT4jIVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QT_Q1FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAQcgFJREeiyW7NaN4qWdw" name="ServerIndianSettlement">
                <ownedComment xmi:id="_QWEUdFJREeiyW7NaN4qWdw">
                  <body>The server version of an Indian Settlement.</body>
                </ownedComment>
                <generalization xmi:id="_QUKP8FJREeiyW7NaN4qWdw" general="_QSCwEVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVS4YFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWdWA1JREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVS4YVJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerIndianSettlement.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVS4YlJREeiyW7NaN4qWdw" name="ALARM_NEW_MISSIONARY" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVS4Y1JREeiyW7NaN4qWdw" value="-100"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVS4ZFJREeiyW7NaN4qWdw" name="MAX_CONVERT_DISTANCE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVTfcFJREeiyW7NaN4qWdw" value="10"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVTfcVJREeiyW7NaN4qWdw" name="MAX_HORSES_PER_TURN" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVTfclJREeiyW7NaN4qWdw" value="2"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QSL6AVJREeiyW7NaN4qWdw" client="_QAQcgFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVqr0lJREeiyW7NaN4qWdw" name="ServerIndianSettlement" specification="_QUBGAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVqr01JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVqr1FJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVqr1VJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVrS4FJREeiyW7NaN4qWdw" name="ServerIndianSettlement" specification="_QUCUIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVrS4VJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS4lJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS41JREeiyW7NaN4qWdw" name="name">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVrS5FJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS5VJREeiyW7NaN4qWdw" name="isCapital">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVrS5lJREeiyW7NaN4qWdw" name="learnableSkill" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS51JREeiyW7NaN4qWdw" name="missionary" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS6FJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, owner, name, tile);&#xD;
&#xD;
     setGoodsContainer(new GoodsContainer(game, this));&#xD;
     this.learnableSkill = learnableSkill;&#xD;
     setCapital(isCapital);&#xD;
     this.missionary = missionary;&#xD;
&#xD;
     convertProgress = 0;&#xD;
     updateWantedGoods();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVrS6VJREeiyW7NaN4qWdw" name="ServerIndianSettlement" specification="_QUC7M1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVrS6lJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS61JREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS7FJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS7VJREeiyW7NaN4qWdw" name="template" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS7lJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, owner, template.getName(), tile);&#xD;
&#xD;
     setLearnableSkill(template.getLearnableSkill());&#xD;
     setCapital(template.isCapital());&#xD;
     // FIXME: the template settlement might have additional owned units&#xD;
     for (Unit unit: template.getUnitList()) {&#xD;
         Unit newUnit = new ServerUnit(game, this,&#xD;
                                       unit);//-vis: safe, not on map yet&#xD;
         add(newUnit);&#xD;
         addOwnedUnit(newUnit);&#xD;
     }&#xD;
     Unit missionary = template.getMissionary();&#xD;
     if (missionary != null) {&#xD;
         this.missionary = new ServerUnit(game, this,&#xD;
                                          missionary);//-vis: safe not on map&#xD;
     }&#xD;
     setConvertProgress(template.getConvertProgress());&#xD;
     setLastTribute(template.getLastTribute());&#xD;
     setGoodsContainer(new GoodsContainer(game, this));&#xD;
     final Specification spec = getSpecification();&#xD;
     for (Goods goods : template.getCompactGoods()) {&#xD;
         GoodsType type = spec.getGoodsType(goods.getType().getId());&#xD;
         addGoods(type, goods.getAmount());&#xD;
     }&#xD;
     wantedGoods = template.getWantedGoods();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVrS71JREeiyW7NaN4qWdw" name="csStartTurn" specification="_QUEJUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVrS8FJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVrS8VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     final Unit missionary = getMissionary();&#xD;
     if (missionary == null) return;&#xD;
     final ServerPlayer other = (ServerPlayer)missionary.getOwner();&#xD;
     final Tile tile = getTile();&#xD;
     final Turn turn = getGame().getTurn();&#xD;
&#xD;
     // Check for braves converted by missionaries&#xD;
     float convert = getConvertProgress();&#xD;
     float cMiss = missionary.applyModifiers(missionary.getType().getSkill(),&#xD;
                                             turn, Modifier.CONVERSION_SKILL);&#xD;
     // The convert rate increases by a percentage of the current alarm.&#xD;
     int alarm = Math.min(getAlarm(other).getValue(), Tension.TENSION_MAX);&#xD;
     float cAlarm = missionary.applyModifiers(alarm, turn,&#xD;
         Modifier.CONVERSION_ALARM_RATE);&#xD;
     convert += cMiss + (cAlarm - alarm);&#xD;
     logger.finest(&quot;Conversion at &quot; + getName() + &quot; alarm=&quot; + alarm&#xD;
         + &quot; &quot; + convert&#xD;
         + &quot; = &quot; + getConvertProgress() + &quot; + &quot; + cMiss + &quot; + &quot; + cAlarm);&#xD;
     ServerColony colony = (ServerColony)tile.getNearestSettlement(other,&#xD;
         MAX_CONVERT_DISTANCE, true);&#xD;
     if (convert &lt; (float)getType().getConvertThreshold()&#xD;
         || (getUnitCount() + tile.getUnitCount()) &lt;= 2&#xD;
         || colony == null) {&#xD;
         setConvertProgress((int)Math.floor(convert));&#xD;
     } else {&#xD;
         setConvertProgress(0);&#xD;
         // FIXME: fix native AI to put the units just hanging&#xD;
         // around (as distinct to those with DefendSettlement&#xD;
         // missions) into the settlement so we can ignore the&#xD;
         // tile-residents.&#xD;
         List&lt;Unit> ul = tile.getUnitList();&#xD;
         if (ul.isEmpty()) ul.addAll(getUnitList());&#xD;
         ServerUnit brave = (ServerUnit)getRandomMember(logger, &quot;Convert&quot;,&#xD;
                                                        ul, random);&#xD;
         colony.csAddConvert(brave, cs);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVrS8lJREeiyW7NaN4qWdw" name="addUnits" specification="_QUEJU1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVrS81JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>int low = getType().getMinimumSize();&#xD;
     int high = getType().getMaximumSize();&#xD;
     int count = (random == null) ? (high + low) / 2&#xD;
         : randomInt(logger, &quot;Units at &quot; + getName(), random, high - low + 1)&#xD;
             + low;&#xD;
     addUnits(count);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr58FJREeiyW7NaN4qWdw" name="addUnits" specification="_QARqoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr58VJREeiyW7NaN4qWdw" name="count">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     final Game game = getGame();&#xD;
     final UnitType brave = spec.getDefaultUnitType(getOwner());&#xD;
&#xD;
     for (int i = 0; i &lt; count; i++) {&#xD;
         Unit unit = new ServerUnit(game, this, getOwner(), brave,&#xD;
                                    brave.getDefaultRole());&#xD;
         unit.setHomeIndianSettlement(this);&#xD;
         unit.setLocation(this);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr58lJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QUEwYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr581JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVr59FJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVr59VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>lb.add(this);&#xD;
     ServerPlayer owner = (ServerPlayer) getOwner();&#xD;
     Specification spec = getSpecification();&#xD;
&#xD;
     // Produce goods.&#xD;
     List&lt;GoodsType> goodsList = spec.getGoodsTypeList();&#xD;
     for (GoodsType g : goodsList) {&#xD;
         addGoods(g.getStoredAs(), getTotalProductionOf(g));&#xD;
     }&#xD;
&#xD;
     // Consume goods.&#xD;
     for (GoodsType g : goodsList) {&#xD;
         consumeGoods(g, getConsumptionOf(g));&#xD;
     }&#xD;
&#xD;
     // Now check the food situation&#xD;
     int storedFood = getGoodsCount(spec.getPrimaryFoodType());&#xD;
     if (storedFood &lt;= 0 &amp;&amp; getUnitCount() > 0) {&#xD;
         Unit victim = getRandomMember(logger, &quot;Choose starver&quot;,&#xD;
                                       getUnitList(), random);&#xD;
         cs.addRemove(See.only(owner), this, victim);//-vis(owner)&#xD;
         victim.dispose();&#xD;
         lb.add(&quot; FAMINE&quot;);&#xD;
     }&#xD;
     if (getUnitCount() &lt;= 0) {&#xD;
         if (tile.isEmpty()) {&#xD;
             lb.add(&quot; COLLAPSED, &quot;);&#xD;
             owner.csDisposeSettlement(this, cs);//+vis(owner)&#xD;
             return;&#xD;
         }&#xD;
         tile.getFirstUnit().setLocation(this);//-vis,til: safe in settlement&#xD;
     }&#xD;
&#xD;
     // Check for new resident.&#xD;
     // Alcohol also contributes to create children.&#xD;
     GoodsType foodType = spec.getPrimaryFoodType();&#xD;
     GoodsType rumType = spec.getGoodsType(&quot;model.goods.rum&quot;);&#xD;
     List&lt;UnitType> unitTypes&#xD;
         = spec.getUnitTypesWithAbility(Ability.BORN_IN_INDIAN_SETTLEMENT);&#xD;
     if (!unitTypes.isEmpty()&#xD;
         &amp;&amp; (getGoodsCount(foodType) + 4 * getGoodsCount(rumType)&#xD;
             > FOOD_PER_COLONIST + KEEP_RAW_MATERIAL)) {&#xD;
         if (ownedUnits.size() &lt;= getType().getMaximumSize()) {&#xD;
             // Allow one more brave than the initially generated&#xD;
             // number.  This is more than sufficient. Do not&#xD;
             // increase the amount without discussing it on the&#xD;
             // developer's mailing list first.&#xD;
             UnitType type = getRandomMember(logger, &quot;Choose birth&quot;,&#xD;
                                             unitTypes, random);&#xD;
             Unit unit = new ServerUnit(getGame(), getTile(), owner,&#xD;
                                        type);//-vis: safe within settlement&#xD;
             consumeGoods(rumType, FOOD_PER_COLONIST/4);&#xD;
             // New units quickly go out of their city and start annoying.&#xD;
             addOwnedUnit(unit);&#xD;
             unit.setHomeIndianSettlement(this);&#xD;
             lb.add(&quot; new &quot;, unit);&#xD;
         }&#xD;
         // Consume the food anyway&#xD;
         consumeGoods(foodType, FOOD_PER_COLONIST);&#xD;
     }&#xD;
&#xD;
     // Try to breed horses&#xD;
     // FIXME: Make this generic.&#xD;
     GoodsType horsesType = spec.getGoodsType(&quot;model.goods.horses&quot;);&#xD;
     // FIXME: remove this&#xD;
     GoodsType grainType = spec.getGoodsType(&quot;model.goods.grain&quot;);&#xD;
     int foodProdAvail = getTotalProductionOf(grainType) - getFoodConsumption();&#xD;
     if (getGoodsCount(horsesType) >= horsesType.getBreedingNumber()&#xD;
         &amp;&amp; foodProdAvail > 0) {&#xD;
         int nHorses = Math.min(MAX_HORSES_PER_TURN, foodProdAvail);&#xD;
         addGoods(horsesType, nHorses);&#xD;
         lb.add(&quot; bred &quot;, nHorses, &quot; horses&quot;);&#xD;
     }&#xD;
&#xD;
     getGoodsContainer().removeAbove(getWarehouseCapacity());&#xD;
     updateWantedGoods();&#xD;
     cs.add(See.only(owner), this);&#xD;
     lb.add(&quot;, &quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr59lJREeiyW7NaN4qWdw" name="consumeGoods" specification="_QUFXclJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr591JREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVr5-FJREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (getGoodsCount(type) > 0) {&#xD;
         amount = Math.min(amount, getGoodsCount(type));&#xD;
         removeGoods(type, amount);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr5-VJREeiyW7NaN4qWdw" name="setAlarm" specification="_QUF-gFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr5-lJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVr5-1JREeiyW7NaN4qWdw" name="newAlarm" type="_QSKr4VJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (player != null &amp;&amp; player != owner) {&#xD;
         super.setAlarm(player, newAlarm);&#xD;
         updateMostHated();&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr5_FJREeiyW7NaN4qWdw" name="removeAlarm" specification="_QUGlk1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr5_VJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (player != null) {&#xD;
         alarm.remove(player);&#xD;
         updateMostHated();&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVr5_lJREeiyW7NaN4qWdw" name="updateMostHated" specification="_QASRsVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVr5_1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Player old = mostHated;&#xD;
     mostHated = null;&#xD;
     int bestValue = Integer.MIN_VALUE;&#xD;
     for (Player p : getGame().getLiveEuropeanPlayers(null)) {&#xD;
         Tension alarm = getAlarm(p);&#xD;
         if (alarm == null&#xD;
             || alarm.getLevel() == Tension.Level.HAPPY) continue;&#xD;
         int value = alarm.getValue();&#xD;
         if (bestValue &lt; value) {&#xD;
             bestValue = value;&#xD;
             mostHated = p;&#xD;
         }&#xD;
     }&#xD;
     return mostHated != old;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVshAFJREeiyW7NaN4qWdw" name="changeAlarm" specification="_QUHMoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVshAVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshAlJREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVshA1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Tension alarm = getAlarm(player);&#xD;
     if (alarm == null) {&#xD;
         initializeAlarm(player);&#xD;
         alarm = getAlarm(player);&#xD;
     }&#xD;
     Tension.Level oldLevel = alarm.getLevel();&#xD;
     alarm.modify(amount);&#xD;
     boolean change = updateMostHated();&#xD;
     return change || oldLevel != alarm.getLevel();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVshBFJREeiyW7NaN4qWdw" name="csChangeAlarm" specification="_QUHzsFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVshBVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshBlJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVshB1JREeiyW7NaN4qWdw" name="propagate">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVshCFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshCVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>boolean change = changeAlarm(player, add);&#xD;
     if (propagate) {&#xD;
         // Propagate alarm upwards.  Capital has a greater impact.&#xD;
         ((ServerPlayer)getOwner()).csModifyTension(player,&#xD;
             ((isCapital()) ? add : add/2), this, cs);&#xD;
     }&#xD;
     logger.finest(&quot;Alarm at &quot; + getName()&#xD;
         + &quot; toward &quot; + player.getName()&#xD;
         + &quot; modified by &quot; + add&#xD;
         + &quot; now = &quot; + getAlarm(player).getValue());&#xD;
     return change;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVshClJREeiyW7NaN4qWdw" name="csModifyAlarm" specification="_QUHztlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVshC1JREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshDFJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVshDVJREeiyW7NaN4qWdw" name="propagate">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVshDlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshD1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Tile copied = getTile().getTileToCache();&#xD;
     boolean change = csChangeAlarm(player, add, propagate, cs);//-til&#xD;
     if (change) {&#xD;
         getTile().cacheUnseen(copied);//+til&#xD;
         cs.add(See.perhaps(), this);&#xD;
     }&#xD;
     return change;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVshEFJREeiyW7NaN4qWdw" name="csChangeMissionary" specification="_QUIaxFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVshEVJREeiyW7NaN4qWdw" name="missionary" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVshElJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Unit old = getMissionary();&#xD;
     if (missionary == old) return;&#xD;
&#xD;
     final Tile tile = getTile();&#xD;
     final ServerPlayer newOwner = (missionary == null) ? null&#xD;
         : (ServerPlayer)missionary.getOwner();&#xD;
     tile.cacheUnseen(newOwner);//+til&#xD;
&#xD;
     if (old != null) {&#xD;
         final ServerPlayer oldOwner = (ServerPlayer)old.getOwner(); &#xD;
         setMissionary(null);//-vis(oldOwner),-til&#xD;
         tile.updateIndianSettlement(oldOwner);&#xD;
         cs.addRemove(See.only(oldOwner), null, old);//-vis(oldOwner)&#xD;
         old.dispose();&#xD;
         cs.add(See.only(oldOwner), tile);&#xD;
         oldOwner.invalidateCanSeeTiles();//+vis(oldOwner)&#xD;
     }&#xD;
&#xD;
     if (missionary != null) {&#xD;
         setMissionary(missionary);//-vis(newOwner)&#xD;
         // Take the missionary off the map, and give it a fake&#xD;
         // location at the settlement, bypassing the normal&#xD;
         // validity checks.&#xD;
         missionary.setLocation(null);//-vis(newOwner)&#xD;
         missionary.setLocationNoUpdate(this);//-vis(newOwner),-til&#xD;
         missionary.setMovesLeft(0);&#xD;
         cs.add(See.only(newOwner), missionary);&#xD;
         setConvertProgress(0);&#xD;
         csChangeAlarm(newOwner, ALARM_NEW_MISSIONARY, true, cs);//-til&#xD;
         tile.updateIndianSettlement(newOwner);&#xD;
         &#xD;
         int radius = getMissionaryLineOfSight();&#xD;
         for (Tile t : tile.getSurroundingTiles(1, radius)) {&#xD;
             if (newOwner.exploreTile(t) || !newOwner.canSee(t)) {&#xD;
                 cs.add(See.only(newOwner), t);&#xD;
             }&#xD;
         }&#xD;
         cs.add(See.perhaps().always(newOwner), tile);&#xD;
         newOwner.invalidateCanSeeTiles();//+vis(newOwner)&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtIEFJREeiyW7NaN4qWdw" name="csKillMissionary" specification="_QUJB0VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtIEVJREeiyW7NaN4qWdw" name="destroy">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVtIElJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Unit missionary = getMissionary();&#xD;
     if (missionary == null) return;&#xD;
     csChangeMissionary(null, cs);&#xD;
     &#xD;
     // Inform the enemy of loss of mission&#xD;
     ServerPlayer missionaryOwner = (ServerPlayer)missionary.getOwner();&#xD;
     if (destroy != null) {&#xD;
         if (destroy) {&#xD;
             cs.addMessage(See.only(missionaryOwner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.UNIT_LOST,&#xD;
                     &quot;model.indianSettlement.mission.destroyed&quot;, this)&#xD;
                     .addStringTemplate(&quot;%settlement%&quot;,&#xD;
                         getLocationLabelFor(missionaryOwner)));&#xD;
         } else {&#xD;
             cs.addMessage(See.only(missionaryOwner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                     &quot;model.indianSettlement.mission.denounced&quot;, this)&#xD;
                     .addStringTemplate(&quot;%settlement%&quot;,&#xD;
                         getLocationLabelFor(missionaryOwner)));&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtIE1JREeiyW7NaN4qWdw" name="csEquipForRole" specification="_QUJo4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtIFFJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVtIFVJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVtIFlJREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVtIF1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVtIGFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVtIGVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>boolean ret = equipForRole(unit, role, roleCount);&#xD;
&#xD;
     if (ret) {&#xD;
         cs.add(See.only((ServerPlayer)getOwner()), getTile());&#xD;
     }&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtIGlJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_QATf0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtIG1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverIndianSettlement&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QARqoFJREeiyW7NaN4qWdw" name="addUnits" method="_QVr58FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUelJREeiyW7NaN4qWdw">
                    <body>Add a given number of units to the settlement.&#xD;
     *&#xD;
     * @param count The number of units to add.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QASRsFJREeiyW7NaN4qWdw" name="count">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QASRsVJREeiyW7NaN4qWdw" name="updateMostHated" method="_QVr5_lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUfVJREeiyW7NaN4qWdw">
                    <body>Updates the most hated nation of this settlement.&#xD;
     * Needs to be public so it can be set by backwards compatibility code&#xD;
     * in FreeColServer.loadGame.&#xD;
     *&#xD;
     * -til: This might change the tile appearance.&#xD;
     *&#xD;
     * @return True if the most hated nation changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QASRslJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QATf0FJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVtIGlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QATf0VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUBGAFJREeiyW7NaN4qWdw" name="ServerIndianSettlement" method="_QVqr0lJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUBtElJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUBtE1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWEUdVJREeiyW7NaN4qWdw">
                    <body>Trivial constructor for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUBtEFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUBtEVJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUBtFFJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUCUIFJREeiyW7NaN4qWdw" name="ServerIndianSettlement" method="_QVrS4FJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUC7MFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUC7MVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWEUdlJREeiyW7NaN4qWdw">
                    <body>Creates a new ServerIndianSettlement.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this object belong.&#xD;
     * @param owner The &lt;code>Player&lt;/code> owning this settlement.&#xD;
     * @param name The name for this settlement.&#xD;
     * @param tile The location of the &lt;code>IndianSettlement&lt;/code>.&#xD;
     * @param isCapital True if settlement is tribe's capital&#xD;
     * @param learnableSkill The skill that can be learned by&#xD;
     *     Europeans at this settlement.&#xD;
     * @param missionary The missionary in this settlement (or null).</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUCUIVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUCUIlJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUCUI1JREeiyW7NaN4qWdw" name="name">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUCUJFJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUCUJVJREeiyW7NaN4qWdw" name="isCapital">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUCUJlJREeiyW7NaN4qWdw" name="learnableSkill" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUCUJ1JREeiyW7NaN4qWdw" name="missionary" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUC7MlJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUC7M1JREeiyW7NaN4qWdw" name="ServerIndianSettlement" method="_QVrS6VJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUDiRFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUDiRVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWEUd1JREeiyW7NaN4qWdw">
                    <body>Creates a new ServerIndianSettlement from a template.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this object belong.&#xD;
     * @param owner The &lt;code>Player&lt;/code> owning this settlement.&#xD;
     * @param tile The location of the &lt;code>IndianSettlement&lt;/code>.&#xD;
     * @param template The template &lt;code>IndianSettlement&lt;/code> to copy.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUDiQFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUDiQVJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUDiQlJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUDiQ1JREeiyW7NaN4qWdw" name="template" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUDiRlJREeiyW7NaN4qWdw" type="_QAQcgFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUEJUFJREeiyW7NaN4qWdw" name="csStartTurn" method="_QVrS71JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUeFJREeiyW7NaN4qWdw">
                    <body>Starts a new turn for a player.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUEJUVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUEJUlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUEJU1JREeiyW7NaN4qWdw" name="addUnits" method="_QVrS8lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUeVJREeiyW7NaN4qWdw">
                    <body>Add a standard number of units to this settlement and tile.  If&#xD;
     * a pseudo-random number source is provided use it to pick a&#xD;
     * random number of units within the ranges provided by the&#xD;
     * settlement type, otherwise use the average.&#xD;
     *&#xD;
     * @param random An optional pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUEJVFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUEwYFJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVr58lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUEwYVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUEwYlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUEwY1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUFXclJREeiyW7NaN4qWdw" name="consumeGoods" visibility="private" method="_QVr59lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUe1JREeiyW7NaN4qWdw">
                    <body>Convenience function to remove an amount of goods.&#xD;
     *&#xD;
     * @param type The &lt;code>GoodsType&lt;/code> to remove.&#xD;
     * @param amount The amount of goods to remove.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUFXc1JREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUFXdFJREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUF-gFJREeiyW7NaN4qWdw" name="setAlarm" method="_QVr5-VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUF-gVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUF-glJREeiyW7NaN4qWdw" name="newAlarm" type="_QSKr4VJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUGlk1JREeiyW7NaN4qWdw" name="removeAlarm" method="_QVr5_FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUfFJREeiyW7NaN4qWdw">
                    <body>Removes all alarm towards the given player.  Used the a player leaves&#xD;
     * the game.&#xD;
     *&#xD;
     * -til: Might change tile appearance through most hated state&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code> to remove the alarm for.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUGllFJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUHMoFJREeiyW7NaN4qWdw" name="changeAlarm" visibility="private" method="_QVshAFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUflJREeiyW7NaN4qWdw">
                    <body>Change the alarm level of this settlement by a given amount.&#xD;
     *&#xD;
     * -til: Might change tile appearance through most hated state&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code> the alarm level changes wrt.&#xD;
     * @param amount The amount to change the alarm by.&#xD;
     * @return True if the &lt;code>Tension.Level&lt;/code> of the&#xD;
     *     settlement alarm changes as a result of this change.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUHMoVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUHMolJREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUHMo1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUHzsFJREeiyW7NaN4qWdw" name="csChangeAlarm" visibility="private" method="_QVshBFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUf1JREeiyW7NaN4qWdw">
                    <body>Modifies the alarm level towards the given player due to an event&#xD;
     * at this settlement, and propagate the alarm upwards through the&#xD;
     * tribe.&#xD;
     *&#xD;
     * -til: Might change tile appearance through most hated state&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code> to modify alarm for.&#xD;
     * @param add The amount to add to the current alarm level.&#xD;
     * @param propagate If true, propagate the alarm change upward to the&#xD;
     *     owning player.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the alarm changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUHzsVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUHzslJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUHzs1JREeiyW7NaN4qWdw" name="propagate">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUHztFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUHztVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUHztlJREeiyW7NaN4qWdw" name="csModifyAlarm" method="_QVshClJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUgFJREeiyW7NaN4qWdw">
                    <body>Modifies the alarm level towards the given player due to an event&#xD;
     * at this settlement, and propagate the alarm upwards through the&#xD;
     * tribe.&#xD;
     *&#xD;
     * +til: Handles tile visibility changes.&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code> to modify alarm for.&#xD;
     * @param add The amount to add to the current alarm level.&#xD;
     * @param propagate If true, propagate the alarm change upward to the&#xD;
     *     owning player.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the alarm changed and the tile added.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUHzt1JREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUIawFJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUIawVJREeiyW7NaN4qWdw" name="propagate">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUIawlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUIaw1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUIaxFJREeiyW7NaN4qWdw" name="csChangeMissionary" method="_QVshEFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUgVJREeiyW7NaN4qWdw">
                    <body>Changes the missionary for this settlement and updates other players.&#xD;
     *&#xD;
     * +vis: Handles the visibility implications.&#xD;
     * +til: Handles the tile appearance change.&#xD;
     *&#xD;
     * @param missionary The new missionary for this settlement.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUIaxVJREeiyW7NaN4qWdw" name="missionary" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUJB0FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUJB0VJREeiyW7NaN4qWdw" name="csKillMissionary" method="_QVtIEFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUglJREeiyW7NaN4qWdw">
                    <body>Kills the missionary at this settlement.&#xD;
     *&#xD;
     * @param destroy If true, the settlement is destroyed, if false the&#xD;
     *     missionary is denounced, if null do not generate a message.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUJB0lJREeiyW7NaN4qWdw" name="destroy">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUJB01JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUJo4FJREeiyW7NaN4qWdw" name="csEquipForRole" method="_QVtIE1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWEUg1JREeiyW7NaN4qWdw">
                    <body>Equip a unit for a specific role.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> to equip.&#xD;
     * @param role The &lt;code>Role&lt;/code> to equip for.&#xD;
     * @param roleCount The role count.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the equipping succeeds.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUJo4VJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUJo4lJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUJo41JREeiyW7NaN4qWdw" name="roleCount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUJo5FJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUJo5VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUJo5lJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_QAYYUFJREeiyW7NaN4qWdw" name="ServerModelObject">
                <ownedComment xmi:id="_QWE7gFJREeiyW7NaN4qWdw">
                  <body>Interface for server-side objects which needs to store&#xD;
extra information to a save game.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_QAYYUVJREeiyW7NaN4qWdw" name="id" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QAY_YFJREeiyW7NaN4qWdw" name="serverXMLElementTagName" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedAttribute>
                <ownedOperation xmi:id="_QUK3AFJREeiyW7NaN4qWdw" name="csNewTurn">
                  <ownedParameter xmi:id="_QUK3AVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUK3AlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUK3A1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAY_YVJREeiyW7NaN4qWdw" name="TransactionSession" isAbstract="true">
                <ownedComment xmi:id="_QWE7gVJREeiyW7NaN4qWdw">
                  <body>Root class for sessions.</body>
                </ownedComment>
                <ownedAttribute xmi:id="_QVTfc1JREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWd9EVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVTfdFJREeiyW7NaN4qWdw" value="Logger.getLogger(TransactionSession.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVUGgFJREeiyW7NaN4qWdw" name="allSessions" visibility="protected" isLeaf="true" isStatic="true" type="_QAY_YVJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWekIVJREeiyW7NaN4qWdw">
                  <qualifier xmi:id="_QVUGglJREeiyW7NaN4qWdw">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </qualifier>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVUGgVJREeiyW7NaN4qWdw" value="new HashMap&lt;>()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVUGg1JREeiyW7NaN4qWdw" name="completed" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtvIFJREeiyW7NaN4qWdw" name="TransactionSession" specification="_QAZmcFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtvIVJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVtvIlJREeiyW7NaN4qWdw" type="_QAY_YVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>if (allSessions.get(key) != null) {&#xD;
         throw new IllegalArgumentException(&quot;Duplicate session: &quot; + key);&#xD;
     }&#xD;
     completed = false;&#xD;
     allSessions.put(key, this);&#xD;
     logger.finest(&quot;Created session: &quot; + key);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtvI1JREeiyW7NaN4qWdw" name="complete" specification="_QULeEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtvJFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>completed = true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVtvJVJREeiyW7NaN4qWdw" name="makeSessionKey" specification="_QUMFIVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVtvJlJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVtvJ1JREeiyW7NaN4qWdw" name="o1">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVtvKFJREeiyW7NaN4qWdw" name="o2">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVtvKVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return type + &quot;-&quot; + o1 + &quot;-&quot; + o2;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVuWMFJREeiyW7NaN4qWdw" name="makeSessionKey" specification="_QUMFJlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVuWMVJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWMlJREeiyW7NaN4qWdw" name="o1" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWM1JREeiyW7NaN4qWdw" name="o2" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWNFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return makeSessionKey(type, o1.getId(), o2.getId());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVuWNVJREeiyW7NaN4qWdw" name="completeAll" specification="_QUMsNFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVuWNlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (TransactionSession ts : allSessions.values()) {&#xD;
         if (!ts.completed) ts.complete(cs);&#xD;
     }&#xD;
     clearAll();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVuWN1JREeiyW7NaN4qWdw" name="clearAll" specification="_QAa0kFJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>allSessions.clear();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVuWOFJREeiyW7NaN4qWdw" name="lookup" specification="_QUN6UFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVuWOVJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWOlJREeiyW7NaN4qWdw" name="o1" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWO1JREeiyW7NaN4qWdw" name="o2" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVuWPFJREeiyW7NaN4qWdw" type="_QUNTQFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return lookup(type, o1.getId(), o2.getId());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVu9QFJREeiyW7NaN4qWdw" name="lookup" specification="_QUOhYVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVu9QVJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVu9QlJREeiyW7NaN4qWdw" name="s1">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVu9Q1JREeiyW7NaN4qWdw" name="s2">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVu9RFJREeiyW7NaN4qWdw" type="_QUNTQFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>String key = makeSessionKey(type, s1, s2);&#xD;
     TransactionSession ts = allSessions.get(key);&#xD;
     if (ts != null &amp;&amp; ts.completed) {&#xD;
         allSessions.remove(key);&#xD;
         ts = null;&#xD;
     }&#xD;
     return (ts == null) ? null : type.cast(ts);&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QAZmcFJREeiyW7NaN4qWdw" name="TransactionSession" visibility="protected" method="_QVtvIFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QAZmclJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QAaNgFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7glJREeiyW7NaN4qWdw">
                    <body>Protected constructor, we only really instantiate specific types&#xD;
     * of transactions.&#xD;
     *&#xD;
     * @param key A unique key to lookup this transaction with.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAZmcVJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QAaNgVJREeiyW7NaN4qWdw" type="_QAY_YVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QAa0kFJREeiyW7NaN4qWdw" name="clearAll" isStatic="true" method="_QVuWN1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7h1JREeiyW7NaN4qWdw">
                    <body>Clear all transactions.</body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_QULeEFJREeiyW7NaN4qWdw" name="complete" method="_QVtvI1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7g1JREeiyW7NaN4qWdw">
                    <body>All transaction types must implement a completion action.  The&#xD;
     * last thing they should do is call this to remove reference to&#xD;
     * this transaction.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update with changes that&#xD;
     *     occur when completing this session.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QULeEVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUMFIVJREeiyW7NaN4qWdw" name="makeSessionKey" visibility="protected" isStatic="true" method="_QVtvJVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7hFJREeiyW7NaN4qWdw">
                    <body>Make a transaction session key.&#xD;
     *&#xD;
     * @param type An identifier for the type of transaction.&#xD;
     * @param o1 A string to uniquely identify the transaction.&#xD;
     * @param o2 Another string to uniquely identify the transaction.&#xD;
     * @return A transaction session key.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUMFIlJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUMFI1JREeiyW7NaN4qWdw" name="o1">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUMFJFJREeiyW7NaN4qWdw" name="o2">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUMFJVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUMFJlJREeiyW7NaN4qWdw" name="makeSessionKey" visibility="protected" isStatic="true" method="_QVuWMFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7hVJREeiyW7NaN4qWdw">
                    <body>Make a transaction session key given two game objects.&#xD;
     *&#xD;
     * @param type An identifier for the type of transaction.&#xD;
     * @param o1 A &lt;code>FreeColGameObject&lt;/code> involved in the session.&#xD;
     * @param o2 Another &lt;code>FreeColGameObject&lt;/code> involved in the session.&#xD;
     * @return A transaction session key.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUMsMFJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUMsMVJREeiyW7NaN4qWdw" name="o1" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUMsMlJREeiyW7NaN4qWdw" name="o2" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUMsM1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUMsNFJREeiyW7NaN4qWdw" name="completeAll" isStatic="true" method="_QVuWNVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7hlJREeiyW7NaN4qWdw">
                    <body>Complete all transactions.  Useful at the end of turn.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUMsNVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUN6UFJREeiyW7NaN4qWdw" name="lookup" isStatic="true" method="_QVuWOFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUN6UVJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUN6UlJREeiyW7NaN4qWdw" name="o1" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUN6U1JREeiyW7NaN4qWdw" name="o2" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUN6VVJREeiyW7NaN4qWdw" type="_QUNTQFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUOhYVJREeiyW7NaN4qWdw" name="lookup" isStatic="true" method="_QVu9QFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUOhYlJREeiyW7NaN4qWdw" name="type" type="_QULeElJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUOhY1JREeiyW7NaN4qWdw" name="s1">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUPIcFJREeiyW7NaN4qWdw" name="s2">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUPIclJREeiyW7NaN4qWdw" type="_QUNTQFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAcpwFJREeiyW7NaN4qWdw" name="ServerRegion">
                <ownedComment xmi:id="_QWE7iFJREeiyW7NaN4qWdw">
                  <body>The server version of a region.</body>
                </ownedComment>
                <generalization xmi:id="_QUUA91JREeiyW7NaN4qWdw" general="_QSUc4VJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVUtkFJREeiyW7NaN4qWdw" name="PACIFIC_SCORE_VALUE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVUtkVJREeiyW7NaN4qWdw" value="100"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVUtklJREeiyW7NaN4qWdw" name="size" isLeaf="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVUtk1JREeiyW7NaN4qWdw" value="0"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVUtlFJREeiyW7NaN4qWdw" name="bounds" visibility="private" type="_QSSns1JREeiyW7NaN4qWdw" association="_QWfLMVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVUtlVJREeiyW7NaN4qWdw" value="new Rectangle()"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVu9RVJREeiyW7NaN4qWdw" name="ServerRegion" specification="_QUQWkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVu9RlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVu9R1JREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVu9SFJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVu9SVJREeiyW7NaN4qWdw" name="ServerRegion" specification="_QUQ9oFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVu9SlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVu9S1JREeiyW7NaN4qWdw" name="region" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVu9TFJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game);&#xD;
&#xD;
     this.name = region.getName();&#xD;
     this.key = region.getKey();&#xD;
     this.type = region.getType();&#xD;
     this.parent = null; // Has to be fixed up elsewhere&#xD;
     this.claimable = region.getClaimable();&#xD;
     this.discoverable = region.getDiscoverable();&#xD;
     this.discoveredIn = region.getDiscoveredIn();&#xD;
     this.discoveredBy = region.getDiscoveredBy();&#xD;
     this.scoreValue = region.getScoreValue();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVvkUFJREeiyW7NaN4qWdw" name="ServerRegion" specification="_QURksVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVvkUVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkUlJREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkU1JREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this(game, null, type, null);&#xD;
&#xD;
     this.setClaimable(type.getClaimable());&#xD;
     this.setDiscoverable(true);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVvkVFJREeiyW7NaN4qWdw" name="ServerRegion" specification="_QUSLwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVvkVVJREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkVlJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVvkV1JREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkWFJREeiyW7NaN4qWdw" name="parent" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkWVJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this(map.getGame(), key, type, parent);&#xD;
&#xD;
     map.addRegion(this);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVvkWlJREeiyW7NaN4qWdw" name="ServerRegion" specification="_QUSLyFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVvkW1JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkXFJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVvkXVJREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkXlJREeiyW7NaN4qWdw" name="parent" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVvkX1JREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game);&#xD;
&#xD;
     this.key = key;&#xD;
     this.name = null;&#xD;
     this.type = type;&#xD;
     this.parent = parent;&#xD;
     if (this.parent != null) this.parent.addChild(this);&#xD;
     this.claimable = false;&#xD;
     this.discoverable = false;&#xD;
     this.discoveredIn = null;&#xD;
     this.discoveredBy = null;&#xD;
     this.scoreValue = 0;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVvkYFJREeiyW7NaN4qWdw" name="getBounds" specification="_QAfGAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVvkYVJREeiyW7NaN4qWdw" type="_QSSns1JREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return bounds;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVvkYlJREeiyW7NaN4qWdw" name="isGeographic" specification="_QAfGAVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVvkY1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return this.key != null &amp;&amp; this.type == RegionType.LAND;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLYFJREeiyW7NaN4qWdw" name="getCenter" specification="_QAfGA1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLYVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVwLYlJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return new int[] { bounds.x + bounds.width/2,&#xD;
                        bounds.y + bounds.height/2 };&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLY1JREeiyW7NaN4qWdw" name="containsCenter" specification="_QSVrAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLZFJREeiyW7NaN4qWdw" name="other" type="_QAcpwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLZVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int[] xy = other.getCenter();&#xD;
     return bounds.contains(xy[0], xy[1]);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLZlJREeiyW7NaN4qWdw" name="addTile" specification="_QUSy1lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLZ1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>tile.setRegion(this);&#xD;
     size++;&#xD;
     if (bounds.x == 0 &amp;&amp; bounds.width == 0&#xD;
         || bounds.y == 0 &amp;&amp; bounds.height == 0) {&#xD;
         bounds.setBounds(tile.getX(), tile.getY(), 0, 0);&#xD;
     } else {&#xD;
         bounds.add(tile.getX(), tile.getY());&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLaFJREeiyW7NaN4qWdw" name="csDiscover" specification="_QUTZ4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLaVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLalJREeiyW7NaN4qWdw" name="turn" type="_QSLS8VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLa1JREeiyW7NaN4qWdw" name="newName">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVwLbFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (!getDiscoverable()) return;&#xD;
     final int score = (getSpecification().getBoolean(GameOptions.EXPLORATION_POINTS)) &#xD;
         ? this.scoreValue&#xD;
         : 0;&#xD;
     if (!hasName()) this.name = newName;&#xD;
     for (Region r : discover(player, turn)) cs.add(See.all(), r);&#xD;
     HistoryEvent h = new HistoryEvent(turn,&#xD;
         HistoryEvent.HistoryEventType.DISCOVER_REGION, player)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, player.getNationLabel())&#xD;
             .addName(&quot;%region%&quot;, newName);&#xD;
     h.setScore(score);&#xD;
     cs.addGlobalHistory(getGame(), h);&#xD;
     setDiscoverer(null);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLbVJREeiyW7NaN4qWdw" name="requireFixedRegions" specification="_QUTZ5VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLblJREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLb1JREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLcFJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVwLcVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Game game = map.getGame();&#xD;
     final java.util.Map&lt;String, Region> fixed = map.getFixedRegions();&#xD;
     List&lt;ServerRegion> result = new ArrayList&lt;>();&#xD;
&#xD;
     lb.add(&quot;Add regions &quot;);&#xD;
     // Create arctic/antarctic regions first, but only if they do&#xD;
     // not exist in on the map already.  This allows for example&#xD;
     // the imported Caribbean map to have arctic/antarctic regions&#xD;
     // defined but with no tiles assigned to them, thus they will&#xD;
     // not be seen on the map.  Generated games though will not&#xD;
     // have the region defined, and so will create it here.&#xD;
     final int arcticHeight = Map.POLAR_HEIGHT;&#xD;
     ServerRegion arctic = (ServerRegion)fixed.get(&quot;model.region.arctic&quot;);&#xD;
     if (arctic == null) {&#xD;
         arctic = new ServerRegion(map, &quot;model.region.arctic&quot;,&#xD;
                                   RegionType.LAND, null);&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             for (int y = 0; y &lt; arcticHeight; y++) {&#xD;
                 if (map.isValid(x, y)) {&#xD;
                     Tile tile = map.getTile(x, y);&#xD;
                     if (tile.isLand()) arctic.addTile(tile);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         lb.add(&quot;+arctic&quot;);&#xD;
     }&#xD;
     result.add(arctic);&#xD;
     final int antarcticHeight = map.getHeight() - Map.POLAR_HEIGHT - 1;&#xD;
     ServerRegion antarctic = (ServerRegion)fixed.get(&quot;model.region.antarctic&quot;);&#xD;
     if (antarctic == null) {&#xD;
         antarctic = new ServerRegion(map, &quot;model.region.antarctic&quot;,&#xD;
                                      RegionType.LAND, null);&#xD;
         for (int x = 0; x &lt; map.getWidth(); x++) {&#xD;
             for (int y = antarcticHeight; y &lt; map.getHeight(); y++) {&#xD;
                 if (map.isValid(x, y)) {&#xD;
                     Tile tile = map.getTile(x, y);&#xD;
                     if (tile.isLand()) antarctic.addTile(tile);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         lb.add(&quot;+antarctic&quot;);&#xD;
     }&#xD;
     result.add(antarctic);&#xD;
&#xD;
     // Then, create &quot;geographic&quot; land regions.  These regions are&#xD;
     // used by the MapGenerator to place Indian Settlements.  Note&#xD;
     // that these regions are &quot;virtual&quot;, i.e. having a bounding&#xD;
     // box, but contain no tiles directly.&#xD;
     final int thirdWidth = map.getWidth()/3;&#xD;
     final int twoThirdWidth = 2 * thirdWidth;&#xD;
     final int thirdHeight = map.getHeight()/3;&#xD;
     final int twoThirdHeight = 2 * thirdHeight;&#xD;
&#xD;
     ServerRegion northWest = (ServerRegion)fixed.get(&quot;model.region.northWest&quot;);&#xD;
     if (northWest == null) {&#xD;
         northWest = new ServerRegion(map, &quot;model.region.northWest&quot;,&#xD;
                                      RegionType.LAND, null);&#xD;
         northWest.bounds.setBounds(new Rectangle(0,0,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+NW&quot;);&#xD;
     }&#xD;
     result.add(northWest);&#xD;
&#xD;
     ServerRegion north = (ServerRegion)fixed.get(&quot;model.region.north&quot;);&#xD;
     if (north == null) {&#xD;
         north = new ServerRegion(map, &quot;model.region.north&quot;,&#xD;
                                  RegionType.LAND, null);&#xD;
         north.bounds.setBounds(new Rectangle(thirdWidth,0,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+N&quot;);&#xD;
     }&#xD;
     result.add(north);&#xD;
&#xD;
     ServerRegion northEast = (ServerRegion)fixed.get(&quot;model.region.northEast&quot;);&#xD;
     if (northEast == null) {&#xD;
         northEast = new ServerRegion(map, &quot;model.region.northEast&quot;,&#xD;
                                      RegionType.LAND, null);&#xD;
         northEast.bounds.setBounds(new Rectangle(twoThirdWidth,0,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+NE&quot;);&#xD;
     }&#xD;
     result.add(northEast);&#xD;
&#xD;
     ServerRegion west = (ServerRegion)fixed.get(&quot;model.region.west&quot;);&#xD;
     if (west == null) {&#xD;
         west = new ServerRegion(map, &quot;model.region.west&quot;,&#xD;
                                 RegionType.LAND, null);&#xD;
         west.bounds.setBounds(new Rectangle(0,thirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+W&quot;);&#xD;
     }&#xD;
     result.add(west);&#xD;
&#xD;
     ServerRegion center = (ServerRegion)fixed.get(&quot;model.region.center&quot;);&#xD;
     if (center == null) {&#xD;
         center = new ServerRegion(map, &quot;model.region.center&quot;,&#xD;
                                   RegionType.LAND, null);&#xD;
         center.bounds.setBounds(new Rectangle(thirdWidth,thirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+center&quot;);&#xD;
     }&#xD;
     result.add(center);&#xD;
&#xD;
     ServerRegion east = (ServerRegion)fixed.get(&quot;model.region.east&quot;);&#xD;
     if (east == null) {&#xD;
         east = new ServerRegion(map, &quot;model.region.east&quot;,&#xD;
                                 RegionType.LAND, null);&#xD;
         east.bounds.setBounds(new Rectangle(twoThirdWidth,thirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+E&quot;);&#xD;
     }&#xD;
     result.add(east);&#xD;
&#xD;
     ServerRegion southWest = (ServerRegion)fixed.get(&quot;model.region.southWest&quot;);&#xD;
     if (southWest == null) {&#xD;
         southWest = new ServerRegion(map, &quot;model.region.southWest&quot;,&#xD;
                                      RegionType.LAND, null);&#xD;
         southWest.bounds.setBounds(new Rectangle(0,twoThirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+SW&quot;);&#xD;
     }&#xD;
     result.add(southWest);&#xD;
&#xD;
     ServerRegion south = (ServerRegion)fixed.get(&quot;model.region.south&quot;);&#xD;
     if (south == null) {&#xD;
         south = new ServerRegion(map, &quot;model.region.south&quot;,&#xD;
                                  RegionType.LAND, null);&#xD;
         south.bounds.setBounds(new Rectangle(thirdWidth,twoThirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+S&quot;);&#xD;
     }&#xD;
     result.add(south);&#xD;
&#xD;
     ServerRegion southEast = (ServerRegion)fixed.get(&quot;model.region.southEast&quot;);&#xD;
     if (southEast == null) {&#xD;
         southEast = new ServerRegion(map, &quot;model.region.southEast&quot;,&#xD;
                                      RegionType.LAND, null);&#xD;
         southEast.bounds.setBounds(new Rectangle(twoThirdWidth,twoThirdHeight,thirdWidth,thirdHeight));&#xD;
         lb.add(&quot;+SE&quot;);&#xD;
     }&#xD;
     result.add(southEast);&#xD;
&#xD;
     boolean allOceans = true;&#xD;
     ServerRegion pacific = (ServerRegion)fixed.get(&quot;model.region.pacific&quot;);&#xD;
     if (pacific == null) {&#xD;
         pacific = new ServerRegion(map, &quot;model.region.pacific&quot;,&#xD;
                                    RegionType.OCEAN, null);&#xD;
         pacific.setDiscoverable(true);&#xD;
         pacific.setScoreValue(PACIFIC_SCORE_VALUE);&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+pacific&quot;);&#xD;
     }&#xD;
     result.add(pacific);&#xD;
     ServerRegion northPacific = (ServerRegion)fixed.get(&quot;model.region.northPacific&quot;);&#xD;
     if (northPacific == null) {&#xD;
         northPacific = new ServerRegion(map, &quot;model.region.northPacific&quot;,&#xD;
                                         RegionType.OCEAN, pacific);&#xD;
         northPacific.setDiscoverable(false); // discovers parent&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+northPacific&quot;);&#xD;
     }&#xD;
     result.add(northPacific);&#xD;
     ServerRegion southPacific = (ServerRegion)fixed.get(&quot;model.region.southPacific&quot;);&#xD;
     if (southPacific == null) {&#xD;
         southPacific = new ServerRegion(map, &quot;model.region.southPacific&quot;,&#xD;
                                         RegionType.OCEAN, pacific);&#xD;
         southPacific.setDiscoverable(false); // discovers parent&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+southPacific&quot;);&#xD;
     }&#xD;
     result.add(southPacific);&#xD;
&#xD;
     ServerRegion atlantic = (ServerRegion)fixed.get(&quot;model.region.atlantic&quot;);&#xD;
     if (atlantic == null) {&#xD;
         atlantic = new ServerRegion(map, &quot;model.region.atlantic&quot;,&#xD;
                                     RegionType.OCEAN, null);&#xD;
         atlantic.setDiscoverable(false);&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+atlantic&quot;);&#xD;
     }&#xD;
     result.add(atlantic);&#xD;
     ServerRegion northAtlantic = (ServerRegion)fixed.get(&quot;model.region.northAtlantic&quot;);&#xD;
     if (northAtlantic == null) {&#xD;
         northAtlantic = new ServerRegion(map, &quot;model.region.northAtlantic&quot;,&#xD;
                                          RegionType.OCEAN, atlantic);&#xD;
         northAtlantic.setDiscoverable(false);&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+northAtlantic&quot;);&#xD;
     }&#xD;
     result.add(northAtlantic);&#xD;
     ServerRegion southAtlantic = (ServerRegion)fixed.get(&quot;model.region.southAtlantic&quot;);&#xD;
     if (southAtlantic == null) {&#xD;
         southAtlantic = new ServerRegion(map, &quot;model.region.southAtlantic&quot;,&#xD;
                                          RegionType.OCEAN, atlantic);&#xD;
         southAtlantic.setDiscoverable(false);&#xD;
         allOceans = false;&#xD;
         lb.add(&quot;+southAtlantic&quot;);&#xD;
     }&#xD;
     result.add(southAtlantic);&#xD;
     // Fill the ocean regions by first filling the quadrants individually,&#xD;
     // then allow the quadrants to overflow into their horizontally&#xD;
     // opposite quadrant, then finally into the whole map.&#xD;
     // This correctly handles cases like:&#xD;
     //&#xD;
     //   NP NP NP NA NA NA      NP NP NP NA NA NA&#xD;
     //   NP L  L  L  L  NA      NP L  L  NA L  NA&#xD;
     //   NP L  NA NA NA NA  or  NP L  NA NA L  NA&#xD;
     //   SP L  SA SA SA SA      SP L  NA L  L  SA&#xD;
     //   SP L  L  L  L  SA      SP L  L  L  L  SA&#xD;
     //   SP SP SP SA SA SA      SP SP SP SA SA SA&#xD;
     //&#xD;
     // or multiple such incursions across the nominal quadrant divisions.&#xD;
     //&#xD;
     if (!allOceans) {&#xD;
         final int maxx = map.getWidth();&#xD;
         final int midx = maxx / 2;&#xD;
         final int maxy = map.getHeight();&#xD;
         final int midy = maxy / 2;&#xD;
         Tile tNP = null, tSP = null, tNA = null, tSA = null, t;&#xD;
         for (int y = midy-1; y >= 0; y--) {&#xD;
             if (tNP == null &amp;&amp; !(t = map.getTile(0, y)).isLand()) tNP = t;&#xD;
             if (tNA == null &amp;&amp; !(t = map.getTile(maxx-1, y)).isLand()) tNA = t;&#xD;
             if (tNP != null &amp;&amp; tNA != null) break;&#xD;
         }&#xD;
         for (int y = midy; y &lt; maxy; y++) {&#xD;
             if (tSP == null &amp;&amp; !(t = map.getTile(0, y)).isLand()) tSP = t;&#xD;
             if (tSA == null &amp;&amp; !(t = map.getTile(maxx-1, y)).isLand()) tSA = t;&#xD;
             if (tSP != null &amp;&amp; tSA != null) break;&#xD;
         }&#xD;
         int nNP = 0, nSP = 0, nNA = 0, nSA = 0;&#xD;
         &#xD;
         Rectangle rNP = new Rectangle(0,0,       midx,midy);&#xD;
         Rectangle rSP = new Rectangle(0,midy,    midx,maxy-midy);&#xD;
         Rectangle rNA = new Rectangle(midx,0,    maxx-midx,midy);&#xD;
         Rectangle rSA = new Rectangle(midx,midy, maxx-midx,maxy-midy);&#xD;
         if (tNP != null) nNP += fillOcean(map, tNP, northPacific,  rNP);&#xD;
         if (tSP != null) nSP += fillOcean(map, tSP, southPacific,  rSP);&#xD;
         if (tNA != null) nNA += fillOcean(map, tNA, northAtlantic, rNA);&#xD;
         if (tSA != null) nSA += fillOcean(map, tSA, southAtlantic, rSA);&#xD;
&#xD;
         Rectangle rN = new Rectangle(0,0,    maxx,midy);&#xD;
         Rectangle rS = new Rectangle(0,midy, maxx,maxy-midy);&#xD;
         if (tNP != null) nNP += fillOcean(map, tNP, northPacific,  rN);&#xD;
         if (tSP != null) nSP += fillOcean(map, tSP, southPacific,  rS);&#xD;
         if (tNA != null) nNA += fillOcean(map, tNA, northAtlantic, rN);&#xD;
         if (tSA != null) nSA += fillOcean(map, tSA, southAtlantic, rS);&#xD;
&#xD;
         Rectangle rAll = new Rectangle(0,0, maxx,maxy);&#xD;
         if (tNP != null) nNP += fillOcean(map, tNP, northPacific,  rAll);&#xD;
         if (tSP != null) nSP += fillOcean(map, tSP, southPacific,  rAll);&#xD;
         if (tNA != null) nNA += fillOcean(map, tNA, northAtlantic, rAll);&#xD;
         if (tSA != null) nSA += fillOcean(map, tSA, southAtlantic, rAll);&#xD;
         lb.add(&quot; filled ocean regions &quot;,&#xD;
             nNP, &quot; North Pacific, &quot;,&#xD;
             nSP, &quot; South Pacific, &quot;,&#xD;
             nNA, &quot; North Atlantic, &quot;,&#xD;
             nSP, &quot; South Atlantic.\n&quot;);&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLclJREeiyW7NaN4qWdw" name="fillOcean" specification="_QUUA8VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLc1JREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLdFJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLdVJREeiyW7NaN4qWdw" name="region" type="_QAcpwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLdlJREeiyW7NaN4qWdw" name="bounds" type="_QSSns1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwLd1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Queue&lt;Tile> q = new LinkedList&lt;>();&#xD;
     int n = 0;&#xD;
     boolean[][] visited = new boolean[map.getWidth()][map.getHeight()];&#xD;
     visited[tile.getX()][tile.getY()] = true;&#xD;
     q.add(tile);&#xD;
&#xD;
     while ((tile = q.poll()) != null) {&#xD;
         region.addTile(tile);&#xD;
         n++;&#xD;
&#xD;
         for (Direction direction : Direction.values()) {&#xD;
             Tile t = map.getAdjacentTile(tile, direction);&#xD;
             if (t != null&#xD;
                 &amp;&amp; !visited[t.getX()][t.getY()]&#xD;
                 &amp;&amp; bounds.contains(t.getX(), t.getY())) {&#xD;
                 visited[t.getX()][t.getY()] = true;&#xD;
                 if ((t.getRegion() == null || t.getRegion() == region)&#xD;
                     &amp;&amp; !t.isLand()) {&#xD;
                     q.add(t);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     return n;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwLeFJREeiyW7NaN4qWdw" name="toString" specification="_QAgUIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwLeVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>StringBuilder sb = new StringBuilder(32);&#xD;
     sb.append(super.toString());&#xD;
     sb.setLength(sb.length() - 1);&#xD;
     sb.append(&quot; &quot;).append(size).append(&quot; &quot;).append(bounds)&#xD;
         .append(&quot;]&quot;);&#xD;
     return sb.toString();&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QAfGAFJREeiyW7NaN4qWdw" name="getBounds" isLeaf="true" method="_QVvkYFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7jlJREeiyW7NaN4qWdw">
                    <body>Get the bounding rectangle for this region.&#xD;
     *&#xD;
     * @return The bounding &lt;code>Rectangle&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUSy1VJREeiyW7NaN4qWdw" type="_QSSns1JREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QAfGAVJREeiyW7NaN4qWdw" name="isGeographic" isLeaf="true" method="_QVvkYlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7j1JREeiyW7NaN4qWdw">
                    <body>Is this a geographic region?&#xD;
     *&#xD;
     * @return True if this is a geographic region.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAfGAlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAfGA1JREeiyW7NaN4qWdw" name="getCenter" method="_QVwLYFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7kFJREeiyW7NaN4qWdw">
                    <body>Get the center of the regions bounds.&#xD;
     *&#xD;
     * @return An two element array [x,y] of the center coordinate.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QAfGBFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QAfGBVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAgUIFJREeiyW7NaN4qWdw" name="toString" method="_QVwLeFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAgUIVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QSVrAFJREeiyW7NaN4qWdw" name="containsCenter" method="_QVwLY1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7kVJREeiyW7NaN4qWdw">
                    <body>Does this region contain the center of another?&#xD;
     *&#xD;
     * @param other The other &lt;code>ServerRegion&lt;/code> to check.&#xD;
     * @return True if the center of the other region is within this one.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QSVrAVJREeiyW7NaN4qWdw" name="other" type="_QAcpwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QSVrAlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUQWkFJREeiyW7NaN4qWdw" name="ServerRegion" method="_QVu9RVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUQWk1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUQWlFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7iVJREeiyW7NaN4qWdw">
                    <body>Trivial constructor for serialization.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> to create in.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUQWkVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUQWklJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUQWlVJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUQ9oFJREeiyW7NaN4qWdw" name="ServerRegion" method="_QVu9SVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUQ9o1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUQ9pFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7ilJREeiyW7NaN4qWdw">
                    <body>Constructor for copying in a new region from an imported game.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUQ9oVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUQ9olJREeiyW7NaN4qWdw" name="region" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUQ9pVJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QURksVJREeiyW7NaN4qWdw" name="ServerRegion" method="_QVvkUFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QURktFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QURktVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7i1JREeiyW7NaN4qWdw">
                    <body>Create a new discoverable server region of a given type.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> to create in.&#xD;
     * @param type The &lt;code>RegionType&lt;/code> to use.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QURkslJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QURks1JREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QURktlJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUSLwFJREeiyW7NaN4qWdw" name="ServerRegion" visibility="private" method="_QVvkVFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUSLxVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUSLxlJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7jFJREeiyW7NaN4qWdw">
                    <body>Create a new fixed server region.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to create in.&#xD;
     * @param key The key for the region.&#xD;
     * @param type The &lt;code>RegionType&lt;/code> to use.&#xD;
     * @param parent The &lt;code>Region&lt;/code> to be the parent of this one.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUSLwVJREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSLwlJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUSLw1JREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSLxFJREeiyW7NaN4qWdw" name="parent" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSLx1JREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUSLyFJREeiyW7NaN4qWdw" name="ServerRegion" visibility="private" method="_QVvkWlJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUSy0lJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUSy01JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWE7jVJREeiyW7NaN4qWdw">
                    <body>Create a new fixed server region.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> to create in.&#xD;
     * @param key The key for the region.&#xD;
     * @param type The &lt;code>RegionType&lt;/code> to use.&#xD;
     * @param parent The &lt;code>Region&lt;/code> to be the parent of this one.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUSLyVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSLylJREeiyW7NaN4qWdw" name="key">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUSy0FJREeiyW7NaN4qWdw" name="type" type="_QUQ9plJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSy0VJREeiyW7NaN4qWdw" name="parent" type="_QSUc4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUSy1FJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUSy1lJREeiyW7NaN4qWdw" name="addTile" method="_QVwLZlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7klJREeiyW7NaN4qWdw">
                    <body>Add the given tile to this region.&#xD;
     *&#xD;
     * @param tile A &lt;code>Tile&lt;/code> to add.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUSy11JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUTZ4FJREeiyW7NaN4qWdw" name="csDiscover" method="_QVwLaFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7k1JREeiyW7NaN4qWdw">
                    <body>Discover this region.&#xD;
     *&#xD;
     * @param player The discovering &lt;code>Player&lt;/code>.&#xD;
     * @param turn The discovery &lt;code>Turn&lt;/code>.&#xD;
     * @param newName The name of the region.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUTZ4VJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUTZ4lJREeiyW7NaN4qWdw" name="turn" type="_QSLS8VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUTZ41JREeiyW7NaN4qWdw" name="newName">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUTZ5FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUTZ5VJREeiyW7NaN4qWdw" name="requireFixedRegions" isStatic="true" method="_QVwLbVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWE7lFJREeiyW7NaN4qWdw">
                    <body>Make the fixed regions if they do not exist in a given map.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to check.&#xD;
     * @param lb A &lt;code>LogBuilder&lt;/code> to log to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUTZ5lJREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUTZ51JREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUTZ6FJREeiyW7NaN4qWdw" type="_QAcpwFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUUA8FJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUUA8VJREeiyW7NaN4qWdw" name="fillOcean" visibility="private" isStatic="true" method="_QVwLclJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFikFJREeiyW7NaN4qWdw">
                    <body>Flood fill ocean regions.&#xD;
     *&#xD;
     * @param map The &lt;code>Map&lt;/code> to fill in.&#xD;
     * @param tile A valid starting &lt;code>Tile&lt;/code>.&#xD;
     * @param region A &lt;code>ServerRegion&lt;/code> to fill with.&#xD;
     * @param bounds A &lt;code>Rectangle&lt;/code> that bounds the filling.&#xD;
     * @return The number of tiles filled.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUUA8lJREeiyW7NaN4qWdw" name="map" type="_QST10lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUUA81JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUUA9FJREeiyW7NaN4qWdw" name="region" type="_QAcpwFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUUA9VJREeiyW7NaN4qWdw" name="bounds" type="_QSSns1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUUA9lJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAj-gFJREeiyW7NaN4qWdw" name="ServerUnit">
                <ownedComment xmi:id="_QWFikVJREeiyW7NaN4qWdw">
                  <body>Server version of a unit.</body>
                </ownedComment>
                <generalization xmi:id="_QUauolJREeiyW7NaN4qWdw" general="_QRXaoVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVVUoVJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWfLNFJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVVUolJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerUnit.class.getName())"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QSfcA1JREeiyW7NaN4qWdw" client="_QAj-gFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwycFJREeiyW7NaN4qWdw" name="ServerUnit" specification="_QUVPEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwycVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyclJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVwyc1JREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwydFJREeiyW7NaN4qWdw" name="ServerUnit" specification="_QUV2IFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwydVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwydlJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyd1JREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyeFJREeiyW7NaN4qWdw" name="type" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyeVJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this(game, location, owner, type, type.getDefaultRole());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwyelJREeiyW7NaN4qWdw" name="ServerUnit" specification="_QUWdMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwye1JREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyfFJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyfVJREeiyW7NaN4qWdw" name="template" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyflJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>this(game, location,&#xD;
         game.getPlayerByNationId(template.getOwner().getNationId()),&#xD;
         game.getSpecification().getUnitType(template.getType().getId()),&#xD;
         game.getSpecification().getDefaultRole());&#xD;
&#xD;
     final Specification spec = getSpecification();&#xD;
     setNationality(template.getNationality());&#xD;
     setEthnicity(template.getEthnicity());&#xD;
     workLeft = template.getWorkLeft();&#xD;
     workType = spec.getGoodsType(template.getWorkType().getId());&#xD;
     movesLeft = template.getMovesLeft();&#xD;
     hitPoints = template.getType().getHitPoints();&#xD;
     changeRole(spec.getRole(template.getRole().getId()),&#xD;
                template.getRoleCount());&#xD;
     setStateUnchecked(template.getState());&#xD;
     if (getType().canCarryGoods()) {&#xD;
         setGoodsContainer(new GoodsContainer(game, this));&#xD;
     }&#xD;
     this.visibleGoodsCount = -1;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwyf1JREeiyW7NaN4qWdw" name="ServerUnit" specification="_QUWdN1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwygFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwygVJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyglJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyg1JREeiyW7NaN4qWdw" name="type" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyhFJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyhVJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game);&#xD;
&#xD;
     UnitType newType = type.getTargetType(ChangeType.CREATION, owner);&#xD;
     this.unitType = (newType == null) ? type : newType;&#xD;
     this.owner = owner;&#xD;
     this.state = UnitState.ACTIVE; // placeholder&#xD;
     this.role = getSpecification().getDefaultRole(); // placeholder&#xD;
     this.location = null;&#xD;
     this.entryLocation = null;&#xD;
     if (unitType.hasAbility(Ability.PERSON)) {&#xD;
         this.nationality = owner.getNationId();&#xD;
         this.ethnicity = nationality;&#xD;
     } else {&#xD;
         this.nationality = null;&#xD;
         this.ethnicity = null;&#xD;
     }&#xD;
&#xD;
     this.workLeft = -1;&#xD;
     this.workType = null;&#xD;
     this.movesLeft = getInitialMovesLeft();&#xD;
     this.hitPoints = unitType.getHitPoints();&#xD;
     this.experienceType = null;&#xD;
     this.experience = 0;&#xD;
     this.workImprovement = null;&#xD;
     this.student = this.teacher = null;&#xD;
     this.turnsOfTraining = 0;&#xD;
     this.indianSettlement = null;&#xD;
     this.hitPoints = unitType.getHitPoints();&#xD;
     this.destination = null;&#xD;
     this.tradeRoute = null;&#xD;
     this.currentStop = -1;&#xD;
     this.treasureAmount = 0;&#xD;
     this.attrition = 0;&#xD;
     this.visibleGoodsCount = -1;&#xD;
&#xD;
     // Fix up role, state and location now other values are present.&#xD;
     changeRole(role, role.getMaximumCount());&#xD;
     setStateUnchecked(state);&#xD;
     setLocation(location);//-vis(owner),-til&#xD;
     if (getType().canCarryGoods()) {&#xD;
         setGoodsContainer(new GoodsContainer(game, this));&#xD;
     }&#xD;
&#xD;
     owner.addUnit(this);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVwyhlJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QUXERlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVwyh1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyiFJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVwyiVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>lb.add(this);&#xD;
     ServerPlayer owner = (ServerPlayer) getOwner();&#xD;
     Specification spec = getSpecification();&#xD;
     Location loc = getLocation();&#xD;
     boolean locDirty = false;&#xD;
     boolean unitDirty = false;&#xD;
&#xD;
     // Attrition.  Do it first as the unit might die.&#xD;
     if (loc instanceof Tile &amp;&amp; !((Tile)loc).hasSettlement()) {&#xD;
         int attrition = getAttrition() + 1;&#xD;
         setAttrition(attrition);&#xD;
         if (attrition > getType().getMaximumAttrition()) {&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.UNIT_LOST,&#xD;
                     &quot;model.unit.attrition&quot;, this)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, getLabel())&#xD;
                 .addStringTemplate(&quot;%location%&quot;,&#xD;
                     loc.getLocationLabelFor(owner)));&#xD;
             cs.add(See.perhaps(), (Tile)loc);&#xD;
             cs.addRemove(See.perhaps().always(owner), loc, &#xD;
                          this);//-vis(owner)&#xD;
             this.dispose();&#xD;
             owner.invalidateCanSeeTiles();//+vis(owner)&#xD;
             lb.add(&quot;, &quot;);&#xD;
             return;&#xD;
         }&#xD;
     } else {&#xD;
         setAttrition(0);&#xD;
     }&#xD;
&#xD;
     // Check for experience-promotion.&#xD;
     GoodsType produce;&#xD;
     UnitType learn;&#xD;
     if (isInColony()&#xD;
         &amp;&amp; (produce = getWorkType()) != null&#xD;
         &amp;&amp; (learn = spec.getExpertForProducing(produce)) != null&#xD;
         &amp;&amp; learn != getType()&#xD;
         &amp;&amp; getType().canBeUpgraded(learn, ChangeType.EXPERIENCE)) {&#xD;
         int maximumExperience = getType().getMaximumExperience();&#xD;
         int maxValue = (100 * maximumExperience) /&#xD;
             getType().getUnitTypeChange(learn).getProbability(ChangeType.EXPERIENCE);&#xD;
         if (maxValue > 0&#xD;
             &amp;&amp; randomInt(logger, &quot;Experience&quot;, random, maxValue)&#xD;
             &lt; Math.min(getExperience(), maximumExperience)) {&#xD;
             StringTemplate oldName = getLabel();&#xD;
             changeType(learn);//-vis: safe within colony&#xD;
             cs.addMessage(See.only(owner),&#xD;
                 new ModelMessage(ModelMessage.MessageType.UNIT_IMPROVED,&#xD;
                     &quot;model.unit.experience&quot;, getColony(), this)&#xD;
                 .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, getLabel())&#xD;
                 .addName(&quot;%colony%&quot;, getColony().getName()));&#xD;
             lb.add(&quot; experience upgrade to &quot;, getType());&#xD;
             unitDirty = true;&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Update moves left.&#xD;
     if (isInMission()) {&#xD;
         getTile().updateIndianSettlement(owner);&#xD;
         setMovesLeft(0);&#xD;
     } else if (isDamaged()) {&#xD;
         setMovesLeft(0);&#xD;
     } else {&#xD;
         setMovesLeft(getInitialMovesLeft());&#xD;
     }&#xD;
&#xD;
     if (getWorkLeft() > 0) {&#xD;
         unitDirty = true;&#xD;
         switch (getState()) {&#xD;
         case IMPROVING:&#xD;
             // Has the improvement been completed already? Do nothing.&#xD;
             TileImprovement ti = getWorkImprovement();&#xD;
             if (ti == null // Another unit on the tile completed it first&#xD;
                 || ti.isComplete()) {&#xD;
                 setState(UnitState.ACTIVE);&#xD;
                 setWorkLeft(-1);&#xD;
             } else {&#xD;
                 // Otherwise do work&#xD;
                 int amount = (getType().hasAbility(Ability.EXPERT_PIONEER))&#xD;
                     ? 2 : 1;&#xD;
                 int turns = ti.getTurnsToComplete();&#xD;
                 if ((turns -= amount) &lt; 0) turns = 0;&#xD;
                 ti.setTurnsToComplete(turns);&#xD;
                 setWorkLeft(turns);&#xD;
                 if (ti.isRoad() &amp;&amp; ti.isComplete()) {&#xD;
                     ti.updateRoadConnections(true);&#xD;
                     for (Tile t : loc.getTile().getSurroundingTiles(1)) {&#xD;
                         if (t.hasRoad()) cs.add(See.perhaps(), t);&#xD;
                     }&#xD;
                     locDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         default:&#xD;
             setWorkLeft(getWorkLeft() - 1);&#xD;
             break;&#xD;
         }&#xD;
&#xD;
         if (loc instanceof HighSeas &amp;&amp; getOwner().isREF()) {&#xD;
             // Swift travel to America for the REF&#xD;
             setWorkLeft(0);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (getState() == UnitState.SKIPPED) {&#xD;
         setState(UnitState.ACTIVE);&#xD;
         unitDirty = true;&#xD;
     }&#xD;
&#xD;
     if (getWorkLeft() &lt;= 0) {&#xD;
         if (getLocation() instanceof HighSeas) {&#xD;
             final Europe europe = owner.getEurope();&#xD;
             final Location dst = getDestination();&#xD;
             Location result = resolveDestination();&#xD;
             if (result == europe) {&#xD;
                 lb.add(&quot; arrives in Europe&quot;);&#xD;
                 if (getTradeRoute() == null) {&#xD;
                     setDestination(null);&#xD;
                     cs.addMessage(See.only(owner),&#xD;
                         new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                             &quot;model.unit.arriveInEurope&quot;,&#xD;
                             europe, this)&#xD;
                         .addNamed(&quot;%europe%&quot;, europe));&#xD;
                 }&#xD;
                 setState(UnitState.ACTIVE);&#xD;
                 setLocation(europe);//-vis: safe/Europe&#xD;
                 cs.add(See.only(owner), owner.getHighSeas());&#xD;
                 locDirty = true;&#xD;
             } else {&#xD;
                 if (!(result instanceof Tile)) {&#xD;
                     logger.warning(&quot;Unit has unsupported destination: &quot;&#xD;
                         + dst + &quot; -> &quot; + result);&#xD;
                     result = getEntryLocation().getTile();&#xD;
                 }&#xD;
                 Tile tile = result.getTile().getSafeTile(owner, random);&#xD;
                 lb.add(&quot; arrives in America at &quot;, tile);&#xD;
                 if (dst != null) {&#xD;
                     lb.add(&quot; sailing for &quot;, dst);&#xD;
                     if (dst instanceof Map) setDestination(null);&#xD;
                 }&#xD;
                 csMove(tile, random, cs);&#xD;
                 locDirty = unitDirty = false; // loc update present&#xD;
             }&#xD;
         } else {&#xD;
             switch (getState()) {&#xD;
             case ACTIVE: case FORTIFIED: case SENTRY: case IN_COLONY:&#xD;
                 break; // These states are stable&#xD;
             case IMPROVING:&#xD;
                 csImproveTile(random, cs);&#xD;
                 setWorkImprovement(null);&#xD;
                 locDirty = true;&#xD;
                 break;&#xD;
             case FORTIFYING:&#xD;
                 setState(UnitState.FORTIFIED);&#xD;
                 unitDirty = true;&#xD;
                 break;&#xD;
             case SKIPPED: default:&#xD;
                 lb.add(&quot; work completed, bad state: &quot;, getState());&#xD;
                 setState(UnitState.ACTIVE);&#xD;
                 unitDirty = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (locDirty) {&#xD;
         cs.add(See.perhaps(), (FreeColGameObject)getLocation());&#xD;
     } else if (unitDirty) {&#xD;
         cs.add(See.perhaps(), this);&#xD;
     } else {&#xD;
         cs.addPartial(See.only(owner), this, &quot;movesLeft&quot;);&#xD;
     }&#xD;
     lb.add(&quot;, &quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZgFJREeiyW7NaN4qWdw" name="csImproveTile" specification="_QUXrUlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZgVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZglJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Tile tile = getTile();&#xD;
     tile.cacheUnseen();//+til&#xD;
     AbstractGoods deliver = getWorkImprovement().getType()&#xD;
         .getProduction(tile.getType());&#xD;
     if (deliver != null) { // Deliver goods if any&#xD;
         final Turn turn = getGame().getTurn();&#xD;
         int amount = deliver.getAmount();&#xD;
         amount = (int)this.applyModifiers(amount, turn,&#xD;
             Modifier.TILE_TYPE_CHANGE_PRODUCTION, deliver.getType());&#xD;
         Settlement settlement = tile.getOwningSettlement();&#xD;
         if (settlement != null &amp;&amp; owner.owns(settlement)) {&#xD;
             amount = (int)settlement.applyModifiers(amount, turn,&#xD;
                 Modifier.TILE_TYPE_CHANGE_PRODUCTION, deliver.getType());&#xD;
             settlement.addGoods(deliver.getType(), amount);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Finish up&#xD;
     TileImprovement ti = getWorkImprovement();&#xD;
     TileType changeType = ti.getChange(tile.getType());&#xD;
     if (changeType != null) {&#xD;
         // Changes like clearing a forest need to be completed,&#xD;
         // whereas for changes like road building the improvement&#xD;
         // is already added and now complete.&#xD;
         tile.changeType(changeType);//-til&#xD;
     }&#xD;
&#xD;
     // Does a resource get exposed?&#xD;
     TileImprovementType tileImprovementType = ti.getType();&#xD;
     int exposeResource = tileImprovementType.getExposeResourcePercent();&#xD;
     if (exposeResource > 0 &amp;&amp; !tile.hasResource()) {&#xD;
         if (randomInt(logger, &quot;Expose resource&quot;, random, 100)&#xD;
             &lt; exposeResource) {&#xD;
             ResourceType resType = RandomChoice&#xD;
                 .getWeightedRandom(logger, &quot;Resource type&quot;,&#xD;
                                    tile.getType().getWeightedResources(),&#xD;
                                    random);&#xD;
             int minValue = resType.getMinValue();&#xD;
             int maxValue = resType.getMaxValue();&#xD;
             int value = minValue + ((minValue == maxValue) ? 0&#xD;
                 : randomInt(logger, &quot;Resource quantity&quot;,&#xD;
                             random, maxValue - minValue + 1));&#xD;
             tile.addResource(new Resource(getGame(), tile,&#xD;
                                           resType, value));//-til&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Expend equipment.&#xD;
     if (changeRoleCount(-ti.getType().getExpendedAmount())) {&#xD;
         // FIXME: assumes tools, make more generic, use&#xD;
         // ti.getType().getRequiredRole().getRequiredGoods()&#xD;
         ServerPlayer owner = (ServerPlayer)getOwner();&#xD;
         StringTemplate locName&#xD;
             = getLocation().getLocationLabelFor(owner);&#xD;
         String messageId = getType() + &quot;.noMoreTools&quot;;&#xD;
         if (!Messages.containsKey(messageId)) {&#xD;
             messageId = &quot;model.unit.noMoreTools&quot;;&#xD;
         }&#xD;
         cs.addMessage(See.only(owner),&#xD;
             new ModelMessage(ModelMessage.MessageType.WARNING,&#xD;
                 messageId, this)&#xD;
             .addStringTemplate(&quot;%unit%&quot;, getLabel())&#xD;
             .addStringTemplate(&quot;%location%&quot;, locName));&#xD;
     }&#xD;
&#xD;
     // Cancel other co-located improvements of the same type&#xD;
     for (Unit unit : tile.getUnitList()) {&#xD;
         if (unit.getWorkImprovement() != null&#xD;
             &amp;&amp; unit.getWorkImprovement().getType() == ti.getType()&#xD;
             &amp;&amp; unit.getState() == UnitState.IMPROVING) {&#xD;
             unit.setWorkLeft(-1);&#xD;
             unit.setWorkImprovement(null);&#xD;
             unit.setState(UnitState.ACTIVE);&#xD;
             unit.setMovesLeft(0);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZg1JREeiyW7NaN4qWdw" name="csEmbark" specification="_QUXrVVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZhFJREeiyW7NaN4qWdw" name="carrier" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZhVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final ServerPlayer owner = (ServerPlayer)getOwner();&#xD;
&#xD;
     Location oldLocation = getLocation();&#xD;
     Colony colony = (oldLocation instanceof WorkLocation) ? getColony()&#xD;
         : null;&#xD;
     if (colony != null) oldLocation.getTile().cacheUnseen();//+til&#xD;
     setLocation(carrier);//-vis: only if on a different tile&#xD;
                          //-til if moving from colony&#xD;
     setMovesLeft(0);&#xD;
     cs.add(See.only(owner), (colony != null) ? colony&#xD;
         : (FreeColGameObject)oldLocation);&#xD;
     if (carrier.getLocation() != oldLocation) {&#xD;
         cs.add(See.only(owner), carrier);&#xD;
     }&#xD;
     if (oldLocation instanceof Tile) {&#xD;
         if (carrier.getTile() != oldLocation) {&#xD;
             cs.addMove(See.only(owner), this, oldLocation,&#xD;
                        carrier.getTile());&#xD;
             owner.invalidateCanSeeTiles();//+vis(serverPlayer)&#xD;
         }&#xD;
         cs.addDisappear(owner, (Tile)oldLocation, this);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZhlJREeiyW7NaN4qWdw" name="csRepairUnit" specification="_QUYSYVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZh1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer owner = (ServerPlayer) getOwner();&#xD;
     setHitPoints(getHitPoints() + 1);&#xD;
     if (!isDamaged()) {&#xD;
         Location loc = getLocation();&#xD;
         cs.addMessage(See.only(owner),&#xD;
             new ModelMessage(&quot;model.unit.unitRepaired&quot;,&#xD;
                 this, (FreeColGameObject)loc)&#xD;
             .addStringTemplate(&quot;%unit%&quot;, getLabel())&#xD;
             .addStringTemplate(&quot;%repairLocation%&quot;,&#xD;
                 loc.getLocationLabelFor(owner)));&#xD;
         setState(UnitState.ACTIVE);&#xD;
     }&#xD;
     cs.addPartial(See.only(owner), this, &quot;hitPoints&quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZiFJREeiyW7NaN4qWdw" name="getSlowedBy" specification="_QUYSY1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZiVJREeiyW7NaN4qWdw" name="newTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZilJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZi1JREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>Player player = getOwner();&#xD;
     Game game = getGame();&#xD;
     CombatModel combatModel = game.getCombatModel();&#xD;
     boolean pirate = hasAbility(Ability.PIRACY);&#xD;
     Unit attacker = null;&#xD;
     double attackPower = 0, totalAttackPower = 0;&#xD;
&#xD;
     if (!isNaval() || getMovesLeft() &lt;= 0) return null;&#xD;
     for (Tile tile : newTile.getSurroundingTiles(1)) {&#xD;
         // Ships in settlements do not slow enemy ships, but:&#xD;
         // FIXME: should a fortress slow a ship?&#xD;
         Player enemy;&#xD;
         if (tile.isLand()&#xD;
             || tile.getColony() != null&#xD;
             || tile.getFirstUnit() == null&#xD;
             || (enemy = tile.getFirstUnit().getOwner()) == player) continue;&#xD;
         for (Unit enemyUnit : tile.getUnitList()) {&#xD;
             if ((pirate || enemyUnit.hasAbility(Ability.PIRACY)&#xD;
                  || (enemyUnit.isOffensiveUnit() &amp;&amp; player.atWarWith(enemy)))&#xD;
                 &amp;&amp; enemyUnit.isNaval()&#xD;
                 &amp;&amp; combatModel.getOffencePower(enemyUnit, this) > attackPower) {&#xD;
                 attackPower = combatModel.getOffencePower(enemyUnit, this);&#xD;
                 totalAttackPower += attackPower;&#xD;
                 attacker = enemyUnit;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (attacker != null) {&#xD;
         double defencePower = combatModel.getDefencePower(attacker, this);&#xD;
         double totalProbability = totalAttackPower + defencePower;&#xD;
         if (randomInt(logger, &quot;Slowed&quot;, random,&#xD;
                 (int)Math.round(totalProbability + 1)) &lt; totalAttackPower) {&#xD;
             int diff = Math.max(0,&#xD;
                 (int)Math.round(totalAttackPower - defencePower));&#xD;
             int moves = Math.min(9, 3 + diff / 3);&#xD;
             setMovesLeft(getMovesLeft() - moves);&#xD;
             logger.info(getId() + &quot; slowed by &quot; + attacker.getId()&#xD;
                 + &quot; by &quot; + Integer.toString(moves) + &quot; moves.&quot;);&#xD;
         } else {&#xD;
             attacker = null;&#xD;
         }&#xD;
     }&#xD;
     return attacker;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZjFJREeiyW7NaN4qWdw" name="csNativeBurialGround" specification="_QUY5clJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZjVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer serverPlayer = (ServerPlayer)getOwner();&#xD;
     Tile tile = getTile();&#xD;
     ServerPlayer indianPlayer = (ServerPlayer)tile.getOwner();&#xD;
     serverPlayer.csContact(indianPlayer, cs);&#xD;
     indianPlayer.csModifyTension(serverPlayer, &#xD;
         Tension.Level.HATEFUL.getLimit(), cs);//+til&#xD;
     serverPlayer.csChangeStance(Stance.WAR, indianPlayer, true, cs);&#xD;
     cs.addMessage(See.only(serverPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
             RumourType.BURIAL_GROUND.getDescriptionKey(), serverPlayer, this)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, indianPlayer.getNationLabel()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZjlJREeiyW7NaN4qWdw" name="csExploreLostCityRumour" specification="_QUY5dFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZj1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZkFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZkVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>ServerPlayer serverPlayer = (ServerPlayer) getOwner();&#xD;
     Tile tile = getTile();&#xD;
     LostCityRumour lostCity = tile.getLostCityRumour();&#xD;
     if (lostCity == null) return true;&#xD;
&#xD;
     Game game = getGame();&#xD;
     Specification spec = game.getSpecification();&#xD;
     int difficulty = spec.getInteger(GameOptions.RUMOUR_DIFFICULTY);&#xD;
     int dx = 10 - difficulty;&#xD;
     UnitType unitType;&#xD;
     Unit newUnit = null;&#xD;
     List&lt;UnitType> treasureUnitTypes&#xD;
         = spec.getUnitTypesWithAbility(Ability.CARRY_TREASURE);&#xD;
&#xD;
     RumourType rumour = lostCity.getType();&#xD;
     if (rumour == null) {&#xD;
         rumour = lostCity.chooseType(this, random);&#xD;
     }&#xD;
     // Filter out failing cases that could only occur if the&#xD;
     // type was explicitly set in debug mode.&#xD;
     switch (rumour) {&#xD;
     case BURIAL_GROUND: case MOUNDS:&#xD;
         if (tile.getOwner() == null || !tile.getOwner().isIndian()) {&#xD;
             rumour = RumourType.NOTHING;&#xD;
         }&#xD;
         break;&#xD;
     case LEARN:&#xD;
         if (getType().getUnitTypesLearntInLostCity().isEmpty()) {&#xD;
             rumour = RumourType.NOTHING;&#xD;
         }&#xD;
         break;&#xD;
     default:&#xD;
         break;&#xD;
     }&#xD;
&#xD;
     // Mounds are a special case that degrade to other cases.&#xD;
     boolean mounds = rumour == RumourType.MOUNDS;&#xD;
     if (mounds) {&#xD;
         boolean done = false;&#xD;
         boolean nothing = false;&#xD;
         while (!done) {&#xD;
             rumour = lostCity.chooseType(this, random);&#xD;
             switch (rumour) {&#xD;
             case NOTHING: // Do not accept nothing-result the first time.&#xD;
                 if (nothing) {&#xD;
                     done = true;&#xD;
                 } else {&#xD;
                     nothing = true;&#xD;
                 }&#xD;
                 break;&#xD;
             case EXPEDITION_VANISHES: case TRIBAL_CHIEF:&#xD;
                 done = true;&#xD;
                 break;&#xD;
             case RUINS:&#xD;
                 done = true;&#xD;
                 // Misiulo confirms that in Col1 deSoto does *not*&#xD;
                 // protect against a burial ground at the same&#xD;
                 // time as a ruins find!&#xD;
                 if (randomInt(logger, &quot;Ruins+Burial&quot;, random, 100)&#xD;
                     >= spec.getInteger(GameOptions.BAD_RUMOUR)) break;&#xD;
                 // Fall through&#xD;
             case BURIAL_GROUND:&#xD;
                 if (tile.getOwner() != null&#xD;
                     &amp;&amp; tile.getOwner().isIndian()) {&#xD;
                     csNativeBurialGround(cs);&#xD;
                 }&#xD;
                 done = true;&#xD;
                 break;&#xD;
             default:&#xD;
                 ; // unacceptable result for mounds&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     logger.info(&quot;Unit &quot; + getId() + &quot; is exploring rumour &quot; + rumour);&#xD;
     boolean result = true;&#xD;
     String key = rumour.getDescriptionKey();&#xD;
     switch (rumour) {&#xD;
     case BURIAL_GROUND:&#xD;
         csNativeBurialGround(cs);&#xD;
         break;&#xD;
     case EXPEDITION_VANISHES:&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                              key, serverPlayer));&#xD;
         result = false;&#xD;
         break;&#xD;
     case NOTHING:&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             lostCity.getNothingMessage(serverPlayer, mounds, random));&#xD;
         break;&#xD;
     case LEARN:&#xD;
         StringTemplate oldName = getLabel();&#xD;
         List&lt;UnitType> learnTypes = getType().getUnitTypesLearntInLostCity();&#xD;
         unitType = getRandomMember(logger, &quot;Choose learn&quot;,&#xD;
                                    learnTypes, random);&#xD;
         changeType(unitType);//-vis(serverPlayer)&#xD;
         serverPlayer.invalidateCanSeeTiles();//+vis(serverPlayer)&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                              key, serverPlayer, this)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, oldName)&#xD;
                 .addNamed(&quot;%type%&quot;, getType()));&#xD;
         break;&#xD;
     case TRIBAL_CHIEF:&#xD;
         int chiefAmount = randomInt(logger, &quot;Chief base amount&quot;,&#xD;
                                     random, dx * 10) + dx * 5;&#xD;
         serverPlayer.modifyGold(chiefAmount);&#xD;
         cs.addPartial(See.only(serverPlayer), serverPlayer, &quot;gold&quot;, &quot;score&quot;);&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                 ((mounds) ? rumour.getAlternateDescriptionKey(&quot;mounds&quot;)&#xD;
                     : key),&#xD;
                 serverPlayer, this)&#xD;
             .addAmount(&quot;%money%&quot;, chiefAmount));&#xD;
         serverPlayer.invalidateCanSeeTiles();//+vis(serverPlayer)&#xD;
         break;&#xD;
     case COLONIST:&#xD;
         List&lt;UnitType> foundTypes&#xD;
             = spec.getUnitTypesWithAbility(Ability.FOUND_IN_LOST_CITY);&#xD;
         unitType = getRandomMember(logger, &quot;Choose found&quot;,&#xD;
                                    foundTypes, random);&#xD;
         newUnit = new ServerUnit(game, tile, serverPlayer,&#xD;
                                  unitType);//-vis: safe, scout on tile&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                              key, serverPlayer, newUnit));&#xD;
         break;&#xD;
     case CIBOLA:&#xD;
         String cityName = NameCache.getNextCityOfCibola();&#xD;
         if (cityName != null) {&#xD;
             int treasureAmount = randomInt(logger,&#xD;
                 &quot;Base treasure amount&quot;, random, dx * 600) + dx * 300;&#xD;
             unitType = getRandomMember(logger, &quot;Choose train&quot;,&#xD;
                                        treasureUnitTypes, random);&#xD;
             newUnit = new ServerUnit(game, tile, serverPlayer,&#xD;
                                      unitType);//-vis: safe, scout on tile&#xD;
             newUnit.setTreasureAmount(treasureAmount);&#xD;
             cs.addMessage(See.only(serverPlayer),&#xD;
                 new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                                  key, serverPlayer, newUnit)&#xD;
                 .addName(&quot;%city%&quot;, cityName)&#xD;
                 .addAmount(&quot;%money%&quot;, treasureAmount));&#xD;
             cs.addGlobalHistory(game,&#xD;
                 new HistoryEvent(game.getTurn(),&#xD;
                     HistoryEvent.HistoryEventType.CITY_OF_GOLD, serverPlayer)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, serverPlayer.getNationLabel())&#xD;
                 .addName(&quot;%city%&quot;, cityName)&#xD;
                 .addAmount(&quot;%treasure%&quot;, treasureAmount));&#xD;
             break;&#xD;
         }&#xD;
         // Fall through, found all the cities of gold.&#xD;
     case RUINS:&#xD;
         int ruinsAmount = randomInt(logger, &quot;Base ruins amount&quot;, random,&#xD;
                                     dx * 2) * 300 + 50;&#xD;
         if (ruinsAmount &lt; 500) { // FIXME: remove magic number&#xD;
             serverPlayer.modifyGold(ruinsAmount);&#xD;
             cs.addPartial(See.only(serverPlayer), serverPlayer,&#xD;
                           &quot;gold&quot;, &quot;score&quot;);&#xD;
         } else {&#xD;
             unitType = getRandomMember(logger, &quot;Choose train&quot;,&#xD;
                                        treasureUnitTypes, random);&#xD;
             newUnit = new ServerUnit(game, tile, serverPlayer,&#xD;
                                      unitType);//-vis: safe, scout on tile&#xD;
             newUnit.setTreasureAmount(ruinsAmount);&#xD;
         }&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                 ((mounds) ? rumour.getAlternateDescriptionKey(&quot;mounds&quot;)&#xD;
                     : key),&#xD;
                 serverPlayer, ((newUnit != null) ? newUnit : this))&#xD;
                 .addAmount(&quot;%money%&quot;, ruinsAmount));&#xD;
         break;&#xD;
     case FOUNTAIN_OF_YOUTH:&#xD;
         ServerEurope europe = (ServerEurope)serverPlayer.getEurope();&#xD;
         if (europe == null) {&#xD;
             // FoY should now be disabled for non-colonial&#xD;
             // players, but leave this in for now as it is harmless.&#xD;
             cs.addMessage(See.only(serverPlayer),&#xD;
                 new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                     rumour.getAlternateDescriptionKey(&quot;noEurope&quot;),&#xD;
                     serverPlayer, this));&#xD;
         } else {&#xD;
             if (serverPlayer.isAI()) { // FIXME: let the AI select&#xD;
                 europe.generateFountainRecruits(dx, random);&#xD;
                 cs.add(See.only(serverPlayer), europe);&#xD;
             } else {&#xD;
                 // Remember, and ask player to select&#xD;
                 serverPlayer.setRemainingEmigrants(dx);&#xD;
                 cs.addTrivial(See.only(serverPlayer), &quot;fountainOfYouth&quot;,&#xD;
                               ChangeSet.ChangePriority.CHANGE_LATE,&#xD;
                               &quot;migrants&quot;, Integer.toString(dx));&#xD;
             }&#xD;
             cs.addMessage(See.only(serverPlayer),&#xD;
                  new ModelMessage(ModelMessage.MessageType.LOST_CITY_RUMOUR,&#xD;
                                   key, serverPlayer, this));&#xD;
             cs.addAttribute(See.only(serverPlayer),&#xD;
                             &quot;sound&quot;, &quot;sound.event.fountainOfYouth&quot;);&#xD;
         }&#xD;
         break;&#xD;
     case NO_SUCH_RUMOUR: case MOUNDS:&#xD;
     default:&#xD;
         logger.warning(&quot;Bogus rumour type: &quot; + rumour);&#xD;
         break;&#xD;
     }&#xD;
     tile.cacheUnseen();//+til&#xD;
     tile.removeLostCityRumour();//-til&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZklJREeiyW7NaN4qWdw" name="csActivateSentries" specification="_QUZgglJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZk1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZlFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (Unit u : tile.getUnitList()) {&#xD;
         if (u.getState() == UnitState.SENTRY) {&#xD;
             u.setState(UnitState.ACTIVE);&#xD;
             cs.add(See.perhaps(), u);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVxZlVJREeiyW7NaN4qWdw" name="collectNewTiles" specification="_QUaHkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVxZllJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVxZl1JREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVxZmFJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final int los = getLineOfSight();&#xD;
     return tile.getSurroundingTiles(0, los).stream()&#xD;
         .filter(t -> !getOwner().canSee(t)).collect(Collectors.toList());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVyAkFJREeiyW7NaN4qWdw" name="csMove" specification="_QUaHlFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyAkVJREeiyW7NaN4qWdw" name="newTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVyAklJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVyAk1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final ServerPlayer serverPlayer = (ServerPlayer)getOwner();&#xD;
&#xD;
     // Plan to update tiles that could not be seen before but will&#xD;
     // now be within the line-of-sight.&#xD;
     final Location oldLocation = getLocation();&#xD;
     List&lt;Tile> oldTiles = (oldLocation.getTile() == null)&#xD;
         ? Collections.&lt;Tile>emptyList()&#xD;
         : oldLocation.getTile().getSurroundingTiles(1, getLineOfSight());&#xD;
     List&lt;Tile> newTiles = collectNewTiles(newTile);&#xD;
&#xD;
     // Update unit state.&#xD;
     setState(UnitState.ACTIVE);&#xD;
     setStateToAllChildren(UnitState.SENTRY);&#xD;
     if (oldLocation instanceof HighSeas) {&#xD;
         ; // Do not try to calculate move cost from Europe!&#xD;
     } else if (oldLocation instanceof Unit) {&#xD;
         setMovesLeft(0); // Disembark always consumes all moves.&#xD;
     } else {&#xD;
         if (getMoveCost(newTile) &lt;= 0) {&#xD;
             logger.warning(&quot;Move of unit: &quot; + getId()&#xD;
                 + &quot; from: &quot; + ((oldLocation == null) ? &quot;null&quot;&#xD;
                     : oldLocation.getTile().getId())&#xD;
                 + &quot; to: &quot; + newTile.getId()&#xD;
                 + &quot; has bogus cost: &quot; + getMoveCost(newTile));&#xD;
             setMovesLeft(0);&#xD;
         }&#xD;
         setMovesLeft(getMovesLeft() - getMoveCost(newTile));&#xD;
     }&#xD;
&#xD;
     // Do the move and explore a rumour if needed.&#xD;
     if (oldLocation instanceof WorkLocation) {&#xD;
         oldLocation.getTile().cacheUnseen();//+til&#xD;
     }&#xD;
     setLocation(newTile);//-vis(serverPlayer),-til if in colony&#xD;
     if (newTile.hasLostCityRumour() &amp;&amp; serverPlayer.isEuropean()&#xD;
         &amp;&amp; !csExploreLostCityRumour(random, cs)) {&#xD;
         cs.addRemove(See.perhaps().always(serverPlayer), oldLocation,&#xD;
                      this);//-vis(serverPlayer)&#xD;
         this.dispose();&#xD;
     }&#xD;
     serverPlayer.invalidateCanSeeTiles();//+vis(serverPlayer)&#xD;
&#xD;
     // Update tiles that are now invisible.&#xD;
     Iterator&lt;Tile> it = oldTiles.iterator();&#xD;
     while (it.hasNext()) {&#xD;
         if (serverPlayer.canSee(it.next())) it.remove();&#xD;
     }&#xD;
     if (!oldTiles.isEmpty()) cs.add(See.only(serverPlayer), oldTiles);&#xD;
     // Unless moving in from off-map, update the old location and&#xD;
     // make sure the move is always visible even if the unit&#xD;
     // dies (including the animation).  However, dead units&#xD;
     // make no discoveries.  Always update the new tile.&#xD;
     if (oldLocation instanceof Tile) {&#xD;
         cs.addMove(See.perhaps().always(serverPlayer), this,&#xD;
                    oldLocation, newTile);&#xD;
         cs.add(See.perhaps().always(serverPlayer),&#xD;
                (FreeColGameObject)oldLocation);&#xD;
     } else {&#xD;
         cs.add(See.only(serverPlayer), (FreeColGameObject)oldLocation);&#xD;
     }&#xD;
     cs.add(See.perhaps().always(serverPlayer), newTile);&#xD;
     if (isDisposed()) return;&#xD;
     serverPlayer.csSeeNewTiles(newTiles, cs);&#xD;
&#xD;
     if (newTile.isLand()) {&#xD;
         Settlement settlement;&#xD;
         Unit unit = null;&#xD;
         int d;&#xD;
         // Claim land for tribe?&#xD;
         if ((newTile.getOwner() == null&#xD;
                 || (newTile.getOwner().isEuropean()&#xD;
                     &amp;&amp; newTile.getOwningSettlement() == null))&#xD;
             &amp;&amp; serverPlayer.isIndian()&#xD;
             &amp;&amp; (settlement = getHomeIndianSettlement()) != null&#xD;
             &amp;&amp; ((d = newTile.getDistanceTo(settlement.getTile()))&#xD;
                 &lt; (settlement.getRadius()&#xD;
                     + settlement.getType().getExtraClaimableRadius()))&#xD;
             &amp;&amp; randomInt(logger, &quot;Claim tribal land&quot;, random, d + 1) == 0) {&#xD;
             newTile.cacheUnseen();//+til&#xD;
             newTile.changeOwnership(serverPlayer, settlement);//-til&#xD;
         }&#xD;
&#xD;
         // Check for first landing&#xD;
         String newLand = null;&#xD;
         boolean firstLanding = !serverPlayer.isNewLandNamed();&#xD;
         if (serverPlayer.isEuropean() &amp;&amp; firstLanding) {&#xD;
             newLand = serverPlayer.getNameForNewLand();&#xD;
             // Set the default value now to prevent multiple attempts.&#xD;
             // The user setNewLandName can override.&#xD;
             serverPlayer.setNewLandName(newLand);&#xD;
             cs.add(See.only(serverPlayer), ChangePriority.CHANGE_LATE,&#xD;
                 new NewLandNameMessage(this, newLand));&#xD;
             logger.finest(&quot;First landing for &quot; + serverPlayer&#xD;
                 + &quot; at &quot; + newTile + &quot; with &quot; + this);&#xD;
         }&#xD;
&#xD;
         // Check for new contacts.&#xD;
         List&lt;ServerPlayer> pending = new ArrayList&lt;>();&#xD;
         for (Tile t : newTile.getSurroundingTiles(1, 1)) {&#xD;
             if (t == null || !t.isLand()) {&#xD;
                 continue; // Invalid tile for contact&#xD;
             }&#xD;
&#xD;
             settlement = t.getSettlement();&#xD;
             ServerPlayer other = (settlement != null)&#xD;
                 ? (ServerPlayer)settlement.getOwner()&#xD;
                 : ((unit = t.getFirstUnit()) != null)&#xD;
                 ? (ServerPlayer)unit.getOwner()&#xD;
                 : null;&#xD;
             if (other == null&#xD;
                 || other == serverPlayer&#xD;
                 || pending.contains(other)) continue; // No contact&#xD;
             if (serverPlayer.csContact(other, cs)) {&#xD;
                 // First contact.  Note contact pending because&#xD;
                 // European first contact now requires a diplomacy&#xD;
                 // interaction to complete before leaving UNCONTACTED&#xD;
                 // state.&#xD;
                 pending.add(other);&#xD;
                 if (serverPlayer.isEuropean()) {&#xD;
                     if (other.isIndian()) {&#xD;
                         Tile offer = (firstLanding &amp;&amp; other.owns(newTile))&#xD;
                             ? newTile&#xD;
                             : null;&#xD;
                         serverPlayer.csNativeFirstContact(other, offer, cs);&#xD;
                     } else {&#xD;
                         serverPlayer.csEuropeanFirstContact(this,&#xD;
                             settlement, unit, cs);&#xD;
                     }&#xD;
                 } else {&#xD;
                     if (other.isIndian()) {&#xD;
                         ; // Do nothing&#xD;
                     } else {&#xD;
                         other.csNativeFirstContact(serverPlayer, null, cs);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
&#xD;
             // Initialize alarm for native settlements or units and&#xD;
             // notify of contact.&#xD;
             ServerPlayer contactPlayer = serverPlayer;&#xD;
             IndianSettlement is = (settlement instanceof IndianSettlement)&#xD;
                 ? (IndianSettlement)settlement&#xD;
                 : null;&#xD;
             if (is != null&#xD;
                 || (unit != null&#xD;
                     &amp;&amp; (is = unit.getHomeIndianSettlement()) != null)&#xD;
                 || (unit != null&#xD;
                     &amp;&amp; (contactPlayer = (ServerPlayer)unit.getOwner())&#xD;
                         .isEuropean()&#xD;
                     &amp;&amp; (is = getHomeIndianSettlement()) != null&#xD;
                     &amp;&amp; is.getTile() != null)) {&#xD;
                 Tile copied = is.getTile().getTileToCache();&#xD;
                 if (contactPlayer.hasExplored(is.getTile())&#xD;
                     &amp;&amp; is.setContacted(contactPlayer)) {//-til&#xD;
                     is.getTile().cacheUnseen(copied);//+til&#xD;
                     cs.add(See.only(contactPlayer), is);&#xD;
                     // First European contact with native settlement.&#xD;
                     StringTemplate nation = is.getOwner().getNationLabel();&#xD;
                     cs.addMessage(See.only(contactPlayer),&#xD;
                         new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                                          &quot;model.unit.nativeSettlementContact&quot;,&#xD;
                                          this, is)&#xD;
                             .addStringTemplate(&quot;%nation%&quot;, nation)&#xD;
                             .addName(&quot;%settlement%&quot;, is.getName()));&#xD;
                     logger.finest(&quot;First contact between &quot;&#xD;
                         + contactPlayer.getId()&#xD;
                         + &quot; and &quot; + is + &quot; at &quot; + newTile);&#xD;
                 }                   &#xD;
             }&#xD;
             csActivateSentries(t, cs);&#xD;
         }&#xD;
     } else { // water&#xD;
         for (Tile t : newTile.getSurroundingTiles(1, 1)) {&#xD;
             if (t == null || t.isLand() || t.getFirstUnit() == null) {&#xD;
                 continue;&#xD;
             }&#xD;
             if (t.getFirstUnit().getOwner()&#xD;
                 != serverPlayer) csActivateSentries(t, cs);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Disembark in colony.&#xD;
     if (isCarrier() &amp;&amp; !isEmpty() &amp;&amp; newTile.getColony() != null&#xD;
         &amp;&amp; getSpecification().getBoolean(GameOptions.DISEMBARK_IN_COLONY)) {&#xD;
         for (Unit u : getUnitList()) {&#xD;
             ((ServerUnit)u).csMove(newTile, random, cs);&#xD;
         }&#xD;
         setMovesLeft(0);&#xD;
     }&#xD;
             &#xD;
     // Check for slowing units.&#xD;
     Unit slowedBy = getSlowedBy(newTile, random);&#xD;
     if (slowedBy != null) {&#xD;
         StringTemplate enemy = slowedBy.getApparentOwnerName();&#xD;
         cs.addMessage(See.only(serverPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                 &quot;model.unit.slowed&quot;, this, slowedBy)&#xD;
             .addStringTemplate(&quot;%unit%&quot;, getLabel(UnitLabelType.NATIONAL))&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, slowedBy.getLabel(UnitLabelType.NATIONAL))&#xD;
             .addStringTemplate(&quot;%enemyNation%&quot;, enemy));&#xD;
     }&#xD;
&#xD;
     // Check for region discovery&#xD;
     Region region = newTile.getDiscoverableRegion();&#xD;
     if (serverPlayer.isEuropean() &amp;&amp; region != null&#xD;
         &amp;&amp; region.getDiscoverer() == null) {&#xD;
         cs.add(See.only(serverPlayer), ChangePriority.CHANGE_LATE,&#xD;
             new NewRegionNameMessage(region, newTile, this,&#xD;
                 serverPlayer.getNameForRegion(region)));&#xD;
         region.setDiscoverer(getId());&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVyAlFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_QAno4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyAlVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverUnit&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QAno4FJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QVyAlFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAoP8FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUVPEFJREeiyW7NaN4qWdw" name="ServerUnit" method="_QVwycFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUVPE1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUVPFFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWFiklJREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUVPEVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUVPElJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUVPFVJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUV2IFJREeiyW7NaN4qWdw" name="ServerUnit" method="_QVwydFJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUV2JVJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUV2JlJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWFik1JREeiyW7NaN4qWdw">
                    <body>Creates a new ServerUnit.&#xD;
     *&#xD;
     * -vis: Visibility issues depending on location.&#xD;
     * -til: Changes appearance if unit goes into a colony.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this unit belongs.&#xD;
     * @param location The &lt;code>Location&lt;/code> to place this at.&#xD;
     * @param owner The &lt;code>Player&lt;/code> owning this unit.&#xD;
     * @param type The type of the unit.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUV2IVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUV2IlJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUV2I1JREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUV2JFJREeiyW7NaN4qWdw" name="type" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUV2J1JREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUWdMFJREeiyW7NaN4qWdw" name="ServerUnit" method="_QVwyelJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUWdNFJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUWdNVJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWFilFJREeiyW7NaN4qWdw">
                    <body>Create a new ServerUnit from a template.&#xD;
     *&#xD;
     * Note all FCGOTs are looked up in the specification by id,&#xD;
     * allowing the template to derive from a different specification&#xD;
     * as might happen when loading a scenario map.&#xD;
     *&#xD;
     * -vis: Visibility issues depending on location.&#xD;
     * -til: Changes appearance if unit goes into a colony.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this unit belongs.&#xD;
     * @param location The &lt;code>Location&lt;/code> to place this at.&#xD;
     * @param template A &lt;code>Unit&lt;/code> to copy from.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUWdMVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUWdMlJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUWdM1JREeiyW7NaN4qWdw" name="template" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUWdNlJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUWdN1JREeiyW7NaN4qWdw" name="ServerUnit" method="_QVwyf1JREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUXEQ1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUXERFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWFilVJREeiyW7NaN4qWdw">
                    <body>Creates a new ServerUnit.&#xD;
     *&#xD;
     * -vis: Visibility issues depending on location.&#xD;
     * -til: Changes appearance if unit goes into a colony.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> in which this unit belongs.&#xD;
     * @param location The &lt;code>Location&lt;/code> to place this at.&#xD;
     * @param owner The &lt;code>Player&lt;/code> owning this unit.&#xD;
     * @param type The type of the unit.&#xD;
     * @param role The role of the unit.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUWdOFJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUWdOVJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXEQFJREeiyW7NaN4qWdw" name="owner" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXEQVJREeiyW7NaN4qWdw" name="type" type="_QRmEIlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXEQlJREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXERVJREeiyW7NaN4qWdw" type="_QAj-gFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUXERlJREeiyW7NaN4qWdw" name="csNewTurn" method="_QVwyhlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUXER1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXESFJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXESVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUXrUlJREeiyW7NaN4qWdw" name="csImproveTile" visibility="private" method="_QVxZgFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFillJREeiyW7NaN4qWdw">
                    <body>Completes a tile improvement.&#xD;
     *&#xD;
     * +til: Resolves the change of appearance.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUXrU1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUXrVFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUXrVVJREeiyW7NaN4qWdw" name="csEmbark" method="_QVxZg1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFil1JREeiyW7NaN4qWdw">
                    <body>Embark a unit.&#xD;
     *&#xD;
     * @param carrier The &lt;code>Unit&lt;/code> to embark on.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUXrVlJREeiyW7NaN4qWdw" name="carrier" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUYSYFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUYSYVJREeiyW7NaN4qWdw" name="csRepairUnit" method="_QVxZhlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFimFJREeiyW7NaN4qWdw">
                    <body>Repair a unit.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUYSYlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUYSY1JREeiyW7NaN4qWdw" name="getSlowedBy" visibility="private" method="_QVxZiFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFimVJREeiyW7NaN4qWdw">
                    <body>If a unit moves, check if an opposing naval unit slows it down.&#xD;
     * Note that the unit moves are reduced here.&#xD;
     *&#xD;
     * @param newTile The &lt;code>Tile&lt;/code> the unit is moving to.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @return Either an enemy unit that causes a slowdown, or null if none.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUYSZFJREeiyW7NaN4qWdw" name="newTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUY5cFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUY5cVJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUY5clJREeiyW7NaN4qWdw" name="csNativeBurialGround" visibility="private" method="_QVxZjFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFimlJREeiyW7NaN4qWdw">
                    <body>Explores a lost city, finding a native burial ground.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to add changes to.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUY5c1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUY5dFJREeiyW7NaN4qWdw" name="csExploreLostCityRumour" visibility="private" method="_QVxZjlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFim1JREeiyW7NaN4qWdw">
                    <body>Explore a lost city.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to add changes to.&#xD;
     * @return True if the unit survives.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUY5dVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUZggFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUZggVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUZgglJREeiyW7NaN4qWdw" name="csActivateSentries" visibility="private" method="_QVxZklJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFinFJREeiyW7NaN4qWdw">
                    <body>Activate sentried units on a tile.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to activate sentries on.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUZgg1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUZghFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUaHkFJREeiyW7NaN4qWdw" name="collectNewTiles" method="_QVxZlVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFinVJREeiyW7NaN4qWdw">
                    <body>Collects the tiles surrounding this unit that the player&#xD;
     * can not currently see, but now should as a result of a move.&#xD;
     *&#xD;
     * @param tile The center tile to look from.&#xD;
     * @return A list of new tiles to see.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUaHkVJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUaHklJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUaHk1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUaHlFJREeiyW7NaN4qWdw" name="csMove" method="_QVyAkFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWFinlJREeiyW7NaN4qWdw">
                    <body>Move a unit.&#xD;
     *&#xD;
     * @param newTile The &lt;code>Tile&lt;/code> to move to.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUaHlVJREeiyW7NaN4qWdw" name="newTile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUauoFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUauoVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAuWkFJREeiyW7NaN4qWdw" name="TradeSession">
                <ownedComment xmi:id="_QWFin1JREeiyW7NaN4qWdw">
                  <body>A type of session to handle trading.</body>
                </ownedComment>
                <generalization xmi:id="_QSk7kFJREeiyW7NaN4qWdw" general="_QAY_YVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVV7sFJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWfyQVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVV7sVJREeiyW7NaN4qWdw" value="Logger.getLogger(TradeSession.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVV7slJREeiyW7NaN4qWdw" name="movesLeft" isLeaf="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVWiwlJREeiyW7NaN4qWdw" name="actionTaken" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVWixlJREeiyW7NaN4qWdw" name="canBuy" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVXJ0VJREeiyW7NaN4qWdw" name="canSell" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVXw4FJREeiyW7NaN4qWdw" name="canGift" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVyAmlJREeiyW7NaN4qWdw" name="TradeSession" specification="_QUbVsFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyAm1JREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVyAnFJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVyAnVJREeiyW7NaN4qWdw" type="_QAuWkFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(makeSessionKey(TradeSession.class, unit, settlement));&#xD;
     movesLeft = unit.getMovesLeft();&#xD;
     actionTaken = false;&#xD;
     boolean atWar = settlement.getOwner().atWarWith(unit.getOwner());&#xD;
     canBuy = !atWar;&#xD;
     canSell = !atWar &amp;&amp; unit.hasGoodsCargo();&#xD;
     canGift = unit.hasGoodsCargo();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVyAnlJREeiyW7NaN4qWdw" name="complete" specification="_QUb8wlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyAn1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>super.complete(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynoFJREeiyW7NaN4qWdw" name="getBuy" specification="_QAvksFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVynoVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return canBuy;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynolJREeiyW7NaN4qWdw" name="getSell" specification="_QAvkslJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyno1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return canSell;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynpFJREeiyW7NaN4qWdw" name="getGift" specification="_QAwLwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVynpVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return canGift;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynplJREeiyW7NaN4qWdw" name="setBuy" specification="_QAwLwlJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>actionTaken = true;&#xD;
     canBuy = false;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynp1JREeiyW7NaN4qWdw" name="setSell" specification="_QAwLw1JREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>actionTaken = true;&#xD;
     canSell = false;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynqFJREeiyW7NaN4qWdw" name="setGift" specification="_QAwLxFJREeiyW7NaN4qWdw">
                  <language>java</language>
                  <body>actionTaken = true;&#xD;
     canGift = false;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QAvksFJREeiyW7NaN4qWdw" name="getBuy" method="_QVynoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAvksVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAvkslJREeiyW7NaN4qWdw" name="getSell" method="_QVynolJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAvks1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAwLwFJREeiyW7NaN4qWdw" name="getGift" method="_QVynpFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QAwLwVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QAwLwlJREeiyW7NaN4qWdw" name="setBuy" method="_QVynplJREeiyW7NaN4qWdw"/>
                <ownedOperation xmi:id="_QAwLw1JREeiyW7NaN4qWdw" name="setSell" method="_QVynp1JREeiyW7NaN4qWdw"/>
                <ownedOperation xmi:id="_QAwLxFJREeiyW7NaN4qWdw" name="setGift" method="_QVynqFJREeiyW7NaN4qWdw"/>
                <ownedOperation xmi:id="_QUbVsFJREeiyW7NaN4qWdw" name="TradeSession" method="_QVyAmlJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUbVs1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUb8wFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWGJoFJREeiyW7NaN4qWdw">
                    <body>Creates a new &lt;code>TradeSession&lt;/code>.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> that is trading.&#xD;
     * @param settlement The &lt;code>Settlement&lt;/code> to trade with.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUbVsVJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUbVslJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUb8wVJREeiyW7NaN4qWdw" type="_QAuWkFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUb8wlJREeiyW7NaN4qWdw" name="complete" method="_QVyAnlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUb8w1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QAyoAFJREeiyW7NaN4qWdw" name="ServerPlayer">
                <ownedComment xmi:id="_QWGJoVJREeiyW7NaN4qWdw">
                  <body>A &lt;code>Player&lt;/code> with additional (server specific) information.&#xD;
 *&#xD;
That is: pointers to this player's&#xD;
{@link Connection} and {@link Socket}</body>
                </ownedComment>
                <generalization xmi:id="_QVEO4FJREeiyW7NaN4qWdw" general="_QRunAFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVYX8FJREeiyW7NaN4qWdw" name="logger" visibility="private" isLeaf="true" isStatic="true" type="_QRVlcFJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWgZUVJREeiyW7NaN4qWdw">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVYX8VJREeiyW7NaN4qWdw" value="Logger.getLogger(ServerPlayer.class.getName())"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVYX8lJREeiyW7NaN4qWdw" name="ALARM_RADIUS" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVYX81JREeiyW7NaN4qWdw" value="2"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVYX9FJREeiyW7NaN4qWdw" name="ALARM_TILE_IN_USE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVYX9VJREeiyW7NaN4qWdw" value="2"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVYX9lJREeiyW7NaN4qWdw" name="IS_DEAD" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVY_AFJREeiyW7NaN4qWdw" value="-1"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVY_AVJREeiyW7NaN4qWdw" name="IS_ALIVE" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVY_AlJREeiyW7NaN4qWdw" value="0"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVY_A1JREeiyW7NaN4qWdw" name="AUTORECRUIT" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVY_BFJREeiyW7NaN4qWdw" value="1"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVY_BVJREeiyW7NaN4qWdw" name="SCORE_SETTLEMENT_DESTROYED" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVY_BlJREeiyW7NaN4qWdw" value="-5"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVZmEFJREeiyW7NaN4qWdw" name="SCORE_NATION_DESTROYED" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVZmEVJREeiyW7NaN4qWdw" value="-50"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVZmElJREeiyW7NaN4qWdw" name="SCORE_GOLD" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVZmE1JREeiyW7NaN4qWdw" value="0.001"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVaNIFJREeiyW7NaN4qWdw" name="SCORE_FOUNDING_FATHER" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVaNIVJREeiyW7NaN4qWdw" value="5"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVaNIlJREeiyW7NaN4qWdw" name="SCORE_INDEPENDENCE_BONUS_FIRST" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVaNI1JREeiyW7NaN4qWdw" value="100"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVaNJFJREeiyW7NaN4qWdw" name="SCORE_INDEPENDENCE_BONUS_SECOND" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVaNJVJREeiyW7NaN4qWdw" value="50"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVaNJlJREeiyW7NaN4qWdw" name="SCORE_INDEPENDENCE_BONUS_THIRD" isLeaf="true" isStatic="true" isReadOnly="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVaNJ1JREeiyW7NaN4qWdw" value="25"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVaNKFJREeiyW7NaN4qWdw" name="socket" visibility="private" type="_QSn-4VJREeiyW7NaN4qWdw" association="_QWhAYVJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVa0MVJREeiyW7NaN4qWdw" name="connection" type="_QSxv4VJREeiyW7NaN4qWdw" isReadOnly="true" association="_QWhncFJREeiyW7NaN4qWdw"/>
                <ownedAttribute xmi:id="_QVa0MlJREeiyW7NaN4qWdw" name="connected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVa0M1JREeiyW7NaN4qWdw" value="false"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVa0NFJREeiyW7NaN4qWdw" name="remainingEmigrants">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVa0NVJREeiyW7NaN4qWdw" value="0"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVbbQFJREeiyW7NaN4qWdw" name="stanceDirty" visibility="private" isLeaf="true" type="_QAyoAFJREeiyW7NaN4qWdw" isOrdered="true" isReadOnly="true" association="_QWiOgFJREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVbbQVJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVbbQlJREeiyW7NaN4qWdw" value="new ArrayList&lt;>()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_QVbbRFJREeiyW7NaN4qWdw" name="extraTrades" visibility="private" isLeaf="true" type="_QRiZwlJREeiyW7NaN4qWdw" isOrdered="true" isReadOnly="true" association="_QWiOg1JREeiyW7NaN4qWdw">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVcCUFJREeiyW7NaN4qWdw" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_QVcCUVJREeiyW7NaN4qWdw" value="new ArrayList&lt;>()"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_QS0MIVJREeiyW7NaN4qWdw" client="_QAyoAFJREeiyW7NaN4qWdw" supplier="_QAYYUFJREeiyW7NaN4qWdw" contract="_QAYYUFJREeiyW7NaN4qWdw"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynqVJREeiyW7NaN4qWdw" name="ServerPlayer" specification="_QUeZAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVynqlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVynq1JREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVynrFJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game, id);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVynrVJREeiyW7NaN4qWdw" name="ServerPlayer" specification="_QUfAEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVynrlJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVynr1JREeiyW7NaN4qWdw" name="admin">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVynsFJREeiyW7NaN4qWdw" name="nation" type="_QSuskVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVynsVJREeiyW7NaN4qWdw" name="socket" type="_QSn-4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVynslJREeiyW7NaN4qWdw" name="connection" type="_QSxv4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVyns1JREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>super(game);&#xD;
&#xD;
     if (nation == null) throw new IllegalArgumentException(&quot;Null nation&quot;);&#xD;
     final Specification spec = getSpecification();&#xD;
&#xD;
     this.name = nation.getRulerName();&#xD;
     this.admin = admin;&#xD;
     this.nationId = nation.getId();&#xD;
     this.immigration = 0;&#xD;
     if (nation.isUnknownEnemy()) { // virtual &quot;enemy privateer&quot; player&#xD;
         this.nationType = null;&#xD;
         this.playerType = PlayerType.COLONIAL;&#xD;
         this.europe = null;&#xD;
         this.monarch = null;&#xD;
         this.gold = 0;&#xD;
         this.setAI(true);&#xD;
     } else if (nation.getType() != null) {&#xD;
         this.nationType = nation.getType();&#xD;
         try {&#xD;
             addFeatures(nationType);&#xD;
         } catch (Throwable error) {&#xD;
             error.printStackTrace();&#xD;
         }&#xD;
         if (nationType.isEuropean()) {&#xD;
             /*&#xD;
              * Setting the amount of gold to&#xD;
              * &quot;getGameOptions().getInteger(GameOptions.STARTING_MONEY)&quot;&#xD;
              *&#xD;
              * just before starting the game. See&#xD;
              * &quot;net.sf.freecol.server.control.PreGameController&quot;.&#xD;
              */&#xD;
             this.playerType = (nationType.isREF()) ? PlayerType.ROYAL&#xD;
                 : PlayerType.COLONIAL;&#xD;
             this.europe = new ServerEurope(game, this);&#xD;
             initializeHighSeas();&#xD;
             if (this.playerType == PlayerType.COLONIAL) {&#xD;
                 this.monarch = new Monarch(game, this);&#xD;
                 // In BR#2615 misiulo reports that Col1 players start&#xD;
                 // with 2 crosses.  This is surprising, but you could&#xD;
                 // argue that some level of religious unrest might&#xD;
                 // contribute to the fact there is an expedition to&#xD;
                 // the new world underway.&#xD;
                 this.immigration = spec.getInteger(GameOptions.PLAYER_IMMIGRATION_BONUS);&#xD;
             }&#xD;
             this.gold = 0;&#xD;
         } else { // indians&#xD;
             this.playerType = PlayerType.NATIVE;&#xD;
             this.gold = Player.GOLD_NOT_ACCOUNTED;&#xD;
         }&#xD;
     } else {&#xD;
         throw new IllegalArgumentException(&quot;Bogus nation: &quot; + nation);&#xD;
     }&#xD;
     this.market = new Market(getGame(), this);&#xD;
     this.liberty = 0;&#xD;
     this.currentFather = null;&#xD;
&#xD;
     this.socket = socket;&#xD;
     this.connection = connection;&#xD;
     connected = connection != null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVyntFJREeiyW7NaN4qWdw" name="getSocket" specification="_QA1rUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVyntVJREeiyW7NaN4qWdw" type="_QSn-4VJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>return socket;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOsFJREeiyW7NaN4qWdw" name="setConnection" specification="_QUfnIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOsVJREeiyW7NaN4qWdw" name="connection" type="_QSxv4VJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>this.connection = connection;&#xD;
     connected = (connection != null);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOslJREeiyW7NaN4qWdw" name="send" specification="_QUfnIlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOs1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>askElement(cs.build(this));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOtFJREeiyW7NaN4qWdw" name="askElement" specification="_QUfnJFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOtVJREeiyW7NaN4qWdw" name="request" type="_QSzlE1JREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (this.connection == null) return;&#xD;
&#xD;
     while (request != null) {&#xD;
         Element reply;&#xD;
         try {&#xD;
             reply = this.connection.ask(request);&#xD;
             if (reply == null) break;&#xD;
         } catch (IOException e) {&#xD;
             logger.log(Level.WARNING, &quot;Could not send \&quot;&quot;&#xD;
                 + request.getTagName() + &quot;\&quot;-message.&quot;, e);&#xD;
             break;&#xD;
         }&#xD;
&#xD;
         try {&#xD;
             request = this.connection.handle(reply);&#xD;
         } catch (FreeColException fce) {&#xD;
             logger.log(Level.WARNING, &quot;Exception processing reply \&quot;&quot;&#xD;
                 + reply.getTagName() + &quot;\&quot;-message.&quot;, fce);&#xD;
             break;&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOtlJREeiyW7NaN4qWdw" name="updateCurrentFather" specification="_QUfnJlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOt1JREeiyW7NaN4qWdw" name="ff" type="_QSs3YVJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>setCurrentFather(ff);&#xD;
     clearOfferedFathers();&#xD;
     if (ff != null) {&#xD;
         logger.finest(getId() + &quot; is recruiting &quot; + ff.getId()&#xD;
             + &quot; in &quot; + getGame().getTurn());&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOuFJREeiyW7NaN4qWdw" name="addExtraTrade" specification="_QUgOMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOuVJREeiyW7NaN4qWdw" name="ag" type="_QRiZwlJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>extraTrades.add(ag);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOulJREeiyW7NaN4qWdw" name="flushExtraTrades" specification="_QUgOMlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOu1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>while (!extraTrades.isEmpty()) {&#xD;
         AbstractGoods ag = extraTrades.remove(0);&#xD;
         propagateToEuropeanMarkets(ag.getType(), ag.getAmount(), random);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOvFJREeiyW7NaN4qWdw" name="randomizeGame" specification="_QUgONFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOvVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (!isEuropean() || isREF() || isUnknownEnemy()) return;&#xD;
     final Specification spec = getGame().getSpecification();&#xD;
&#xD;
     // Set initial immigration target&#xD;
     int i0 = spec.getInteger(GameOptions.INITIAL_IMMIGRATION);&#xD;
     immigrationRequired = (int)applyModifiers((float)i0, null,&#xD;
         Modifier.RELIGIOUS_UNREST_BONUS);&#xD;
&#xD;
     // Add initial gold&#xD;
     modifyGold(spec.getInteger(GameOptions.STARTING_MONEY));&#xD;
&#xD;
     // Choose starting immigrants&#xD;
     ((ServerEurope)getEurope()).initializeMigration(random);&#xD;
&#xD;
     // Randomize the initial market prices&#xD;
     Market market = getMarket();&#xD;
     StringBuilder sb = new StringBuilder();&#xD;
     boolean changed = false;&#xD;
     for (GoodsType type : spec.getGoodsTypeList()) {&#xD;
         String prefix = &quot;model.option.&quot;&#xD;
             + type.getSuffix(&quot;model.goods.&quot;);&#xD;
         // these options are not available for all goods types&#xD;
         if (spec.hasOption(prefix + &quot;.minimumPrice&quot;)&#xD;
             &amp;&amp; spec.hasOption(prefix + &quot;.maximumPrice&quot;)) {&#xD;
             int min = spec.getInteger(prefix + &quot;.minimumPrice&quot;);&#xD;
             int max = spec.getInteger(prefix + &quot;.maximumPrice&quot;);&#xD;
             if (max &lt; min) { // User error&#xD;
                 int bad = min;&#xD;
                 min = max;&#xD;
                 max = bad;&#xD;
             } else if (max == min) continue;&#xD;
             int add = randomInt(null, null, random, max - min);&#xD;
             if (add > 0) {&#xD;
                 market.setInitialPrice(type, min + add);&#xD;
                 market.update(type);&#xD;
                 market.flushPriceChange(type);&#xD;
                 sb.append(&quot;, &quot;).append(type.getId())&#xD;
                     .append(&quot; -> &quot;).append(min + add);&#xD;
                 changed = true;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (changed) {&#xD;
         logger.finest(&quot;randomizeGame(&quot; + getId() + &quot;) initial prices: &quot;&#xD;
             + sb.toString().substring(2));&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOvlJREeiyW7NaN4qWdw" name="checkForDeath" specification="_QA2SYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOv1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (isUnknownEnemy()) return IS_ALIVE;&#xD;
     final Specification spec = getGame().getSpecification();&#xD;
     /*&#xD;
      * Die if: (isNative &amp;&amp; (no colonies or units))&#xD;
      *      || ((rebel or independent) &amp;&amp; !(has coastal colony))&#xD;
      *      || (isREF &amp;&amp; !(rebel nation left) &amp;&amp; (all units in Europe))&#xD;
      *      || ((no units in New World)&#xD;
      *         &amp;&amp; ((year > 1600) || (cannot get a unit from Europe)))&#xD;
      */&#xD;
     switch (getPlayerType()) {&#xD;
     case NATIVE: // All natives units are viable&#xD;
         return (getUnits().isEmpty()) ? IS_DEAD : IS_ALIVE;&#xD;
&#xD;
     case COLONIAL: // Handle the hard case below&#xD;
         break;&#xD;
&#xD;
     case REBEL: case INDEPENDENT:&#xD;
         // Post-declaration European player needs a coastal colony&#xD;
         // and can not hope for resupply from Europe.&#xD;
         return (getNumberOfPorts() > 0) ? IS_ALIVE : IS_DEAD;&#xD;
&#xD;
     case ROYAL:&#xD;
         return (getRebels().isEmpty()) ? IS_DEAD : IS_ALIVE;&#xD;
&#xD;
     case UNDEAD:&#xD;
         return (getUnits().isEmpty()) ? IS_DEAD : IS_ALIVE;&#xD;
&#xD;
     default:&#xD;
         throw new IllegalStateException(&quot;Bogus player type&quot;);&#xD;
     }&#xD;
&#xD;
     // Quick check for a colony.  Do not log, this is the common case.&#xD;
     if (!getColonies().isEmpty()) return IS_ALIVE;&#xD;
&#xD;
     // Do not kill the observing player during a debug run.&#xD;
     if (!isAI() &amp;&amp; FreeColDebugger.getDebugRunTurns() >= 0) return IS_ALIVE;&#xD;
&#xD;
     // Do not kill the unknown enemy!&#xD;
     if (isUnknownEnemy()) return IS_ALIVE;&#xD;
&#xD;
     // Traverse player units, look for valid carriers, colonists,&#xD;
     // carriers with units, carriers with goods.&#xD;
     boolean hasCarrier = false, hasColonist = false, hasEmbarked = false,&#xD;
         hasGoods = false;&#xD;
     for (Unit unit : getUnits()) {&#xD;
         if (unit.isCarrier()) {&#xD;
             if (unit.hasGoodsCargo()) hasGoods = true;&#xD;
             hasCarrier = true;&#xD;
             continue;&#xD;
         }&#xD;
&#xD;
         // Must be able to found new colony or capture units&#xD;
         if (!unit.isColonist() &amp;&amp; !unit.isOffensiveUnit()) continue;&#xD;
         hasColonist = true;&#xD;
&#xD;
         // Verify if unit is in new world, or on a carrier in new world&#xD;
         Unit carrier;&#xD;
         if ((carrier = unit.getCarrier()) != null) {&#xD;
             if (carrier.hasTile()) {&#xD;
                 logger.info(getName() + &quot; alive, unit &quot; + unit.getId()&#xD;
                     + &quot; (embarked) on map.&quot;);&#xD;
                 return IS_ALIVE;&#xD;
             }&#xD;
             hasEmbarked = true;&#xD;
         }&#xD;
         if (unit.hasTile() &amp;&amp; !unit.isInMission()) {&#xD;
             logger.info(getName() + &quot; alive, unit &quot; + unit.getId()&#xD;
                 + &quot; on map.&quot;);&#xD;
             return IS_ALIVE;&#xD;
         }&#xD;
     }&#xD;
     // The player does not have any valid units or settlements on the map.&#xD;
&#xD;
     int mandatory = spec.getInteger(GameOptions.MANDATORY_COLONY_YEAR);&#xD;
     if (getGame().getTurn().getYear() >= mandatory) {&#xD;
         // After the season cutover year there must be a presence&#xD;
         // in the New World.&#xD;
         logger.info(getName() + &quot; dead, no presence >= &quot; + mandatory);&#xD;
         return IS_DEAD;&#xD;
     }&#xD;
&#xD;
     // No problems, unit available on carrier but off map, or goods&#xD;
     // available to be sold.&#xD;
     if (hasEmbarked) {&#xD;
         logger.info(getName() + &quot; alive, has embarked unit.&quot;);&#xD;
         return IS_ALIVE;&#xD;
     } else if (hasGoods) {&#xD;
         logger.info(getName() + &quot; alive, has cargo.&quot;);&#xD;
         return IS_ALIVE;&#xD;
     }&#xD;
&#xD;
     // It is necessary to still have a carrier.&#xD;
     final Europe europe = getEurope();&#xD;
     int goldNeeded = 0;&#xD;
     if (!hasCarrier) {&#xD;
         int price = Integer.MAX_VALUE;&#xD;
         if (europe != null) {&#xD;
             for (UnitType type&#xD;
                      : spec.getUnitTypesWithAbility(Ability.NAVAL_UNIT)) {&#xD;
                 int p = europe.getUnitPrice(type);&#xD;
                 if (p != UNDEFINED &amp;&amp; p &lt; price) price = p;&#xD;
             }&#xD;
         }&#xD;
         if (price == Integer.MAX_VALUE || !checkGold(price)) {&#xD;
             logger.info(getName() + &quot; dead, can not buy carrier.&quot;);&#xD;
             return IS_DEAD;&#xD;
         }&#xD;
         goldNeeded += price;&#xD;
     }&#xD;
&#xD;
     // A colonist is required.&#xD;
     if (hasColonist) {&#xD;
         logger.info(getName() + &quot; alive, has waiting colonist.&quot;);&#xD;
         return IS_ALIVE;&#xD;
     } else if (europe == null) {&#xD;
         logger.info(getName() + &quot; dead, can not recruit.&quot;);&#xD;
         return IS_DEAD;&#xD;
     }&#xD;
     UnitType unitType = null;&#xD;
     int price = europe.getRecruitPrice();&#xD;
     for (UnitType type : spec.getUnitTypesWithAbility(Ability.FOUND_COLONY)) {&#xD;
         int p = europe.getUnitPrice(type);&#xD;
         if (p != UNDEFINED &amp;&amp; p &lt; price) price = p;&#xD;
     }&#xD;
     goldNeeded += price;&#xD;
     if (checkGold(goldNeeded)) {&#xD;
         logger.info(getName() + &quot; alive, can buy colonist.&quot;);&#xD;
         return IS_ALIVE;&#xD;
     }&#xD;
&#xD;
     // Col1 auto-recruits a unit in Europe if you run out before&#xD;
     // the cutover year.&#xD;
     logger.info(getName() + &quot; survives by autorecruit.&quot;);&#xD;
     return AUTORECRUIT;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOwFJREeiyW7NaN4qWdw" name="checkForREFDefeat" specification="_QA3ggVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOwVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (!isREF()) {&#xD;
         throw new IllegalStateException(&quot;Checking for REF player defeat when player not REF.&quot;);&#xD;
     }&#xD;
&#xD;
     // No one to fight?  Either the rebels are dead, or the REF&#xD;
     // was already defeated and the rebels are independent.&#xD;
     // Either way, it does not need to surrender.&#xD;
     if (getRebels().isEmpty()) return false;&#xD;
&#xD;
     // Not defeated if there are settlements.&#xD;
     if (!getSettlements().isEmpty()) return false;&#xD;
&#xD;
     // Not defeated if there is a non-zero navy and enough land units.&#xD;
     final int landREFUnitsRequired = 7; // FIXME: magic number&#xD;
     final CombatModel cm = getGame().getCombatModel();&#xD;
     boolean naval = false;&#xD;
     int land = 0;&#xD;
     int power = 0;&#xD;
     for (Unit u : getUnits()) {&#xD;
         if (u.isNaval()) naval = true; else {&#xD;
             if (u.hasAbility(Ability.REF_UNIT)) {&#xD;
                 land++;&#xD;
                 power += cm.getOffencePower(u, null);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (naval &amp;&amp; land >= landREFUnitsRequired) return false;&#xD;
&#xD;
     // Still not defeated as long as military strength is greater&#xD;
     // than the rebels.&#xD;
     int rebelPower = 0;&#xD;
     for (Player rebel : getRebels()) {&#xD;
         rebelPower += rebel.getUnits().stream()&#xD;
             .filter(u -> !u.isNaval())&#xD;
             .mapToDouble(u -> cm.getOffencePower(u, null)).sum();&#xD;
     }&#xD;
     if (power > rebelPower) return false;&#xD;
&#xD;
     // REF is defeated&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOwlJREeiyW7NaN4qWdw" name="csKill" specification="_QUg1QFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOw1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>setDead(true);&#xD;
     cs.addPartial(See.all(), this, &quot;dead&quot;);&#xD;
     cs.addDead(this);&#xD;
&#xD;
     // Clean up missions and remove tension/alarm/stance.&#xD;
     for (Player other : getGame().getLivePlayers(this)) {&#xD;
         if (isEuropean() &amp;&amp; other.isIndian()) {&#xD;
             for (IndianSettlement s : other.getIndianSettlements()) {&#xD;
                 if (s.hasMissionary(this)) {&#xD;
                     ((ServerIndianSettlement)s).csKillMissionary(null, cs);&#xD;
                 }&#xD;
                 s.getTile().cacheUnseen();//+til&#xD;
                 ((ServerIndianSettlement)s).removeAlarm(this);//-til&#xD;
             }&#xD;
             other.removeTension(this);&#xD;
         }&#xD;
         other.setStance(this, null);&#xD;
     }&#xD;
&#xD;
     // Remove settlements.  Update formerly owned tiles.&#xD;
     List&lt;Settlement> settlements = getSettlements();&#xD;
     while (!settlements.isEmpty()) {&#xD;
         csDisposeSettlement(settlements.remove(0), cs);&#xD;
     }&#xD;
&#xD;
     // Clean up remaining tile ownerships&#xD;
     for (Tile tile : getGame().getMap().getAllTiles()) {&#xD;
         if (tile.getOwner() == this) {&#xD;
             tile.cacheUnseen();//+til&#xD;
             tile.changeOwnership(null, null);//-til&#xD;
             cs.add(See.perhaps().always(this), tile);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Remove units&#xD;
     List&lt;Unit> units = getUnits();&#xD;
     while (!units.isEmpty()) {&#xD;
         Unit u = units.remove(0);&#xD;
         if (u.hasTile()) cs.add(See.perhaps(), u.getTile());&#xD;
         cs.addRemove(See.perhaps().always(this),&#xD;
                      u.getLocation(), u);//-vis(this)&#xD;
         u.dispose();&#xD;
     }&#xD;
&#xD;
     // Remove European stuff&#xD;
     if (market != null) {&#xD;
         market.dispose();&#xD;
         market = null;&#xD;
     }&#xD;
     if (monarch != null) {&#xD;
         monarch.dispose();&#xD;
         monarch = null;&#xD;
     }&#xD;
     if (europe != null) {&#xD;
         europe.dispose();&#xD;
         europe = null;&#xD;
     }&#xD;
     currentFather = null;&#xD;
     if (foundingFathers != null) foundingFathers.clear();&#xD;
     if (offeredFathers != null) offeredFathers.clear();&#xD;
     // FIXME: stance and tension?&#xD;
     if (tradeRoutes != null) tradeRoutes.clear();&#xD;
     // Retaining model messages for now&#xD;
     // Retaining history for now&#xD;
     if (lastSales != null) lastSales = null;&#xD;
     featureContainer.clear();&#xD;
&#xD;
     invalidateCanSeeTiles();//+vis(this)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOxFJREeiyW7NaN4qWdw" name="csWithdraw" specification="_QUg1QlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOxVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>cs.addMessage(See.all(),&#xD;
         new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
             ((isEuropean() &amp;&amp; getPlayerType() == PlayerType.COLONIAL)&#xD;
                 ? &quot;model.player.dead.european&quot;&#xD;
                 : &quot;model.player.dead.native&quot;),&#xD;
             this)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, getNationLabel()));&#xD;
     Game game = getGame();&#xD;
     cs.addGlobalHistory(game,&#xD;
         new HistoryEvent(game.getTurn(),&#xD;
             HistoryEvent.HistoryEventType.NATION_DESTROYED, null)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, getNationLabel()));&#xD;
     csKill(cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVzOxlJREeiyW7NaN4qWdw" name="checkFoundingFather" specification="_QA4HkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVzOx1JREeiyW7NaN4qWdw" type="_QSs3YVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>FoundingFather father = null;&#xD;
     if (currentFather != null) {&#xD;
         int extraLiberty = getRemainingFoundingFatherCost();&#xD;
         if (extraLiberty &lt;= 0) {&#xD;
             boolean overflow = getSpecification()&#xD;
                 .getBoolean(GameOptions.SAVE_PRODUCTION_OVERFLOW);&#xD;
             setLiberty((overflow) ? -extraLiberty : 0);&#xD;
             father = currentFather;&#xD;
             currentFather = null;&#xD;
         }&#xD;
     }&#xD;
     return father;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1wFJREeiyW7NaN4qWdw" name="canRecruitFoundingFather" specification="_QA4HkVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1wVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Specification spec = getGame().getSpecification();&#xD;
     switch (getPlayerType()) {&#xD;
     case COLONIAL:&#xD;
         break;&#xD;
     case REBEL: case INDEPENDENT:&#xD;
         if (!spec.getBoolean(GameOptions.CONTINUE_FOUNDING_FATHER_RECRUITMENT)) return false;&#xD;
         break;&#xD;
     default:&#xD;
         return false;&#xD;
     }&#xD;
     return canHaveFoundingFathers() &amp;&amp; currentFather == null&#xD;
         &amp;&amp; !getSettlements().isEmpty()&#xD;
         &amp;&amp; getFatherCount() &lt; spec.getFoundingFathers().size();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1wlJREeiyW7NaN4qWdw" name="getRandomFoundingFathers" specification="_QUhcUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1w1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz1xFJREeiyW7NaN4qWdw" type="_QSs3YVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVz1xVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Build weighted random choice for each father type&#xD;
     final Game game = getGame();&#xD;
     final Specification spec = game.getSpecification();&#xD;
     final int age = game.getAge();&#xD;
     EnumMap&lt;FoundingFatherType, List&lt;RandomChoice&lt;FoundingFather>>> choices&#xD;
         = new EnumMap&lt;>(FoundingFatherType.class);&#xD;
     for (FoundingFather father : spec.getFoundingFathers()) {&#xD;
         if (!hasFather(father) &amp;&amp; father.isAvailableTo(this)) {&#xD;
             FoundingFatherType type = father.getType();&#xD;
             List&lt;RandomChoice&lt;FoundingFather>> rc = choices.get(type);&#xD;
             if (rc == null) rc = new ArrayList&lt;>();&#xD;
             int weight = father.getWeight(age);&#xD;
             rc.add(new RandomChoice&lt;>(father, weight));&#xD;
             choices.put(father.getType(), rc);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Select one from each father type&#xD;
     List&lt;FoundingFather> randomFathers = new ArrayList&lt;>();&#xD;
     LogBuilder lb = new LogBuilder(64);&#xD;
     lb.add(&quot;Random fathers for &quot;, getDebugName());&#xD;
     for (FoundingFatherType type : FoundingFatherType.values()) {&#xD;
         List&lt;RandomChoice&lt;FoundingFather>> rc = choices.get(type);&#xD;
         if (rc != null) {&#xD;
             FoundingFather f = RandomChoice.getWeightedRandom(logger,&#xD;
                 &quot;Choose founding father&quot;, rc, random);&#xD;
             if (f != null) {&#xD;
                 randomFathers.add(f);&#xD;
                 lb.add(&quot;:&quot;, f.getSuffix());&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     lb.log(logger, Level.INFO);&#xD;
     return randomFathers;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1xlJREeiyW7NaN4qWdw" name="addHistory" specification="_QUhcVFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1x1JREeiyW7NaN4qWdw" name="event" type="_QSCJAlJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>history.add(event);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1yFJREeiyW7NaN4qWdw" name="updateScore" specification="_QA4uoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1yVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int oldScore = score;&#xD;
     score = getUnits().stream()&#xD;
             .mapToInt(u -> u.getType().getScoreValue()).sum()&#xD;
         + getColonies().stream()&#xD;
             .mapToInt(c -> c.getLiberty()).sum()&#xD;
         + SCORE_FOUNDING_FATHER * getFathers().size();&#xD;
     int gold = getGold();&#xD;
     if (gold != GOLD_NOT_ACCOUNTED) {&#xD;
         score += (int)Math.floor(SCORE_GOLD * gold);&#xD;
     }&#xD;
     &#xD;
     int bonus = 0;&#xD;
     for (HistoryEvent h : getHistory()) {&#xD;
         if (getId().equals(h.getPlayerId())) {&#xD;
             switch (h.getEventType()) {&#xD;
             case INDEPENDENCE:&#xD;
                 switch (h.getScore()) {&#xD;
                 case 0: bonus = SCORE_INDEPENDENCE_BONUS_FIRST; break;&#xD;
                 case 1: bonus = SCORE_INDEPENDENCE_BONUS_SECOND; break;&#xD;
                 case 2: bonus = SCORE_INDEPENDENCE_BONUS_THIRD; break;&#xD;
                 default: bonus = 0; break;&#xD;
                 }&#xD;
                 break;&#xD;
             default:&#xD;
                 score += h.getScore();&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     score += (score * bonus) / 100;&#xD;
&#xD;
     return score != oldScore;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1ylJREeiyW7NaN4qWdw" name="hasExplored" specification="_QUiDYlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1y1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz1zFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return tile.isExploredBy(this);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz1zVJREeiyW7NaN4qWdw" name="exploreTile" specification="_QUiqclJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz1zlJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz1z1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>boolean ret = !hasExplored(tile);&#xD;
     if (ret) tile.setExplored(this, true);&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz10FJREeiyW7NaN4qWdw" name="exploreTiles" specification="_QUiqdVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz10VJREeiyW7NaN4qWdw" name="tiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz10lJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVz101JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Set&lt;Tile> result = new HashSet&lt;>();&#xD;
     for (Tile t : tiles) {&#xD;
         if (exploreTile(t)) result.add(t);&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz11FJREeiyW7NaN4qWdw" name="exploreForSettlement" specification="_QUj4kFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz11VJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz11lJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVz111JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Set&lt;Tile> tiles = new HashSet&lt;>(settlement.getOwnedTiles());&#xD;
     tiles.addAll(settlement.getTile().getSurroundingTiles(1,&#xD;
                  settlement.getLineOfSight()));&#xD;
     return exploreTiles(tiles);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QVz12FJREeiyW7NaN4qWdw" name="exploreForUnit" specification="_QUj4lFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QVz12VJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVz12lJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVz121JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return (getGame() == null || getGame().getMap() == null || unit == null&#xD;
         || !(unit.getLocation() instanceof Tile)) &#xD;
         ? Collections.&lt;Tile>emptySet()&#xD;
         : exploreTiles(unit.getTile().getSurroundingTiles(0,&#xD;
                 unit.getLineOfSight()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c0FJREeiyW7NaN4qWdw" name="exploreMap" specification="_QA58wFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c0VJREeiyW7NaN4qWdw" name="reveal">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV0c0lJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QV0c01JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Set&lt;Tile> result = new HashSet&lt;>();&#xD;
     for (Tile tile : getGame().getMap().getAllTiles()) {&#xD;
         if (hasExplored(tile) != reveal) {&#xD;
             tile.setExplored(this, reveal);//-vis(this)&#xD;
             result.add(tile);&#xD;
         }&#xD;
     }&#xD;
     invalidateCanSeeTiles();//+vis(this)&#xD;
     if (!reveal) {&#xD;
         for (Settlement s : getSettlements()) exploreForSettlement(s);&#xD;
         for (Unit u : getUnits()) exploreForUnit(u);&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c1FJREeiyW7NaN4qWdw" name="reassignTiles" specification="_QUkfo1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c1VJREeiyW7NaN4qWdw" name="tiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c1lJREeiyW7NaN4qWdw" name="prefer" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c11JREeiyW7NaN4qWdw" name="avoid" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>HashMap&lt;Settlement, Integer> votes = new HashMap&lt;>();&#xD;
     HashMap&lt;Tile, Settlement> claims = new HashMap&lt;>();&#xD;
     Settlement claimant;&#xD;
     for (Tile tile : tiles) {&#xD;
         if (tile.isOccupied()) continue;&#xD;
         votes.clear();&#xD;
         for (Tile t : tile.getSurroundingTiles(1)) {&#xD;
             claimant = t.getOwningSettlement();&#xD;
             if (claimant != null&#xD;
                 // BR#3375773 found a case where tiles were&#xD;
                 // still owned by a settlement that had been&#xD;
                 // previously destroyed.  These should be gone, but...&#xD;
                 &amp;&amp; !claimant.isDisposed()&#xD;
                 &amp;&amp; claimant.getOwner() != null&#xD;
                 &amp;&amp; claimant.getOwner().canOwnTile(tile)&#xD;
                 &amp;&amp; (claimant.getOwner().isIndian()&#xD;
                     || claimant.getTile().getDistanceTo(tile)&#xD;
                     &lt;= claimant.getRadius())) {&#xD;
                 // Weight claimant settlements:&#xD;
                 //   settlements owned by the same player&#xD;
                 //     > settlements owned by same type of player&#xD;
                 //     > other settlements&#xD;
                 int value = (prefer == null) ? 1&#xD;
                     : (claimant.getOwner() == prefer) ? 3&#xD;
                     : (claimant.getOwner().isEuropean()&#xD;
                         == prefer.isEuropean()) ? 2&#xD;
                     : 1;&#xD;
                 if (votes.get(claimant) != null) {&#xD;
                     value += votes.get(claimant);&#xD;
                 }&#xD;
                 votes.put(claimant, value);&#xD;
             }&#xD;
         }&#xD;
         boolean lastResort = false;&#xD;
         int bestValue = 0;&#xD;
         claimant = null;&#xD;
         for (Entry&lt;Settlement, Integer> entry : votes.entrySet()) {&#xD;
             if (avoid == entry.getKey()) {&#xD;
                 lastResort = true;&#xD;
                 continue;&#xD;
             }&#xD;
             int value = entry.getValue();&#xD;
             if (bestValue &lt; value) {&#xD;
                 bestValue = value;&#xD;
                 claimant = entry.getKey();&#xD;
             }&#xD;
         }&#xD;
         if (claimant == null &amp;&amp; lastResort) claimant = avoid;&#xD;
         claims.put(tile, claimant);&#xD;
     }&#xD;
     for (Entry&lt;Tile, Settlement> e : claims.entrySet()) {&#xD;
         Tile t = e.getKey();&#xD;
         if ((claimant = e.getValue()) == null) {&#xD;
             t.changeOwnership(null, null);//-til&#xD;
         } else {&#xD;
             ServerPlayer newOwner = (ServerPlayer)claimant.getOwner();&#xD;
             t.changeOwnership(newOwner, claimant);//-til&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c2FJREeiyW7NaN4qWdw" name="createUnits" specification="_QUlGsVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c2VJREeiyW7NaN4qWdw" name="abstractUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c2lJREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c21JREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QV0c3FJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (location == null) return Collections.&lt;Unit>emptyList();&#xD;
     List&lt;Unit> units = new ArrayList&lt;>();&#xD;
&#xD;
     final Game game = getGame();&#xD;
     final Specification spec = game.getSpecification();&#xD;
     for (AbstractUnit au : abstractUnits) {&#xD;
         UnitType type = au.getType(spec);&#xD;
         Role role = au.getRole(spec);&#xD;
         // @compat 0.10.x&#xD;
         // The REF always had an exemption from the availability&#xD;
         // rules.  We are transitioning to it being subject to the&#xD;
         // normal rules, which requires REF nations to have the&#xD;
         // INDEPENDENT_NATION ability (or they do not get&#xD;
         // man-o-war).  We are also handling the role transition.&#xD;
         //&#xD;
         // Drop the isREF() branch when the compatibility code&#xD;
         // goes away.&#xD;
         if (isREF()) {&#xD;
             if (!role.isAvailableTo(this, type)) {&#xD;
                 if (null != role.getId()) switch (role.getId()) {&#xD;
                     case &quot;model.role.soldier&quot;:&#xD;
                         role = spec.getRole(&quot;model.role.infantry&quot;);&#xD;
                         break;&#xD;
                     case &quot;model.role.dragoon&quot;:&#xD;
                         role = spec.getRole(&quot;model.role.cavalry&quot;);&#xD;
                         break;&#xD;
                 }&#xD;
             }&#xD;
         } else {&#xD;
             if (!type.isAvailableTo(this)) {&#xD;
                 logger.warning(&quot;Ignoring abstract unit &quot; + au&#xD;
                     + &quot; unavailable to: &quot; + getId());&#xD;
                 continue;&#xD;
             }&#xD;
             if (!role.isAvailableTo(this, type)) {&#xD;
                 logger.warning(&quot;Ignoring abstract unit &quot; + au&#xD;
                     + &quot; with role &quot; + role&#xD;
                     + &quot; unavailable to: &quot; + getId());&#xD;
                 continue;&#xD;
             }&#xD;
         }&#xD;
         // end @compat 0.10.x&#xD;
         for (int i = 0; i &lt; au.getNumber(); i++) {&#xD;
             ServerUnit su = new ServerUnit(game, location, this, type,&#xD;
                                            role);//-vis(this)&#xD;
             units.add(su);&#xD;
         }&#xD;
     }&#xD;
     return units;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c3VJREeiyW7NaN4qWdw" name="loadShips" specification="_QUltwVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c3lJREeiyW7NaN4qWdw" name="landUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c31JREeiyW7NaN4qWdw" name="navalUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c4FJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c4VJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QV0c4lJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Unit> leftOver = new ArrayList&lt;>();&#xD;
     randomShuffle(logger, &quot;Naval load&quot;, navalUnits, random);&#xD;
     randomShuffle(logger, &quot;Land load&quot;, landUnits, random);&#xD;
     LogBuilder lb = new LogBuilder(256);&#xD;
     lb.mark();&#xD;
     landUnit: for (Unit unit : landUnits) {&#xD;
         for (Unit carrier : navalUnits) {&#xD;
             if (carrier.canAdd(unit)) {&#xD;
                 unit.setLocation(carrier);//-vis(owner)&#xD;
                 lb.add(unit, &quot; -> &quot;, carrier, &quot;, &quot;);&#xD;
                 continue landUnit;&#xD;
             }&#xD;
         }&#xD;
         leftOver.add(unit);&#xD;
     }&#xD;
     if (lb.grew(&quot;Load ships: &quot;)) {&#xD;
         lb.shrink(&quot;, &quot;);&#xD;
         lb.log(logger, Level.FINEST);&#xD;
     }        &#xD;
     return leftOver;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c41JREeiyW7NaN4qWdw" name="priceMercenaries" specification="_QUm74VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c5FJREeiyW7NaN4qWdw" name="mercenaries" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c5VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int mercPrice = mercenaries.stream()&#xD;
         .mapToInt(au -> getPrice(au)).sum();&#xD;
     if (!checkGold(mercPrice)) mercPrice = getGold();&#xD;
     return mercPrice;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV0c5lJREeiyW7NaN4qWdw" name="csFlushMarket" specification="_QUoKAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV0c51JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV0c6FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Market market = getMarket();&#xD;
     if (market == null) return false;&#xD;
     boolean ret = false;&#xD;
     StringBuilder sb = new StringBuilder(32);&#xD;
     sb.append(&quot;Flush market for &quot;).append(getId()).append(&quot;:&quot;);&#xD;
     for (GoodsType type : getSpecification().getGoodsTypeList()) {&#xD;
         if (csFlushMarket(type, cs)) {&#xD;
             sb.append(&quot; &quot;).append(type.getId());&#xD;
             ret = true;&#xD;
         }&#xD;
     }&#xD;
     if (ret) logger.finest(sb.toString());&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1D4FJREeiyW7NaN4qWdw" name="csFlushMarket" specification="_QUoKA1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1D4VJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D4lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D41JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Market market = getMarket();&#xD;
     boolean ret = market.hasPriceChanged(type);&#xD;
     if (ret) {&#xD;
         // This type of goods has changed price, so we will update&#xD;
         // the market and send a message as well.&#xD;
         cs.addMessage(See.only(this),&#xD;
                       market.makePriceChangeMessage(type));&#xD;
         market.flushPriceChange(type);&#xD;
         cs.add(See.only(this), market.getMarketData(type));&#xD;
     }&#xD;
     return ret;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1D5FJREeiyW7NaN4qWdw" name="buy" specification="_QUoxEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1D5VJREeiyW7NaN4qWdw" name="container" type="_QRsx01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D5lJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D51JREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV1D6FJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Market market = getMarket();&#xD;
     final int price = market.getBidPrice(type, amount);&#xD;
     if (!checkGold(price)) return -1;&#xD;
&#xD;
     modifyGold(-price);&#xD;
     market.modifySales(type, -amount);&#xD;
     if (container != null) container.addGoods(type, amount);&#xD;
     market.modifyIncomeBeforeTaxes(type, -price);&#xD;
     market.modifyIncomeAfterTaxes(type, -price);&#xD;
     int marketAmount = (int)applyModifiers((float)amount,&#xD;
         getGame().getTurn(), Modifier.TRADE_BONUS, type);&#xD;
     market.addGoodsToMarket(type, -marketAmount);&#xD;
     return marketAmount;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1D6VJREeiyW7NaN4qWdw" name="sell" specification="_QUpYIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1D6lJREeiyW7NaN4qWdw" name="container" type="_QRsx01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D61JREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D7FJREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV1D7VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Market market = getMarket();&#xD;
     final int tax = getTax();&#xD;
     final int incomeBeforeTaxes = market.getSalePrice(type, amount);&#xD;
     final int incomeAfterTaxes = ((100 - tax) * incomeBeforeTaxes) / 100;&#xD;
     &#xD;
     modifyGold(incomeAfterTaxes);&#xD;
     market.modifySales(type, amount);&#xD;
     if (container != null) container.addGoods(type, -amount);&#xD;
     market.modifyIncomeBeforeTaxes(type, incomeBeforeTaxes);&#xD;
     market.modifyIncomeAfterTaxes(type, incomeAfterTaxes);&#xD;
     int marketAmount = (int)applyModifiers((float)amount,&#xD;
         getGame().getTurn(), Modifier.TRADE_BONUS, type);&#xD;
     market.addGoodsToMarket(type, marketAmount);&#xD;
     return marketAmount;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1D7lJREeiyW7NaN4qWdw" name="addStanceChange" specification="_QS2BUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1D71JREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (!stanceDirty.contains(other)) stanceDirty.add(other);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1D8FJREeiyW7NaN4qWdw" name="csChangeStance" specification="_QUpYJVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1D8VJREeiyW7NaN4qWdw" name="stance" type="_QSbxoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D8lJREeiyW7NaN4qWdw" name="otherPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D81JREeiyW7NaN4qWdw" name="symmetric">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV1D9FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1D9VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>ServerPlayer other = otherPlayer;&#xD;
     boolean change = false;&#xD;
     Stance old = getStance(otherPlayer);&#xD;
&#xD;
     if (old != stance) {&#xD;
         int modifier = old.getTensionModifier(stance);&#xD;
         setStance(otherPlayer, stance);&#xD;
         if (modifier != 0) {&#xD;
             csModifyTension(otherPlayer, modifier, cs);//+til&#xD;
         }&#xD;
         cs.addHistory(this, new HistoryEvent(getGame().getTurn(),&#xD;
                 HistoryEvent.getEventTypeFromStance(stance), otherPlayer)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, otherPlayer.getNationLabel()));&#xD;
         logger.info(&quot;Stance modification &quot; + getName()&#xD;
             + &quot; &quot; + old + &quot; -> &quot; + stance + &quot; wrt &quot; + otherPlayer.getName());&#xD;
         this.addStanceChange(other);&#xD;
         if (old != Stance.UNCONTACTED) {&#xD;
             cs.addMessage(See.only(other),&#xD;
                 new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                     stance.getStanceChangeKey(), this)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, getNationLabel()));&#xD;
         }&#xD;
         cs.addStance(See.only(this), this, stance, otherPlayer);&#xD;
         cs.addStance(See.only(other), this, stance, otherPlayer);&#xD;
         change = true;&#xD;
     }&#xD;
     if (symmetric &amp;&amp; (old = otherPlayer.getStance(this)) != stance) {&#xD;
         int modifier = old.getTensionModifier(stance);&#xD;
         otherPlayer.setStance(this, stance);&#xD;
         if (modifier != 0) {&#xD;
             other.csModifyTension(this, modifier, cs);//+til&#xD;
         }&#xD;
         cs.addHistory(otherPlayer, new HistoryEvent(getGame().getTurn(),&#xD;
                 HistoryEvent.getEventTypeFromStance(stance), this)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, this.getNationLabel()));&#xD;
         logger.info(&quot;Stance modification &quot; + otherPlayer.getName()&#xD;
             + &quot; &quot; + old + &quot; -> &quot; + stance&#xD;
             + &quot; wrt &quot; + getName() + &quot; (symmetric)&quot;);&#xD;
         other.addStanceChange(this);&#xD;
         if (old != Stance.UNCONTACTED) {&#xD;
             cs.addMessage(See.only(this),&#xD;
                 new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                     stance.getStanceChangeKey(), otherPlayer)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, otherPlayer.getNationLabel()));&#xD;
         }&#xD;
         cs.addStance(See.only(this), otherPlayer, stance, this);&#xD;
         cs.addStance(See.only(other), otherPlayer, stance, this);&#xD;
         change = true;&#xD;
     }&#xD;
&#xD;
     return change;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1q8FJREeiyW7NaN4qWdw" name="csModifyTension" specification="_QUp_NFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1q8VJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q8lJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV1q81JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>csModifyTension(player, add, null, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1q9FJREeiyW7NaN4qWdw" name="csModifyTension" specification="_QUqmQFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1q9VJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q9lJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV1q91JREeiyW7NaN4qWdw" name="origin" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q-FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Tension.Level oldLevel = getTension(player).getLevel();&#xD;
     getTension(player).modify(add);&#xD;
     if (oldLevel != getTension(player).getLevel()) {&#xD;
         cs.add(See.only((ServerPlayer)player), this);&#xD;
     }&#xD;
&#xD;
     // Propagate tension change as settlement alarm to all&#xD;
     // settlements except the one that originated it (if any).&#xD;
     if (isIndian()) {&#xD;
         for (IndianSettlement is : getIndianSettlements()) {&#xD;
             if (is == origin || !is.hasContacted(player)) continue;&#xD;
             ((ServerIndianSettlement)is).csModifyAlarm(player, add,&#xD;
                                                        false, cs);//+til&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1q-VJREeiyW7NaN4qWdw" name="csNewTurn" specification="_QUrNUFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1q-lJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q-1JREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q_FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>lb.add(&quot;PLAYER &quot;, getName(), &quot;: &quot;);&#xD;
&#xD;
     // Settlements&#xD;
     List&lt;Settlement> settlements = new ArrayList&lt;>(getSettlements());&#xD;
     int newSoL = 0, newImmigration = getImmigration();&#xD;
     for (Settlement settlement : settlements) {&#xD;
         ((ServerModelObject)settlement).csNewTurn(random, lb, cs);&#xD;
         newSoL += settlement.getSoL();&#xD;
     }&#xD;
     newImmigration = getImmigration() - newImmigration;&#xD;
&#xD;
     int numberOfColonies = settlements.size();&#xD;
     if (numberOfColonies > 0) {&#xD;
         newSoL = newSoL / numberOfColonies;&#xD;
         if (oldSoL / 10 != newSoL / 10) {&#xD;
             cs.addMessage(See.only(this),&#xD;
                 new ModelMessage(ModelMessage.MessageType.SONS_OF_LIBERTY,&#xD;
                                  (newSoL > oldSoL)&#xD;
                                  ? &quot;model.player.soLIncrease&quot;&#xD;
                                  : &quot;model.player.soLDecrease&quot;, this)&#xD;
                           .addAmount(&quot;%oldSoL%&quot;, oldSoL)&#xD;
                           .addAmount(&quot;%newSoL%&quot;, newSoL));&#xD;
         }&#xD;
         oldSoL = newSoL; // Remember SoL for check changes at next turn.&#xD;
     }&#xD;
&#xD;
     // Europe.&#xD;
     if (europe != null) {&#xD;
         ((ServerModelObject) europe).csNewTurn(random, lb, cs);&#xD;
         modifyImmigration(europe.getImmigration(newImmigration));&#xD;
     }&#xD;
     // Units.&#xD;
     for (Unit unit : new ArrayList&lt;>(getUnits())) {&#xD;
         try {&#xD;
             ((ServerModelObject) unit).csNewTurn(random, lb, cs);&#xD;
         } catch (ClassCastException e) {&#xD;
             logger.log(Level.SEVERE, &quot;Not a ServerUnit: &quot; + unit.getId(), e);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (isEuropean()) { // Update liberty and immigration&#xD;
         // Auto-emigrate if selection not allowed.&#xD;
         if (hasAbility(Ability.SELECT_RECRUIT)) {&#xD;
             cs.addPartial(See.only(this), this, &quot;immigration&quot;);&#xD;
         } else {&#xD;
             while (checkEmigrate()) {&#xD;
                 csEmigrate(MigrationType.getUnspecificSlot(),&#xD;
                            MigrationType.NORMAL, random, cs);&#xD;
             }&#xD;
         }&#xD;
         cs.addPartial(See.only(this), this, &quot;liberty&quot;);&#xD;
&#xD;
         if (getSpecification().getBoolean(GameOptions.ENABLE_UPKEEP)) {&#xD;
             csPayUpkeep(random, cs);&#xD;
         }&#xD;
&#xD;
         int probability = getSpecification().getInteger(GameOptions.NATURAL_DISASTERS);&#xD;
         if (probability > 0) {&#xD;
             csNaturalDisasters(random, cs, probability);&#xD;
         }&#xD;
&#xD;
         if (isRebel() &amp;&amp; interventionBells&#xD;
             >= getSpecification().getInteger(GameOptions.INTERVENTION_BELLS)) {&#xD;
             interventionBells = Integer.MIN_VALUE;&#xD;
             &#xD;
             // Enter near a port.&#xD;
             List&lt;Colony> ports = getPorts();&#xD;
             Colony port = getRandomMember(logger, &quot;Intervention port&quot;,&#xD;
                                           ports, random);&#xD;
             Tile portTile = port.getTile();&#xD;
             Tile entry = getGame().getMap().searchCircle(portTile,&#xD;
                 GoalDeciders.getSimpleHighSeasGoalDecider(),&#xD;
                 portTile.getHighSeasCount()+1).getSafeTile(this, random);&#xD;
             &#xD;
             // Create the force.&#xD;
             // @compat 0.10.5&#xD;
             // We used to nullify the monarch when declaring independence.&#xD;
             // There are saved games out there where this happened&#xD;
             // (see BR#2435).  Defend against NPE.&#xD;
             Monarch.Force ivf = null;&#xD;
             if (getMonarch() != null&#xD;
             // end @compat 0.10.5&#xD;
                 &amp;&amp; (ivf = getMonarch().getInterventionForce()) != null) {&#xD;
                 List&lt;Unit> landUnits = createUnits(ivf.getLandUnits(),&#xD;
                                                    entry);//-vis(this)&#xD;
                 List&lt;Unit> navalUnits = createUnits(ivf.getNavalUnits(),&#xD;
                                                     entry);//-vis(this)&#xD;
                 List&lt;Unit> leftOver = loadShips(landUnits, navalUnits,&#xD;
                                                 random);//-vis(this)&#xD;
                 for (Unit unit : leftOver) {&#xD;
                     // no use for left over units&#xD;
                     logger.warning(&quot;Disposing of left over unit &quot; + unit);&#xD;
                     unit.setLocationNoUpdate(null);//-vis: safe, off map&#xD;
                     unit.dispose();//-vis: safe, never sighted&#xD;
                 }&#xD;
                 Set&lt;Tile> tiles = exploreForUnit(navalUnits.get(0));&#xD;
                 if (!tiles.contains(entry)) tiles.add(entry);&#xD;
                 invalidateCanSeeTiles();//+vis(this)&#xD;
                 cs.add(See.perhaps(), tiles);&#xD;
                 cs.addMessage(See.only(this),&#xD;
                     new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                         &quot;model.player.interventionForceArrives&quot;,&#xD;
                         this));&#xD;
                 logger.info(&quot;Intervention force (&quot;&#xD;
                     + navalUnits.size() + &quot; naval, &quot;&#xD;
                     + landUnits.size() + &quot; land, &quot;&#xD;
                     + leftOver.size() + &quot; left over) arrives at &quot; + entry&#xD;
                     + &quot;(for &quot; + port.getName() + &quot;)&quot;);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Update stances&#xD;
     while (!stanceDirty.isEmpty()) {&#xD;
         ServerPlayer s = stanceDirty.remove(0);&#xD;
         Stance sta = getStance(s);&#xD;
         boolean war = sta == Stance.WAR;&#xD;
         if (sta == Stance.UNCONTACTED) continue;&#xD;
         for (Player p : getGame().getLiveEuropeanPlayers(this)) {&#xD;
             ServerPlayer sp = (ServerPlayer) p;&#xD;
             if (p == s || !p.hasContacted(this)&#xD;
                 || !p.hasContacted(s)) continue;&#xD;
             if (p.hasAbility(Ability.BETTER_FOREIGN_AFFAIRS_REPORT)&#xD;
                 || war) {&#xD;
                 cs.addStance(See.only(sp), this, sta, s);&#xD;
                 cs.addMessage(See.only(sp),&#xD;
                     new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                         sta.getOtherStanceChangeKey(), this)&#xD;
                     .addStringTemplate(&quot;%attacker%&quot;, getNationLabel())&#xD;
                     .addStringTemplate(&quot;%defender%&quot;, s.getNationLabel()));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1q_VJREeiyW7NaN4qWdw" name="csPayUpkeep" specification="_QUr0YlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1q_lJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1q_1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     final Disaster bankruptcy = spec.getDisaster(Disaster.BANKRUPTCY);&#xD;
&#xD;
     boolean changed = false;&#xD;
     int upkeep = getSettlements().stream()&#xD;
         .mapToInt(s -> s.getUpkeep()).sum();&#xD;
     if (checkGold(upkeep)) {&#xD;
         modifyGold(-upkeep);&#xD;
         if (getBankrupt()) {&#xD;
             setBankrupt(false);&#xD;
             changed = true;&#xD;
             // the only effects of a disaster that can be reversed&#xD;
             // are the modifiers&#xD;
             for (RandomChoice&lt;Effect> effect: bankruptcy.getEffects()) {&#xD;
                 for (Modifier modifier : effect.getObject().getModifiers()) {&#xD;
                     cs.addFeatureChange(this, this, modifier, false);&#xD;
                 }&#xD;
             }&#xD;
             cs.addMessage(See.only(this),&#xD;
                 new ModelMessage(ModelMessage.MessageType.GOVERNMENT_EFFICIENCY,&#xD;
                                  &quot;model.player.disaster.bankruptcy.stop&quot;, this));&#xD;
         }&#xD;
     } else {&#xD;
         modifyGold(-getGold());&#xD;
         if (!getBankrupt()) {&#xD;
             setBankrupt(true);&#xD;
             changed = true;&#xD;
             csApplyDisaster(random, null, bankruptcy, cs);&#xD;
             cs.addMessage(See.only(this),&#xD;
                 new ModelMessage(ModelMessage.MessageType.GOVERNMENT_EFFICIENCY,&#xD;
                                  &quot;model.player.disaster.bankruptcy.start&quot;, this));&#xD;
         }&#xD;
     }&#xD;
     if (upkeep > 0) cs.addPartial(See.only(this), this, &quot;gold&quot;);&#xD;
     if (changed) cs.addPartial(See.only(this), this, &quot;bankrupt&quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV1rAFJREeiyW7NaN4qWdw" name="csNaturalDisasters" specification="_QUr0ZVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV1rAVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1rAlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV1rA1JREeiyW7NaN4qWdw" name="probability">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (randomInt(logger, &quot;Natural disaster&quot;, random, 100) &lt; probability) {&#xD;
         int size = getNumberOfSettlements();&#xD;
         if (size &lt; 1) return;&#xD;
         // randomly select a colony to start with, then generate&#xD;
         // an appropriate disaster if possible, else continue with&#xD;
         // the next colony&#xD;
         int start = randomInt(logger, &quot;select colony&quot;, random, size);&#xD;
         for (int index = 0; index &lt; size; index++) {&#xD;
             Colony colony = getColonies().get((start + index) % size);&#xD;
             List&lt;RandomChoice&lt;Disaster>> disasters = colony.getDisasters();&#xD;
             if (!disasters.isEmpty()) {&#xD;
                 Disaster disaster = RandomChoice&#xD;
                     .getWeightedRandom(logger, &quot;select disaster&quot;, disasters,&#xD;
                                        random);&#xD;
                 List&lt;ModelMessage> messages = csApplyDisaster(random,&#xD;
                     colony, disaster, cs);&#xD;
                 if (!messages.isEmpty()) {&#xD;
                     cs.addMessage(See.only(this),&#xD;
                                   new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                                    &quot;model.player.disaster.strikes&quot;, colony)&#xD;
                                   .addName(&quot;%colony%&quot;, colony.getName())&#xD;
                                   .addName(&quot;%disaster%&quot;, disaster));&#xD;
                     for (ModelMessage message : messages) {&#xD;
                         cs.addMessage(See.only(this), message);&#xD;
                     }&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV2SAFJREeiyW7NaN4qWdw" name="csApplyDisaster" specification="_QUsbc1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV2SAVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SAlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SA1JREeiyW7NaN4qWdw" name="disaster" type="_QSrpQVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SBFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SBVJREeiyW7NaN4qWdw" type="_QRk2AVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QV2SBlJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>StringBuilder sb = new StringBuilder(64);&#xD;
     sb.append(&quot;Applying &quot;).append(disaster.getNumberOfEffects())&#xD;
         .append(&quot; effect/s of disaster &quot;)&#xD;
         .append(Messages.getName(disaster));&#xD;
     if (colony != null) sb.append(&quot; to &quot;).append(colony.getName());&#xD;
     sb.append(&quot;:&quot;);&#xD;
     List&lt;Effect> effects = new ArrayList&lt;>();&#xD;
     switch (disaster.getNumberOfEffects()) {&#xD;
     case ONE:&#xD;
         effects.add(RandomChoice.getWeightedRandom(logger,&#xD;
                 &quot;Get effect of disaster&quot;, disaster.getEffects(), random));&#xD;
         sb.append(&quot; &quot;).append(Messages.getName(effects.get(0)));&#xD;
         break;&#xD;
     case SEVERAL:&#xD;
         for (RandomChoice&lt;Effect> effect : disaster.getEffects()) {&#xD;
             if (randomInt(logger, &quot;Get effects of disaster&quot;, random, 100)&#xD;
                 &lt; effect.getProbability()) {&#xD;
                 effects.add(effect.getObject());&#xD;
                 sb.append(&quot; &quot;).append(Messages.getName(effect.getObject()));&#xD;
             }&#xD;
         }&#xD;
         break;&#xD;
     case ALL:&#xD;
         for (RandomChoice&lt;Effect> effect : disaster.getEffects()) {&#xD;
             effects.add(effect.getObject());&#xD;
             sb.append(&quot; &quot;).append(Messages.getName(effect.getObject()));&#xD;
         }&#xD;
     }&#xD;
     if (effects.isEmpty()) sb.append(&quot; All avoided&quot;);&#xD;
     logger.fine(sb.toString());&#xD;
&#xD;
     boolean colonyDirty = false;&#xD;
     List&lt;ModelMessage> messages = new ArrayList&lt;>();&#xD;
     OUTER:&#xD;
     for (Effect effect : effects) {&#xD;
         if (colony == null) {&#xD;
             for (Modifier modifier : effect.getModifiers()) {&#xD;
                 if (modifier.getDuration() > 0) {&#xD;
                     Modifier timedModifier = Modifier&#xD;
                         .makeTimedModifier(modifier.getId(), modifier, getGame().getTurn());&#xD;
                     modifier.setModifierIndex(Modifier.DISASTER_PRODUCTION_INDEX);&#xD;
                     cs.addFeatureChange(this, this, timedModifier, true);&#xD;
                 } else {&#xD;
                     cs.addFeatureChange(this, this, modifier, true);&#xD;
                 }&#xD;
             }&#xD;
         } else {&#xD;
             if (null != effect.getId()) {&#xD;
                 switch (effect.getId()) {&#xD;
                 case Effect.LOSS_OF_MONEY:&#xD;
                     int plunder = Math.max(1, colony.getPlunder(null, random) / 5);&#xD;
                     modifyGold(-plunder);&#xD;
                     cs.addPartial(See.only(this), this, &quot;gold&quot;);&#xD;
                     messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                             effect.getId(), this)&#xD;
                         .addAmount(&quot;%amount%&quot;, plunder));&#xD;
                     break;&#xD;
                 case Effect.LOSS_OF_BUILDING:&#xD;
                     Building building = getBuildingForEffect(colony, effect, random);&#xD;
                     if (building != null) {&#xD;
                         // Add message before damaging building&#xD;
                         messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                 effect.getId(), colony)&#xD;
                             .addNamed(&quot;%building%&quot;, building.getType()));&#xD;
                         csDamageBuilding(building, cs);&#xD;
                         colonyDirty = true;&#xD;
                     }&#xD;
                     break;&#xD;
                 case Effect.LOSS_OF_GOODS:&#xD;
                     Goods goods = getRandomMember(logger, &quot;select goods&quot;,&#xD;
                         colony.getLootableGoodsList(),&#xD;
                         random);&#xD;
                     if (goods != null) {&#xD;
                         goods.setAmount(Math.min(goods.getAmount() / 2, 50));&#xD;
                         colony.removeGoods(goods);&#xD;
                         messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                 effect.getId(), colony)&#xD;
                             .addStringTemplate(&quot;%goods%&quot;, goods.getLabel(true)));&#xD;
                         colonyDirty = true;&#xD;
                     }&#xD;
                     break;&#xD;
                 case Effect.LOSS_OF_UNIT:&#xD;
                     {&#xD;
                         Unit unit = getUnitForEffect(colony, effect, random);&#xD;
                         if (unit != null) {&#xD;
                             if (colony.getUnitCount() == 1) {&#xD;
                                 messages.clear();&#xD;
                                 messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                         &quot;model.player.disaster.effect.colonyDestroyed&quot;, this)&#xD;
                                     .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
                                 csDisposeSettlement(colony, cs);&#xD;
                                 colonyDirty = false;&#xD;
                                 break OUTER; // No point proceeding&#xD;
                             }&#xD;
                             messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                     effect.getId(), colony)&#xD;
                                 .addStringTemplate(&quot;%unit%&quot;, unit.getLabel()));&#xD;
                             cs.addRemove(See.only(this), null, unit);&#xD;
                             unit.dispose();//-vis: Safe, entirely within colony&#xD;
                             colonyDirty = true;&#xD;
                         }&#xD;
                         break;&#xD;
                     }&#xD;
                 case Effect.DAMAGED_UNIT:&#xD;
                     {&#xD;
                         Unit unit = getUnitForEffect(colony, effect, random);&#xD;
                         if (unit != null &amp;&amp; unit.isNaval()) {&#xD;
                             Location repairLocation = unit.getRepairLocation();&#xD;
                             if (repairLocation == null) {&#xD;
                                 messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                         effect.getId(), colony)&#xD;
                                     .addStringTemplate(&quot;%unit%&quot;, unit.getLabel()));&#xD;
                                 csSinkShip(unit, null, cs);&#xD;
                             } else {&#xD;
                                 messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                                         effect.getId(), colony)&#xD;
                                     .addStringTemplate(&quot;%unit%&quot;, unit.getLabel()));&#xD;
                                 csDamageShip(unit, repairLocation, cs);&#xD;
                             }&#xD;
                             colonyDirty = true;&#xD;
                         }&#xD;
                         break;&#xD;
                     }&#xD;
                 default:&#xD;
                     messages.add(new ModelMessage(ModelMessage.MessageType.DEFAULT,&#xD;
                             effect.getId(), colony));&#xD;
                     for (Modifier modifier : effect.getModifiers()) {&#xD;
                         if (modifier.getDuration() > 0) {&#xD;
                             Modifier timedModifier = Modifier&#xD;
                                 .makeTimedModifier(modifier.getId(), modifier, getGame().getTurn());&#xD;
                             timedModifier.setModifierIndex(Modifier.DISASTER_PRODUCTION_INDEX);&#xD;
                             cs.addFeatureChange(this, colony, timedModifier, true);&#xD;
                         } else {&#xD;
                             cs.addFeatureChange(this, colony, modifier, true);&#xD;
                         }&#xD;
                         colonyDirty = true;&#xD;
                     }&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (colonyDirty) cs.add(See.perhaps(), colony);&#xD;
     return messages;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV2SB1JREeiyW7NaN4qWdw" name="getBuildingForEffect" specification="_QUtChFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV2SCFJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SCVJREeiyW7NaN4qWdw" name="effect" type="_QSsQUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SClJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SC1JREeiyW7NaN4qWdw" type="_QRjA0VJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>List&lt;Building> buildings = colony.getBurnableBuildings();&#xD;
     if (buildings.isEmpty()) return null;&#xD;
     return getRandomMember(logger, &quot;Select building for effect&quot;,&#xD;
                            buildings, random);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV2SDFJREeiyW7NaN4qWdw" name="getUnitForEffect" specification="_QUtplFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV2SDVJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SDlJREeiyW7NaN4qWdw" name="effect" type="_QSsQUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SD1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SEFJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>List&lt;Unit> units = new ArrayList&lt;>();&#xD;
     for (Unit unit : colony.getUnitList()) {&#xD;
         if (effect.appliesTo(unit.getType())) {&#xD;
             units.add(unit);&#xD;
         }&#xD;
     }&#xD;
     for (Unit unit : colony.getTile().getUnitList()) {&#xD;
         if (effect.appliesTo(unit.getType())) {&#xD;
             units.add(unit);&#xD;
         }&#xD;
     }&#xD;
     if (units.isEmpty()) return null;&#xD;
     return getRandomMember(logger, &quot;Select unit for effect&quot;, units, random);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV2SEVJREeiyW7NaN4qWdw" name="propagateToEuropeanMarkets" specification="_QUuQoVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV2SElJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV2SE1JREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV2SFFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (!type.isStorable()) return;&#xD;
&#xD;
     // Propagate 5-30% of the original change.&#xD;
     final int lowerBound = 5; // FIXME: to spec&#xD;
     final int upperBound = 30;// FIXME: to spec&#xD;
     amount *= randomInt(logger, &quot;Propagate goods&quot;, random,&#xD;
                         upperBound - lowerBound + 1) + lowerBound;&#xD;
     amount /= 100;&#xD;
     if (amount == 0) return;&#xD;
&#xD;
     // Do not need to update the clients here, these changes happen&#xD;
     // while it is not their turn.&#xD;
     for (Player p : getGame().getLiveEuropeanPlayers(this)) {&#xD;
         Market market = p.getMarket();&#xD;
         if (market != null) market.addGoodsToMarket(type, amount);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25EFJREeiyW7NaN4qWdw" name="csYearlyGoodsAdjust" specification="_QUu3sFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25EVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25ElJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Game game = getGame();&#xD;
		final List&lt;GoodsType> goodsTypes = game.getSpecification().getStorableGoodsTypeList();&#xD;
		final Market market = getMarket();&#xD;
&#xD;
		// Pick a random type of storable goods to add/remove an extra&#xD;
		// amount of.&#xD;
		GoodsType extraType;&#xD;
		extraType = getRandomMember(logger, &quot;Choose goods type&quot;, goodsTypes, random);&#xD;
		if (extraType.isStorable()) {&#xD;
&#xD;
			// Remove standard amount, and the extra amount.&#xD;
			for (GoodsType type : goodsTypes) {&#xD;
				if (market.hasBeenTraded(type)) {&#xD;
					boolean add = market.getAmountInMarket(type) &lt; type.getInitialAmount();&#xD;
					int amount = game.getTurn().getNumber() / 10;&#xD;
					if (type == extraType)&#xD;
						amount = 2 * amount + 1;&#xD;
					if (amount &lt;= 0)&#xD;
						continue;&#xD;
					amount = randomInt(logger, &quot;Market adjust &quot; + type, random, amount);&#xD;
					if (!add)&#xD;
						amount = -amount;&#xD;
					market.addGoodsToMarket(type, amount);&#xD;
					logger.finest(getName() + &quot; adjust of &quot; + amount + &quot; &quot; + type + &quot;, total: &quot;&#xD;
							+ market.getAmountInMarket(type) + &quot;, initial: &quot; + type.getInitialAmount());&#xD;
					addExtraTrade(new AbstractGoods(type, amount));&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		flushExtraTrades(random);&#xD;
		csFlushMarket(cs);&#xD;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25E1JREeiyW7NaN4qWdw" name="csStartTurn" specification="_QUu3s1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25FFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25FVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Game game = getGame();&#xD;
     if (isEuropean()) {&#xD;
         csBombardEnemyShips(random, cs);&#xD;
&#xD;
         csYearlyGoodsAdjust(random, cs);&#xD;
&#xD;
         FoundingFather father = checkFoundingFather();&#xD;
         if (father != null) {&#xD;
             csAddFoundingFather(father, random, cs);&#xD;
             clearOfferedFathers();&#xD;
         }&#xD;
&#xD;
         List&lt;FoundingFather> ffs = getOfferedFathers();&#xD;
         if (canRecruitFoundingFather() &amp;&amp; ffs.isEmpty()) {&#xD;
             ffs = getRandomFoundingFathers(random);&#xD;
             setOfferedFathers(ffs);&#xD;
         }&#xD;
         if (!ffs.isEmpty()) {&#xD;
             cs.add(See.only(this), ChangePriority.CHANGE_EARLY,&#xD;
                 new ChooseFoundingFatherMessage(ffs, null));&#xD;
         }&#xD;
&#xD;
         if (updateScore()) {&#xD;
             cs.addPartial(See.only(this), this, &quot;score&quot;);&#xD;
         }&#xD;
&#xD;
     } else if (isIndian()) {&#xD;
         // We do not have to worry about Player level stance&#xD;
         // changes driving Stance, as that is delegated to the AI.&#xD;
         //&#xD;
         // However we want to notify of individual settlements&#xD;
         // that change tension level, but there are complex&#xD;
         // interactions between settlement and player tensions.&#xD;
         // The simple way to do it is just to save all old tension&#xD;
         // levels and check if they have changed after applying&#xD;
         // all the changes.&#xD;
         List&lt;IndianSettlement> allSettlements = getIndianSettlements();&#xD;
         java.util.Map&lt;IndianSettlement,&#xD;
             java.util.Map&lt;Player, Tension.Level>> oldLevels = new HashMap&lt;>();&#xD;
         for (IndianSettlement settlement : allSettlements) {&#xD;
             java.util.Map&lt;Player, Tension.Level> oldLevel = new HashMap&lt;>();&#xD;
             oldLevels.put(settlement, oldLevel);&#xD;
             for (Player enemy : game.getLiveEuropeanPlayers(this)) {&#xD;
                 Tension alarm = settlement.getAlarm(enemy);&#xD;
                 oldLevel.put(enemy,&#xD;
                     (alarm == null) ? null : alarm.getLevel());&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Do the settlement alarms first.&#xD;
         for (IndianSettlement settlement : allSettlements) {&#xD;
             java.util.Map&lt;Player, Integer> extra = new HashMap&lt;>();&#xD;
             for (Player enemy : game.getLiveEuropeanPlayers(this)) {&#xD;
                 extra.put(enemy, 0);&#xD;
             }&#xD;
&#xD;
             // Look at the uses of tiles surrounding the settlement.&#xD;
             int alarmRadius = settlement.getRadius() + ALARM_RADIUS;&#xD;
             for (Tile tile: settlement.getTile()&#xD;
                      .getSurroundingTiles(alarmRadius)) {&#xD;
                 Colony colony = tile.getColony();&#xD;
                 if (tile.getFirstUnit() != null) { // Military units&#xD;
                     Player enemy =  tile.getFirstUnit().getOwner();&#xD;
                     if (enemy.isEuropean()) {&#xD;
                         Integer alarm = extra.get(enemy);&#xD;
                         if (alarm == null) continue;&#xD;
                         alarm += (int)tile.getUnitList().stream()&#xD;
                             .filter(u -> u.isOffensiveUnit() &amp;&amp; !u.isNaval())&#xD;
                             .mapToDouble(u -> u.getType().getOffence()).sum();&#xD;
                         extra.put(enemy, alarm);&#xD;
                     }&#xD;
                 } else if (colony != null) { // Colonies&#xD;
                     Player enemy = colony.getOwner();&#xD;
                     extra.put(enemy, extra.get(enemy)&#xD;
                               + ALARM_TILE_IN_USE&#xD;
                               + colony.getUnitCount());&#xD;
                 } else if (tile.getOwningSettlement() != null) { // Control&#xD;
                     Player enemy = tile.getOwningSettlement().getOwner();&#xD;
                     if (enemy != null &amp;&amp; enemy.isEuropean()) {&#xD;
                         extra.put(enemy, extra.get(enemy)&#xD;
                                   + ALARM_TILE_IN_USE);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             // Missionary helps reducing alarm a bit&#xD;
             if (settlement.hasMissionary()) {&#xD;
                 Unit missionary = settlement.getMissionary();&#xD;
                 int missionAlarm = getGame().getSpecification()&#xD;
                     .getInteger(GameOptions.MISSION_INFLUENCE);&#xD;
                 if (missionary.hasAbility(Ability.EXPERT_MISSIONARY)) {&#xD;
                     missionAlarm *= 2;&#xD;
                 }&#xD;
                 Player enemy = missionary.getOwner();&#xD;
                 extra.put(enemy,&#xD;
                           extra.get(enemy) + missionAlarm);&#xD;
             }&#xD;
             // Apply modifiers, and commit the total change.&#xD;
             for (Entry&lt;Player, Integer> entry : extra.entrySet()) {&#xD;
                 Player player = entry.getKey();&#xD;
                 int change = entry.getValue();&#xD;
                 if (change != 0) {&#xD;
                     change = (int)player.applyModifiers((float)change,&#xD;
                         game.getTurn(), Modifier.NATIVE_ALARM_MODIFIER);&#xD;
                     ServerIndianSettlement sis&#xD;
                         = (ServerIndianSettlement)settlement;&#xD;
                     sis.csModifyAlarm(player, change,&#xD;
                                       true, cs);//+til&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Calm down a bit at the whole-tribe level.&#xD;
         for (Player enemy : game.getLiveEuropeanPlayers(this)) {&#xD;
             if (getTension(enemy).getValue() > 0) {&#xD;
                 int change = -getTension(enemy).getValue()/100 - 4;&#xD;
                 csModifyTension(enemy, change, cs);//+til&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Now collect the settlements that changed.&#xD;
         // Update those that changed, and add messages for selected&#xD;
         // worsening relation transitions.&#xD;
         for (IndianSettlement settlement : allSettlements) {&#xD;
             java.util.Map&lt;Player, Tension.Level> oldLevel&#xD;
                 = oldLevels.get(settlement);&#xD;
             for (Entry&lt;Player, Tension.Level> entry : oldLevel.entrySet()) {&#xD;
                 Player enemy = entry.getKey();&#xD;
                 Tension newTension = settlement.getAlarm(enemy);&#xD;
                 Tension.Level newLevel = (newTension == null) ? null&#xD;
                     : newTension.getLevel();&#xD;
                 if (entry.getValue() == null&#xD;
                     || entry.getValue() == newLevel&#xD;
                     || !settlement.hasContacted(enemy)&#xD;
                     || !enemy.hasExplored(settlement.getTile()))&#xD;
                     continue;&#xD;
                 cs.add(See.only(null).perhaps((ServerPlayer)enemy),&#xD;
                        settlement);&#xD;
                 // No messages about improving tension&#xD;
                 if (newLevel == null&#xD;
                     || (entry.getValue() != null &#xD;
                         &amp;&amp; entry.getValue().getLimit()&#xD;
                         > newLevel.getLimit())) continue;&#xD;
                 String key = &quot;model.player.alarmIncrease.&quot;&#xD;
                     + settlement.getAlarm(enemy).getKey();&#xD;
                 if (!Messages.containsKey(key)) continue;&#xD;
                 cs.addMessage(See.only((ServerPlayer)enemy),&#xD;
                     new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                                      key, settlement)&#xD;
                         .addStringTemplate(&quot;%nation%&quot;, getNationLabel())&#xD;
                         .addStringTemplate(&quot;%enemy%&quot;, enemy.getNationLabel())&#xD;
                         .addName(&quot;%settlement%&quot;, settlement.getName()));&#xD;
             }&#xD;
         }&#xD;
&#xD;
         for (IndianSettlement settlement : allSettlements) {&#xD;
             ((ServerIndianSettlement)settlement).csStartTurn(random, cs);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25FlJREeiyW7NaN4qWdw" name="csBombardEnemyShips" specification="_QUvewFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25F1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25GFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (Colony colony : getColonies()) {&#xD;
         if (colony.canBombardEnemyShip()) {&#xD;
             for (Tile tile : colony.getTile().getSurroundingTiles(1)) {&#xD;
                 if (!tile.isLand() &amp;&amp; tile.getFirstUnit() != null&#xD;
                     &amp;&amp; tile.getFirstUnit().getOwner() != this) {&#xD;
                     for (Unit unit : tile.getUnitList()) {&#xD;
                         if (atWarWith(unit.getOwner())&#xD;
                             || unit.hasAbility(Ability.PIRACY)) {&#xD;
                             csCombat(colony, unit, null, random, cs);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25GVJREeiyW7NaN4qWdw" name="csAddFoundingFather" specification="_QUvew1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25GlJREeiyW7NaN4qWdw" name="father" type="_QSs3YVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25G1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25HFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Game game = getGame();&#xD;
     final Specification spec = game.getSpecification();&#xD;
     final ServerEurope europe = (ServerEurope)getEurope();&#xD;
     final Turn turn = game.getTurn();&#xD;
     boolean europeDirty = false, visibilityChange = false;&#xD;
&#xD;
     // FIXME: We do not want to have to update the whole player&#xD;
     // just to get the FF into the client.  Use this hack until&#xD;
     // the client gets proper containers.&#xD;
     cs.addFather(this, father);&#xD;
     cs.addMessage(See.only(this),&#xD;
         new ModelMessage(ModelMessage.MessageType.SONS_OF_LIBERTY,&#xD;
                          &quot;model.player.foundingFatherJoinedCongress&quot;,&#xD;
                          this)&#xD;
                   .addNamed(&quot;%foundingFather%&quot;, father)&#xD;
                   .add(&quot;%description%&quot;, father.getDescriptionKey()));&#xD;
     cs.addHistory(this,&#xD;
         new HistoryEvent(turn,&#xD;
             HistoryEvent.HistoryEventType.FOUNDING_FATHER, this)&#xD;
                 .addNamed(&quot;%father%&quot;, father));&#xD;
&#xD;
     List&lt;AbstractUnit> units = father.getUnits();&#xD;
     if (units != null &amp;&amp; !units.isEmpty() &amp;&amp; europe != null) {&#xD;
         createUnits(father.getUnits(), europe);//-vis: safe, Europe&#xD;
         europeDirty = true;&#xD;
     }&#xD;
&#xD;
     java.util.Map&lt;UnitType, UnitType> upgrades = father.getUpgrades();&#xD;
     if (upgrades != null) {&#xD;
         for (Unit u : getUnits()) {&#xD;
             UnitType newType = upgrades.get(u.getType());&#xD;
             if (newType != null) {&#xD;
                 u.changeType(newType);//-vis(this)&#xD;
                 visibilityChange = true;&#xD;
                 cs.add(See.perhaps(), u);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (!father.getModifiers().isEmpty()) {&#xD;
         cs.add(See.only(this), this);&#xD;
         // Some modifiers are special&#xD;
         if (father.hasModifier(Modifier.LINE_OF_SIGHT_BONUS)) {&#xD;
             List&lt;Tile> tiles = new ArrayList&lt;>();&#xD;
             for (Colony c : getColonies()) {&#xD;
                 tiles.addAll(exploreForSettlement(c));&#xD;
             }&#xD;
             for (Unit u : getUnits()) tiles.addAll(exploreForUnit(u));&#xD;
             if (hasAbility(Ability.SEE_ALL_COLONIES)) {&#xD;
                 for (Player other : getGame().getLiveEuropeanPlayers(this)) {&#xD;
                     for (Colony c : other.getColonies()) {&#xD;
                         tiles.addAll(exploreForSettlement(c));&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             cs.add(See.only(this), tiles);&#xD;
             visibilityChange = true;&#xD;
         } else if (father.hasModifier(Modifier.SOL)) {&#xD;
             for (Colony c : getColonies()) {&#xD;
                 c.addLiberty(0); // Kick the SoL and production bonus&#xD;
                 c.invalidateCache();&#xD;
             }&#xD;
         } else {&#xD;
             boolean recache = false;&#xD;
             for (Modifier m : father.getModifiers()) {&#xD;
                 recache |= m.getId().startsWith(&quot;model.goods.&quot;);&#xD;
             }&#xD;
             for (Colony c : getColonies()) c.invalidateCache();&#xD;
         }                &#xD;
     }&#xD;
&#xD;
     for (Event event : father.getEvents()) {&#xD;
         String eventId = event.getId();&#xD;
         if (&quot;model.event.resetBannedMissions&quot;.equals(eventId)) {&#xD;
             for (Player p : game.getLiveNativePlayers(null)) {&#xD;
                 if (p.missionsBanned(this)) {&#xD;
                     p.removeMissionBan(this);&#xD;
                     cs.add(See.only(this), p);&#xD;
                 }&#xD;
             }&#xD;
         } else if (&quot;model.event.resetNativeAlarm&quot;.equals(eventId)) {&#xD;
             for (Player p : game.getLiveNativePlayers(null)) {&#xD;
                 if (!p.hasContacted(this)) continue;&#xD;
                 p.setTension(this, new Tension(Tension.TENSION_MIN));&#xD;
                 for (IndianSettlement is : p.getIndianSettlements()) {&#xD;
                     if (is.hasContacted(this)) {&#xD;
                         is.getTile().cacheUnseen();//+til&#xD;
                         is.setAlarm(this,&#xD;
                             new Tension(Tension.TENSION_MIN));//-til&#xD;
                         cs.add(See.only(this), is);&#xD;
                     }&#xD;
                 }&#xD;
                 csChangeStance(Stance.PEACE, (ServerPlayer)p, true, cs);&#xD;
             }&#xD;
&#xD;
         } else if (&quot;model.event.boycottsLifted&quot;.equals(eventId)) {&#xD;
             Market market = getMarket();&#xD;
             for (GoodsType goodsType : spec.getGoodsTypeList()) {&#xD;
                 if (market.getArrears(goodsType) > 0) {&#xD;
                     market.setArrears(goodsType, 0);&#xD;
                     cs.add(See.only(this), market.getMarketData(goodsType));&#xD;
                 }&#xD;
             }&#xD;
&#xD;
         } else if (&quot;model.event.freeBuilding&quot;.equals(eventId)) {&#xD;
             BuildingType type = spec.getBuildingType(event.getValue());&#xD;
             for (Colony colony : getColonies()) {&#xD;
                 ((ServerColony)colony).csFreeBuilding(type, cs);&#xD;
             }&#xD;
&#xD;
         } else if (&quot;model.event.seeAllColonies&quot;.equals(eventId)) {&#xD;
             visibilityChange = true;//-vis(this), can now see other colonies&#xD;
             for (Tile t : game.getMap().getAllTiles()) {&#xD;
                 Colony colony = t.getColony();&#xD;
                 if (colony == null) continue;&#xD;
                 Set&lt;Tile> tiles = new HashSet&lt;>();&#xD;
                 if (exploreTile(t)) {&#xD;
                     if (!hasAbility(Ability.SEE_ALL_COLONIES)) {&#xD;
                         // FreeCol ruleset adds this ability&#xD;
                         // allowing full visibility of colony,&#xD;
                         // whereas Col1 showed colonies as size 1.&#xD;
                         Tile c = t.copy(game, Tile.class);&#xD;
                         c.getColony().setDisplayUnitCount(1);&#xD;
                         t.setCachedTile(this, c);&#xD;
                     }&#xD;
                     tiles.add(t);&#xD;
                 }&#xD;
                 // Revealed tiles in 11x11 block in Col1&#xD;
                 final int fullRadius = (int)father&#xD;
                     .applyModifiers((float)colony.getLineOfSight(),&#xD;
                                     turn, Modifier.EXPOSED_TILES_RADIUS);&#xD;
                 tiles.addAll(exploreTiles(t.getSurroundingTiles(1,&#xD;
                             fullRadius)));&#xD;
                 cs.add(See.only(this), tiles);&#xD;
             }&#xD;
&#xD;
         } else if (&quot;model.event.newRecruits&quot;.equals(eventId)&#xD;
                    &amp;&amp; europe != null) {&#xD;
             europeDirty = europe.replaceRecruits(random);&#xD;
&#xD;
         } else if (&quot;model.event.movementChange&quot;.equals(eventId)) {&#xD;
             for (Unit u : getUnits()) {&#xD;
                 if (u.getMovesLeft() > 0) {&#xD;
                     u.setMovesLeft(u.getInitialMovesLeft());&#xD;
                     cs.addPartial(See.only(this), u, &quot;movesLeft&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     if (europeDirty) cs.add(See.only(this), europe);&#xD;
     if (visibilityChange) invalidateCanSeeTiles(); //+vis(this)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25HVJREeiyW7NaN4qWdw" name="getFreeBuildingTypes" specification="_QA-OMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25HlJREeiyW7NaN4qWdw" type="_QRjn4VJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QV25H1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>final Specification spec = getGame().getSpecification();&#xD;
     List&lt;BuildingType> result = new ArrayList&lt;>();&#xD;
     for (FoundingFather ff : getFathers()) {&#xD;
         for (Event event : ff.getEvents()) {&#xD;
             String eventId = event.getId();&#xD;
             if (&quot;model.event.freeBuilding&quot;.equals(eventId)) {&#xD;
                 result.add(spec.getBuildingType(event.getValue()));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     return result;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV25IFJREeiyW7NaN4qWdw" name="csClaimLand" specification="_QUwF0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV25IVJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25IlJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV25I1JREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV25JFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer owner = (ServerPlayer)tile.getOwner();&#xD;
     Settlement ownerSettlement = tile.getOwningSettlement();&#xD;
     tile.cacheUnseen();//+til&#xD;
     tile.changeOwnership(this, settlement);//-vis(?),-til&#xD;
&#xD;
     // Update the tile and any now-angrier owners, and the player&#xD;
     // gold if a price was paid.&#xD;
     cs.add(See.perhaps(), tile);&#xD;
     if (price > 0) {&#xD;
         modifyGold(-price);&#xD;
         owner.modifyGold(price);&#xD;
         cs.addPartial(See.only(this), this, &quot;gold&quot;);&#xD;
     } else if (price &lt; 0 &amp;&amp; owner.isIndian()) {&#xD;
         ServerIndianSettlement is = (ServerIndianSettlement)ownerSettlement;&#xD;
         if (is == null) {&#xD;
             owner.csModifyTension(this, Tension.TENSION_ADD_LAND_TAKEN,&#xD;
                                   cs);&#xD;
         } else {&#xD;
             is.csModifyAlarm(this, Tension.TENSION_ADD_LAND_TAKEN,&#xD;
                              true, cs);&#xD;
         }&#xD;
     }&#xD;
     logger.finest(this.getName() + &quot; claimed &quot; + tile&#xD;
         + &quot; from &quot; + ((owner == null) ? &quot;no-one&quot; : owner.getName())&#xD;
         + &quot;, price: &quot; + ((price == 0) ? &quot;free&quot; : (price &lt; 0) ? &quot;stolen&quot;&#xD;
             : price));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV3gIFJREeiyW7NaN4qWdw" name="csEmigrate" specification="_QUws4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV3gIVJREeiyW7NaN4qWdw" name="slot">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV3gIlJREeiyW7NaN4qWdw" name="type" type="_QSsQU1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gI1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gJFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>// Create the recruit, move it to the docks.&#xD;
     ServerEurope europe = (ServerEurope)getEurope();&#xD;
     UnitType recruitType = europe.extractRecruitable(slot, random);&#xD;
     final Game game = getGame();&#xD;
     final Specification spec = game.getSpecification();&#xD;
     Role role = (spec.getBoolean(GameOptions.EQUIP_EUROPEAN_RECRUITS))&#xD;
         ? recruitType.getDefaultRole()&#xD;
         : spec.getDefaultRole();&#xD;
     Unit unit = new ServerUnit(game, europe, this,&#xD;
                                recruitType, role);//-vis: safe/Europe&#xD;
&#xD;
     // Handle migration type specific changes.&#xD;
     switch (type) {&#xD;
     case FOUNTAIN:&#xD;
         setRemainingEmigrants(getRemainingEmigrants() - 1);&#xD;
         break;&#xD;
     case RECRUIT:&#xD;
         modifyGold(-europe.getRecruitPrice());&#xD;
         cs.addPartial(See.only(this), this, &quot;gold&quot;);&#xD;
         europe.increaseRecruitmentDifficulty();&#xD;
         // Fall through&#xD;
     case NORMAL:&#xD;
         reduceImmigration();&#xD;
         updateImmigrationRequired();&#xD;
         cs.addPartial(See.only(this), this,&#xD;
                       &quot;immigration&quot;, &quot;immigrationRequired&quot;);&#xD;
         if (!MigrationType.specificMigrantSlot(slot)) {&#xD;
             cs.addMessage(See.only(this), getEmigrationMessage(unit));&#xD;
         }&#xD;
         break;&#xD;
     case SURVIVAL:&#xD;
         // Add an informative message if this was a survival recruitment,&#xD;
         cs.addMessage(See.only(this),&#xD;
             new ModelMessage(ModelMessage.MessageType.UNIT_ADDED,&#xD;
                              &quot;model.player.autoRecruit&quot;,&#xD;
                              this, unit)&#xD;
                 .addNamed(&quot;%europe%&quot;, europe)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, unit.getLabel()));&#xD;
         break;&#xD;
     default:&#xD;
         throw new IllegalArgumentException(&quot;Bogus migration type&quot;);&#xD;
     }&#xD;
     cs.add(See.only(this), europe);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV3gJVJREeiyW7NaN4qWdw" name="csCombat" specification="_QUx7AVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV3gJlJREeiyW7NaN4qWdw" name="attacker" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gJ1JREeiyW7NaN4qWdw" name="defender" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gKFJREeiyW7NaN4qWdw" name="crs" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gKVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gKlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>CombatModel combatModel = getGame().getCombatModel();&#xD;
     boolean isAttack = combatModel.combatIsAttack(attacker, defender);&#xD;
     boolean isBombard = combatModel.combatIsBombard(attacker, defender);&#xD;
     Unit attackerUnit = null;&#xD;
     Settlement attackerSettlement = null;&#xD;
     Tile attackerTile = null;&#xD;
     Unit defenderUnit = null;&#xD;
     //ServerPlayer attackerPlayer = null;&#xD;
     ServerPlayer defenderPlayer = null;&#xD;
     Tile defenderTile = null;&#xD;
     if (isAttack) {&#xD;
         attackerUnit = (Unit)attacker;&#xD;
         //attackerPlayer = (ServerPlayer)attackerUnit.getOwner();&#xD;
         attackerTile = attackerUnit.getTile();&#xD;
         defenderUnit = (Unit)defender;&#xD;
         defenderPlayer = (ServerPlayer)defenderUnit.getOwner();&#xD;
         defenderTile = defenderUnit.getTile();&#xD;
         boolean bombard = attackerUnit.hasAbility(Ability.BOMBARD);&#xD;
         cs.addAttribute(See.only(this), &quot;sound&quot;,&#xD;
             (attackerUnit.isNaval()) ? &quot;sound.attack.naval&quot;&#xD;
             : (bombard) ? &quot;sound.attack.artillery&quot;&#xD;
             : (attackerUnit.isMounted()) ? &quot;sound.attack.mounted&quot;&#xD;
             : &quot;sound.attack.foot&quot;);&#xD;
         if (attackerUnit.getOwner().isIndian()&#xD;
             &amp;&amp; defenderPlayer.isEuropean()&#xD;
             &amp;&amp; defenderUnit.getLocation().getColony() != null&#xD;
             &amp;&amp; !defenderPlayer.atWarWith(attackerUnit.getOwner())) {&#xD;
             StringTemplate attackerNation&#xD;
                 = attackerUnit.getApparentOwnerName();&#xD;
             Colony colony = defenderUnit.getLocation().getColony();&#xD;
             cs.addMessage(See.only(defenderPlayer),&#xD;
                 new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                     &quot;combat.indianSurprise&quot;, colony)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
                 .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
         }&#xD;
     } else if (isBombard) {&#xD;
         attackerSettlement = (Settlement)attacker;&#xD;
         //attackerPlayer = (ServerPlayer)attackerSettlement.getOwner();&#xD;
         attackerTile = attackerSettlement.getTile();&#xD;
         defenderUnit = (Unit)defender;&#xD;
         defenderPlayer = (ServerPlayer)defenderUnit.getOwner();&#xD;
         defenderTile = defenderUnit.getTile();&#xD;
         cs.addAttribute(See.only(this), &quot;sound&quot;, &quot;sound.attack.bombard&quot;);&#xD;
     } else {&#xD;
         throw new IllegalStateException(&quot;Bogus combat&quot;);&#xD;
     }&#xD;
     assert defenderTile != null;&#xD;
&#xD;
     // If the combat results were not specified (usually the case),&#xD;
     // query the combat model.&#xD;
     if (crs == null) {&#xD;
         crs = combatModel.generateAttackResult(random, attacker, defender);&#xD;
     }&#xD;
     if (crs.isEmpty()) {&#xD;
         throw new IllegalStateException(&quot;empty attack result&quot;);&#xD;
     }&#xD;
     // Extract main result, insisting it is one of the fundamental cases,&#xD;
     // and add the animation.&#xD;
     // Set vis so that loser always sees things.&#xD;
     // FIXME: Bombard animations&#xD;
     See vis; // Visibility that insists on the loser seeing the result.&#xD;
     CombatResult result = crs.remove(0);&#xD;
     switch (result) {&#xD;
     case NO_RESULT:&#xD;
         vis = See.perhaps();&#xD;
         break; // Do not animate if there is no result.&#xD;
     case WIN:&#xD;
         vis = See.perhaps().always(defenderPlayer);&#xD;
         if (isAttack) {&#xD;
             if (attackerTile == null&#xD;
                 || attackerTile == defenderTile&#xD;
                 || !attackerTile.isAdjacent(defenderTile)) {&#xD;
                 logger.warning(&quot;Bogus attack from &quot; + attackerTile&#xD;
                     + &quot; to &quot; + defenderTile&#xD;
                     + &quot;\n&quot; + FreeColDebugger.stackTraceToString());&#xD;
             } else {&#xD;
                 cs.addAttack(vis, attackerUnit, defenderUnit, true);&#xD;
             }&#xD;
         }&#xD;
         break;&#xD;
     case LOSE:&#xD;
         vis = See.perhaps().always(this);&#xD;
         if (isAttack) {&#xD;
             if (attackerTile == null&#xD;
                 || attackerTile == defenderTile&#xD;
                 || !attackerTile.isAdjacent(defenderTile)) {&#xD;
                 logger.warning(&quot;Bogus attack from &quot; + attackerTile&#xD;
                     + &quot; to &quot; + defenderTile&#xD;
                     + &quot;\n&quot; + FreeColDebugger.stackTraceToString());&#xD;
             } else {&#xD;
                 cs.addAttack(vis, attackerUnit, defenderUnit, false);&#xD;
             }&#xD;
         }&#xD;
         break;&#xD;
     default:&#xD;
         throw new IllegalStateException(&quot;generateAttackResult returned: &quot;&#xD;
                                         + result);&#xD;
     }&#xD;
     // Now process the details.&#xD;
     boolean attackerTileDirty = false;&#xD;
     boolean defenderTileDirty = false;&#xD;
     boolean moveAttacker = false;&#xD;
     boolean burnedNativeCapital = false;&#xD;
     Settlement settlement = defenderTile.getSettlement();&#xD;
     Colony colony = defenderTile.getColony();&#xD;
     IndianSettlement natives = (settlement instanceof IndianSettlement)&#xD;
         ? (IndianSettlement) settlement&#xD;
         : null;&#xD;
     int attackerTension = 0;&#xD;
     int defenderTension = 0;&#xD;
     for (CombatResult cr : crs) {&#xD;
         boolean ok;&#xD;
         switch (cr) {&#xD;
         case AUTOEQUIP_UNIT:&#xD;
             ok = isAttack &amp;&amp; settlement != null;&#xD;
             if (ok) {&#xD;
                 csAutoequipUnit(defenderUnit, settlement, cs);&#xD;
             }&#xD;
             break;&#xD;
         case BURN_MISSIONS:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; natives != null&#xD;
                 &amp;&amp; isEuropean() &amp;&amp; defenderPlayer.isIndian();&#xD;
             if (ok) {&#xD;
                 defenderTileDirty |= natives.hasMissionary(this);&#xD;
                 csBurnMissions(attackerUnit, natives, cs);&#xD;
             }&#xD;
             break;&#xD;
         case CAPTURE_AUTOEQUIP:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; settlement != null;&#xD;
             if (ok) {&#xD;
                 csCaptureAutoEquip(attackerUnit, defenderUnit, cs);&#xD;
                 attackerTileDirty = defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case CAPTURE_COLONY:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; colony != null&#xD;
                 &amp;&amp; isEuropean() &amp;&amp; defenderPlayer.isEuropean();&#xD;
             if (ok) {&#xD;
                 csCaptureColony(attackerUnit, (ServerColony)colony,&#xD;
                                 random, cs);&#xD;
                 attackerTileDirty = defenderTileDirty = false;&#xD;
                 moveAttacker = true;&#xD;
                 defenderTension += Tension.TENSION_ADD_MAJOR;&#xD;
             }&#xD;
             break;&#xD;
         case CAPTURE_CONVERT:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; natives != null&#xD;
                 &amp;&amp; isEuropean() &amp;&amp; defenderPlayer.isIndian();&#xD;
             if (ok) {&#xD;
                 csCaptureConvert(attackerUnit, natives, random, cs);&#xD;
                 attackerTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case CAPTURE_EQUIP:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csCaptureEquip(attackerUnit, defenderUnit, cs);&#xD;
                 } else {&#xD;
                     csCaptureEquip(defenderUnit, attackerUnit, cs);&#xD;
                 }&#xD;
                 attackerTileDirty = defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case CAPTURE_UNIT:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csCaptureUnit(attackerUnit, defenderUnit, cs);&#xD;
                 } else {&#xD;
                     csCaptureUnit(defenderUnit, attackerUnit, cs);&#xD;
                 }&#xD;
                 attackerTileDirty = true;&#xD;
                 defenderTileDirty = false; // Added in csCaptureUnit&#xD;
             }&#xD;
             break;&#xD;
         case DAMAGE_COLONY_SHIPS:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; colony != null;&#xD;
             if (ok) {&#xD;
                 csDamageColonyShips(attackerUnit, colony, cs);&#xD;
                 defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case DAMAGE_SHIP_ATTACK:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT&#xD;
                 &amp;&amp; ((result == CombatResult.WIN) ? defenderUnit&#xD;
                     : attackerUnit).isNaval();&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csDamageShipAttack(attackerUnit, defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                 } else {&#xD;
                     csDamageShipAttack(defenderUnit, attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case DAMAGE_SHIP_BOMBARD:&#xD;
             ok = isBombard &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; defenderUnit.isNaval();&#xD;
             if (ok) {&#xD;
                 csDamageShipBombard(attackerSettlement, defenderUnit, cs);&#xD;
                 defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case DEMOTE_UNIT:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csDemoteUnit(attackerUnit, defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                 } else {&#xD;
                     csDemoteUnit(defenderUnit, attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case DESTROY_COLONY:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; colony != null&#xD;
                 &amp;&amp; isIndian() &amp;&amp; defenderPlayer.isEuropean();&#xD;
             if (ok) {&#xD;
                 csDestroyColony(attackerUnit, colony, random, cs);&#xD;
                 attackerTileDirty = defenderTileDirty = true;&#xD;
                 moveAttacker = true;&#xD;
                 attackerTension -= Tension.TENSION_ADD_NORMAL;&#xD;
                 defenderTension += Tension.TENSION_ADD_MAJOR;&#xD;
             }&#xD;
             break;&#xD;
         case DESTROY_SETTLEMENT:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; natives != null&#xD;
                 &amp;&amp; defenderPlayer.isIndian();&#xD;
             if (ok) {&#xD;
                 burnedNativeCapital = settlement.isCapital();&#xD;
                 csDestroySettlement(attackerUnit, natives, random, cs);&#xD;
                 attackerTileDirty = defenderTileDirty = true;&#xD;
                 moveAttacker = true;&#xD;
                 attackerTension -= Tension.TENSION_ADD_NORMAL;&#xD;
                 if (!burnedNativeCapital) {&#xD;
                     defenderTension += Tension.TENSION_ADD_MAJOR;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case EVADE_ATTACK:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.NO_RESULT&#xD;
                 &amp;&amp; defenderUnit.isNaval();&#xD;
             if (ok) {&#xD;
                 csEvadeAttack(attackerUnit, defenderUnit, cs);&#xD;
             }&#xD;
             break;&#xD;
         case EVADE_BOMBARD:&#xD;
             ok = isBombard &amp;&amp; result == CombatResult.NO_RESULT&#xD;
                 &amp;&amp; defenderUnit.isNaval();&#xD;
             if (ok) {&#xD;
                 csEvadeBombard(attackerSettlement, defenderUnit, cs);&#xD;
             }&#xD;
             break;&#xD;
         case LOOT_SHIP:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT&#xD;
                 &amp;&amp; attackerUnit.isNaval() &amp;&amp; defenderUnit.isNaval();&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csLootShip(attackerUnit, defenderUnit, cs);&#xD;
                 } else {&#xD;
                     csLootShip(defenderUnit, attackerUnit, cs);&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case LOSE_AUTOEQUIP:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; settlement != null;&#xD;
             if (ok) {&#xD;
                 csLoseAutoEquip(attackerUnit, defenderUnit, cs);&#xD;
                 defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case LOSE_EQUIP:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csLoseEquip(attackerUnit, defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                 } else {&#xD;
                     csLoseEquip(defenderUnit, attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case PILLAGE_COLONY:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; colony != null&#xD;
                 &amp;&amp; isIndian() &amp;&amp; defenderPlayer.isEuropean();&#xD;
             if (ok) {&#xD;
                 csPillageColony(attackerUnit, colony, random, cs);&#xD;
                 defenderTileDirty = true;&#xD;
                 attackerTension -= Tension.TENSION_ADD_NORMAL;&#xD;
             }&#xD;
             break;&#xD;
         case PROMOTE_UNIT:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csPromoteUnit(attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                 } else {&#xD;
                     csPromoteUnit(defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case SINK_COLONY_SHIPS:&#xD;
             ok = isAttack &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; colony != null;&#xD;
             if (ok) {&#xD;
                 csSinkColonyShips(attackerUnit, colony, cs);&#xD;
                 defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case SINK_SHIP_ATTACK:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT&#xD;
                 &amp;&amp; ((result == CombatResult.WIN) ? defenderUnit&#xD;
                     : attackerUnit).isNaval();&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csSinkShipAttack(attackerUnit, defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                 } else {&#xD;
                     csSinkShipAttack(defenderUnit, attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         case SINK_SHIP_BOMBARD:&#xD;
             ok = isBombard &amp;&amp; result == CombatResult.WIN&#xD;
                 &amp;&amp; defenderUnit.isNaval();&#xD;
             if (ok) {&#xD;
                 csSinkShipBombard(attackerSettlement, defenderUnit, cs);&#xD;
                 defenderTileDirty = true;&#xD;
             }&#xD;
             break;&#xD;
         case SLAUGHTER_UNIT:&#xD;
             ok = isAttack &amp;&amp; result != CombatResult.NO_RESULT;&#xD;
             if (ok) {&#xD;
                 if (result == CombatResult.WIN) {&#xD;
                     csSlaughterUnit(attackerUnit, defenderUnit, cs);&#xD;
                     defenderTileDirty = true;&#xD;
                     attackerTension -= Tension.TENSION_ADD_NORMAL;&#xD;
                     defenderTension += getSlaughterTension(defenderUnit);&#xD;
                 } else {&#xD;
                     csSlaughterUnit(defenderUnit, attackerUnit, cs);&#xD;
                     attackerTileDirty = true;&#xD;
                     attackerTension += getSlaughterTension(attackerUnit);&#xD;
                     defenderTension -= Tension.TENSION_ADD_NORMAL;&#xD;
                 }&#xD;
             }&#xD;
             break;&#xD;
         default:&#xD;
             ok = false;&#xD;
             break;&#xD;
         }&#xD;
         if (!ok) {&#xD;
             throw new IllegalStateException(&quot;Attack (result=&quot; + result&#xD;
                                             + &quot;) has bogus subresult: &quot;&#xD;
                                             + cr);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Handle stance and tension.&#xD;
     // - Privateers do not provoke stance changes but can set the&#xD;
     //     attackedByPrivateers flag&#xD;
     // - Attacks among Europeans imply war&#xD;
     // - Burning of a native capital results in surrender&#xD;
     // - Other attacks involving natives do not imply war, but&#xD;
     //     changes in Tension can drive Stance, however this is&#xD;
     //     decided by the native AI in their turn so just adjust tension.&#xD;
     if (attacker.hasAbility(Ability.PIRACY)) {&#xD;
         if (!defenderPlayer.getAttackedByPrivateers()) {&#xD;
             defenderPlayer.setAttackedByPrivateers(true);&#xD;
             cs.addPartial(See.only(defenderPlayer), defenderPlayer,&#xD;
                           &quot;attackedByPrivateers&quot;);&#xD;
         }&#xD;
     } else if (defender.hasAbility(Ability.PIRACY)) {&#xD;
         ; // do nothing&#xD;
     } else if (burnedNativeCapital) {&#xD;
         defenderPlayer.getTension(this).setValue(Tension.SURRENDERED);&#xD;
         // FIXME: just the tension&#xD;
         cs.add(See.perhaps().always(this), defenderPlayer);&#xD;
         csChangeStance(Stance.PEACE, defenderPlayer, true, cs);&#xD;
         for (IndianSettlement is : defenderPlayer.getIndianSettlements()) {&#xD;
             if (is.hasContacted(this)) {&#xD;
                 is.getAlarm(this).setValue(Tension.SURRENDERED);&#xD;
                 // Only update attacker with settlements that have&#xD;
                 // been seen, as contact can occur with its members.&#xD;
                 if (hasExplored(is.getTile())) {&#xD;
                     cs.add(See.perhaps().always(this), is);&#xD;
                 } else {&#xD;
                     cs.add(See.only(defenderPlayer), is);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } else if (isEuropean() &amp;&amp; defenderPlayer.isEuropean()) {&#xD;
         csChangeStance(Stance.WAR, defenderPlayer, true, cs);&#xD;
     } else { // At least one player is non-European&#xD;
         if (isEuropean()) {&#xD;
             csChangeStance(Stance.WAR, defenderPlayer, true, cs);&#xD;
         } else if (isIndian()) {&#xD;
             if (result == CombatResult.WIN) {&#xD;
                 attackerTension -= Tension.TENSION_ADD_MINOR;&#xD;
             } else if (result == CombatResult.LOSE) {&#xD;
                 attackerTension += Tension.TENSION_ADD_MINOR;&#xD;
             }&#xD;
         }&#xD;
         if (defenderPlayer.isEuropean()) {&#xD;
             defenderPlayer.csChangeStance(Stance.WAR, this, true, cs);&#xD;
         } else if (defenderPlayer.isIndian()) {&#xD;
             if (result == CombatResult.WIN) {&#xD;
                 defenderTension += Tension.TENSION_ADD_MINOR;&#xD;
             } else if (result == CombatResult.LOSE) {&#xD;
                 defenderTension -= Tension.TENSION_ADD_MINOR;&#xD;
             }&#xD;
         }&#xD;
         if (attackerTension != 0) {&#xD;
             this.csModifyTension(defenderPlayer,&#xD;
                                  attackerTension, cs);//+til&#xD;
         }&#xD;
         if (defenderTension != 0) {&#xD;
             defenderPlayer.csModifyTension(this,&#xD;
                                            defenderTension, cs);//+til&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Move the attacker if required.&#xD;
     if (moveAttacker) {&#xD;
         attackerUnit.setMovesLeft(attackerUnit.getInitialMovesLeft());&#xD;
         ((ServerUnit) attackerUnit).csMove(defenderTile, random, cs);&#xD;
         attackerUnit.setMovesLeft(0);&#xD;
         // Move adds in updates for the tiles, but...&#xD;
         attackerTileDirty = defenderTileDirty = false;&#xD;
         // ...with visibility of perhaps().&#xD;
         // Thus the defender might see the change,&#xD;
         // but because its settlement is gone it also might not.&#xD;
         // So add in another defender-specific update.&#xD;
         // The worst that can happen is a duplicate update.&#xD;
         cs.add(See.only(defenderPlayer), defenderTile);&#xD;
     } else if (isAttack) {&#xD;
         // The Revenger unit can attack multiple times, so spend&#xD;
         // at least the eventual cost of moving to the tile.&#xD;
         // Other units consume the entire move.&#xD;
         if (attacker.hasAbility(Ability.MULTIPLE_ATTACKS)) {&#xD;
             int movecost = attackerUnit.getMoveCost(defenderTile);&#xD;
             attackerUnit.setMovesLeft(attackerUnit.getMovesLeft()&#xD;
                                       - movecost);&#xD;
         } else {&#xD;
             attackerUnit.setMovesLeft(0);&#xD;
         }&#xD;
         if (!attackerTileDirty) {&#xD;
             cs.addPartial(See.only(this), attacker, &quot;movesLeft&quot;);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Make sure we always update the attacker and defender tile&#xD;
     // if it is not already done yet.&#xD;
     if (attackerTileDirty) {&#xD;
         if (attackerSettlement != null) cs.remove(attackerSettlement);&#xD;
         cs.add(vis, attackerTile);&#xD;
     }&#xD;
     if (defenderTileDirty) {&#xD;
         if (settlement != null) cs.remove(settlement);&#xD;
         cs.add(vis, defenderTile);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV3gK1JREeiyW7NaN4qWdw" name="getSlaughterTension" specification="_QUyiEVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV3gLFJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gLVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Tension rises faster when units die.&#xD;
     Settlement settlement = loser.getSettlement();&#xD;
     if (settlement != null) {&#xD;
         if (settlement instanceof IndianSettlement) {&#xD;
             return (settlement.isCapital())&#xD;
                 ? Tension.TENSION_ADD_CAPITAL_ATTACKED&#xD;
                 : Tension.TENSION_ADD_SETTLEMENT_ATTACKED;&#xD;
         } else {&#xD;
             return Tension.TENSION_ADD_NORMAL;&#xD;
         }&#xD;
     } else { // attack in the open&#xD;
         return (loser.getHomeIndianSettlement() != null)&#xD;
             ? Tension.TENSION_ADD_UNIT_DESTROYED&#xD;
             : Tension.TENSION_ADD_MINOR;&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV3gLlJREeiyW7NaN4qWdw" name="csAutoequipUnit" specification="_QUzJIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV3gL1JREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gMFJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gMVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer player = (ServerPlayer) unit.getOwner();&#xD;
     cs.addMessage(See.only(player),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.automaticDefence&quot;, unit)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, unit.getLabel())&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV3gMlJREeiyW7NaN4qWdw" name="csBurnMissions" specification="_QUzwMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV3gM1JREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gNFJREeiyW7NaN4qWdw" name="settlement" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV3gNVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attackerPlayer.getNationLabel();&#xD;
     ServerPlayer nativePlayer = (ServerPlayer) settlement.getOwner();&#xD;
     StringTemplate nativeNation = nativePlayer.getNationLabel();&#xD;
&#xD;
     // Message only for the European player&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.burnMissions&quot;, attacker, settlement)&#xD;
                   .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
                   .addStringTemplate(&quot;%enemyNation%&quot;, nativeNation));&#xD;
&#xD;
     // Burn down the missions&#xD;
     boolean here = settlement.hasMissionary(attackerPlayer);&#xD;
     for (IndianSettlement s : nativePlayer.getIndianSettlements()) {&#xD;
         if (s.hasMissionary(attackerPlayer)) {&#xD;
             ((ServerIndianSettlement)s).csKillMissionary(null, cs);&#xD;
         }&#xD;
     }&#xD;
     // Backtrack on updating this tile, avoiding duplication in csCombat&#xD;
     if (here) cs.remove(settlement.getTile());&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4HMFJREeiyW7NaN4qWdw" name="csCaptureAutoEquip" specification="_QUzwNFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4HMVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HMlJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HM1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Role role = defender.getAutomaticRole();&#xD;
     csLoseAutoEquip(attacker, defender, cs);&#xD;
     csCaptureEquipment(attacker, defender, role, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4HNFJREeiyW7NaN4qWdw" name="csCaptureColony" specification="_QU0XQ1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4HNVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HNlJREeiyW7NaN4qWdw" name="colony" type="_P_2z4FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HN1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HOFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Game game = attacker.getGame();&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attackerPlayer.getNationLabel();&#xD;
     ServerPlayer colonyPlayer = (ServerPlayer) colony.getOwner();&#xD;
     StringTemplate colonyNation = colonyPlayer.getNationLabel();&#xD;
     Tile tile = colony.getTile();&#xD;
     List&lt;Unit> units = new ArrayList&lt;>();&#xD;
     units.addAll(colony.getUnitList());&#xD;
     units.addAll(tile.getUnitList());&#xD;
     int plunder = colony.getPlunder(attacker, random);&#xD;
&#xD;
     // Handle history and messages before colony handover&#xD;
     cs.addHistory(attackerPlayer,&#xD;
         new HistoryEvent(game.getTurn(),&#xD;
             HistoryEvent.HistoryEventType.CONQUER_COLONY, attackerPlayer)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, colonyNation)&#xD;
             .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
     cs.addHistory(colonyPlayer,&#xD;
         new HistoryEvent(game.getTurn(),&#xD;
             HistoryEvent.HistoryEventType.COLONY_CONQUERED, attackerPlayer)&#xD;
                   .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
                   .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
                   new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                                    &quot;combat.colonyCaptured&quot;, colony)&#xD;
                   .addName(&quot;%colony%&quot;, colony.getName())&#xD;
                   .addAmount(&quot;%amount%&quot;, plunder));&#xD;
     cs.addMessage(See.only(colonyPlayer),&#xD;
                   new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                                    &quot;combat.colonyCapturedBy&quot;, tile)&#xD;
                   .addName(&quot;%colony%&quot;, colony.getName())&#xD;
                   .addAmount(&quot;%amount%&quot;, plunder)&#xD;
                   .addStringTemplate(&quot;%player%&quot;, attackerNation));&#xD;
     colonyPlayer.csLoseLocation(colony, cs);&#xD;
&#xD;
     // Allocate some plunder&#xD;
     if (plunder > 0) {&#xD;
         attackerPlayer.modifyGold(plunder);&#xD;
         colonyPlayer.modifyGold(-plunder);&#xD;
         cs.addPartial(See.only(attackerPlayer), attackerPlayer, &quot;gold&quot;);&#xD;
         cs.addPartial(See.only(colonyPlayer), colonyPlayer, &quot;gold&quot;);&#xD;
     }&#xD;
&#xD;
     // Remove goods party modifiers as they apply to a different monarch.&#xD;
     for (Modifier m : colony.getModifiers()) {&#xD;
         if (Specification.COLONY_GOODS_PARTY_SOURCE == m.getSource()) {&#xD;
             colony.removeModifier(m);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // The colony is falling, so allow other neighbours a chance&#xD;
     // to claim its tiles.  Make sure units are ejected when a tile&#xD;
     // is claimed.&#xD;
     Set&lt;Tile> tiles = colony.getOwnedTiles();&#xD;
     tile.cacheUnseen();&#xD;
     tiles.remove(tile);&#xD;
     for (Tile t : tiles) {&#xD;
         t.cacheUnseen();&#xD;
         t.changeOwnership(null, null);//-til&#xD;
     }&#xD;
     reassignTiles(tiles, colonyPlayer, colony);//-til&#xD;
     for (Tile t : tiles) {&#xD;
         if (t.getOwningSettlement() != colony) {&#xD;
             ColonyTile ct = colony.getColonyTile(t);&#xD;
             colony.ejectUnits(ct, ct.getUnitList());&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Hand over the colony.  Inform former owner of loss of owned&#xD;
     // tiles, and process possible increase in line of sight.&#xD;
     // No need to display the colony tile or the attacker tile to&#xD;
     // the attacking player as the unit is yet to move&#xD;
     Set&lt;Tile> explored = colony//-til&#xD;
         .csChangeOwner(attackerPlayer, cs);//-vis(attackerPlayer,colonyPlayer)&#xD;
     explored.addAll(tiles);&#xD;
     if (attacker.hasTile()) explored.remove(attacker.getTile());&#xD;
     cs.add(See.only(attackerPlayer), explored);&#xD;
     cs.add(See.perhaps().always(colonyPlayer).except(attackerPlayer),&#xD;
            tiles);&#xD;
&#xD;
     // Inform the former owner of loss of units, and add sound.&#xD;
     cs.addRemoves(See.only(colonyPlayer), null, units);&#xD;
     cs.addAttribute(See.only(attackerPlayer), &quot;sound&quot;,&#xD;
                     &quot;sound.event.captureColony&quot;);&#xD;
&#xD;
     // Ready to reset visibility&#xD;
     attackerPlayer.invalidateCanSeeTiles();//+vis(attackerPlayer)&#xD;
     colonyPlayer.invalidateCanSeeTiles();//+vis(colonyPlayer)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4HOVJREeiyW7NaN4qWdw" name="csCaptureConvert" specification="_QU0-UFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4HOlJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HO1JREeiyW7NaN4qWdw" name="is" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HPFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HPVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Specification spec = getGame().getSpecification();&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer)attacker.getOwner();&#xD;
     ServerPlayer nativePlayer = (ServerPlayer)is.getOwner();&#xD;
     StringTemplate convertNation = nativePlayer.getNationLabel();&#xD;
     List&lt;Unit> units = is.getTile().getUnitList();&#xD;
     if (units.isEmpty()) units.addAll(is.getUnitList());&#xD;
     ServerUnit convert = (ServerUnit)getRandomMember(logger,&#xD;
         &quot;Choose convert&quot;, units, random);&#xD;
     if (nativePlayer.csChangeOwner(convert, attackerPlayer,&#xD;
                                    ChangeType.CONVERSION,&#xD;
                                    attacker.getTile(),&#xD;
                                    cs)) { //-vis(attackerPlayer)&#xD;
         convert.changeRole(spec.getDefaultRole(), 0);&#xD;
         convert.setMovesLeft(0);&#xD;
         convert.setState(Unit.UnitState.ACTIVE);&#xD;
         cs.add(See.only(nativePlayer), is.getTile());&#xD;
         cs.addMessage(See.only(attackerPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                              &quot;combat.newConvertFromAttack&quot;, convert)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, convertNation)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, convert.getLabel()));&#xD;
         attackerPlayer.invalidateCanSeeTiles();//+vis(attackerPlayer)&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4HPlJREeiyW7NaN4qWdw" name="csCaptureEquip" specification="_QU1lYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4HP1JREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HQFJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4HQVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Role role = loser.getRole();&#xD;
     csLoseEquip(winner, loser, cs);&#xD;
     csCaptureEquipment(winner, loser, role, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4uQFJREeiyW7NaN4qWdw" name="csCaptureEquipment" specification="_QU2McFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4uQVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uQlJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uQ1JREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uRFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();&#xD;
     Role newRole = winner.canCaptureEquipment(role);&#xD;
     if (newRole != null) {&#xD;
         List&lt;AbstractGoods> newGoods&#xD;
             = winner.getGoodsDifference(newRole, 1);&#xD;
         GoodsType goodsType = newGoods.get(0).getType(); // FIXME: generalize&#xD;
         winner.changeRole(newRole, 1);&#xD;
&#xD;
         // Currently can not capture equipment back so this only&#xD;
         // makes sense for native players, and the message is&#xD;
         // native specific.&#xD;
         if (winnerPlayer.isIndian()) {&#xD;
             StringTemplate winnerNation = winnerPlayer.getNationLabel();&#xD;
             cs.addMessage(See.only(loserPlayer),&#xD;
                           new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                                            &quot;combat.equipmentCaptured&quot;,&#xD;
                                            winnerPlayer)&#xD;
                           .addStringTemplate(&quot;%nation%&quot;, winnerNation)&#xD;
                           .addNamed(&quot;%equipment%&quot;, goodsType));&#xD;
&#xD;
             // CHEAT: Immediately transferring the captured goods&#xD;
             // back to a potentially remote settlement is pretty&#xD;
             // dubious.  Apparently Col1 did it.  Better would be&#xD;
             // to give the capturing unit a go-home-with-plunder mission.&#xD;
             IndianSettlement settlement = winner.getHomeIndianSettlement();&#xD;
             if (settlement != null) {&#xD;
                 for (AbstractGoods ag : newGoods) {&#xD;
                     settlement.addGoods(ag);&#xD;
                     winnerPlayer.logCheat(&quot;teleported &quot; + ag&#xD;
                         + &quot; back to &quot; + settlement.getName());&#xD;
                 }&#xD;
                 cs.add(See.only(winnerPlayer), settlement);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4uRVJREeiyW7NaN4qWdw" name="csCaptureUnit" specification="_QU2MdVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4uRlJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uR1JREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uSFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();&#xD;
     StringTemplate loserNation = loserPlayer.getNationLabel();&#xD;
     StringTemplate loserLocation = loser.getLocation()&#xD;
         .getLocationLabelFor(loserPlayer);&#xD;
     StringTemplate oldName = loser.getLabel();&#xD;
     String messageId = &quot;combat.unitCaptured.&quot;&#xD;
         + loser.getType().getSuffix();&#xD;
     ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     StringTemplate winnerNation = winnerPlayer.getNationLabel();&#xD;
     StringTemplate winnerLocation = winner.getLocation()&#xD;
         .getLocationLabelFor(winnerPlayer);&#xD;
&#xD;
     // Capture the unit.  There are visibility implications for&#xD;
     // both players because the captured unit might be the only&#xD;
     // one on its tile, and the winner might have captured a unit&#xD;
     // with greater line of sight.&#xD;
     Tile oldTile = loser.getTile();&#xD;
     ChangeType change = (winnerPlayer.isUndead()) ? ChangeType.UNDEAD&#xD;
         : ChangeType.CAPTURE;&#xD;
     if (loserPlayer.csChangeOwner(loser, winnerPlayer, change,&#xD;
             winner.getTile(), cs)) {//-vis(both)&#xD;
         loser.setMovesLeft(0);&#xD;
         loser.setState(Unit.UnitState.ACTIVE);&#xD;
         cs.add(See.perhaps().always(loserPlayer), oldTile);&#xD;
         // Winner message post-capture when it owns the loser&#xD;
         cs.addMessage(See.only(winnerPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                 messageId, &quot;combat.unitCaptured&quot;, loser)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
                 .addStringTemplate(&quot;%unit%&quot;, oldName)&#xD;
                 .addStringTemplate(&quot;%enemyNation%&quot;, winnerNation)&#xD;
                 .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
                 .addStringTemplate(&quot;%location%&quot;, winnerLocation));&#xD;
     }&#xD;
     cs.addMessage(See.only(loserPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitCaptured&quot;, loser.getTile())&#xD;
             .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
             .addStringTemplate(&quot;%unit%&quot;, oldName)&#xD;
             .addStringTemplate(&quot;%enemyNation%&quot;, winnerNation)&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
            .addStringTemplate(&quot;%location%&quot;, loserLocation));&#xD;
     winnerPlayer.invalidateCanSeeTiles();//+vis(winnerPlayer)&#xD;
     loserPlayer.invalidateCanSeeTiles();//+vis(loserPlayer)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4uSVJREeiyW7NaN4qWdw" name="csDamageColonyShips" specification="_QU2zg1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4uSlJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uS1JREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uTFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>boolean captureRepairing = getSpecification()&#xD;
         .getBoolean(GameOptions.CAPTURE_UNITS_UNDER_REPAIR);&#xD;
     List&lt;Unit> units = colony.getTile().getUnitList();&#xD;
     while (!units.isEmpty()) {&#xD;
         Unit unit = units.remove(0);&#xD;
         if (unit.isNaval() &amp;&amp; !(captureRepairing &amp;&amp; unit.isDamaged())) {&#xD;
             csDamageShipAttack(attacker, unit, cs);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV4uTVJREeiyW7NaN4qWdw" name="csDamageShipAttack" specification="_QU3akFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV4uTlJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uT1JREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV4uUFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attacker.getApparentOwnerName();&#xD;
     ServerPlayer shipPlayer = (ServerPlayer) ship.getOwner();&#xD;
     Location repair = ship.getRepairLocation();&#xD;
     StringTemplate repairLoc = repair.getLocationLabelFor(shipPlayer);&#xD;
     StringTemplate shipNation = ship.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.enemyShipDamaged&quot;, attacker)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, attacker.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, shipNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, ship.getLabel()));&#xD;
     cs.addMessage(See.only(shipPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipDamaged&quot;, ship)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation)&#xD;
         .addStringTemplate(&quot;%repairLocation%&quot;, repairLoc));&#xD;
&#xD;
     csDamageShip(ship, repair, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV5VUFJREeiyW7NaN4qWdw" name="csDamageShipBombard" specification="_QU4BoFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV5VUVJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VUlJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VU1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) settlement.getOwner();&#xD;
     ServerPlayer shipPlayer = (ServerPlayer) ship.getOwner();&#xD;
     Location repair = ship.getRepairLocation();&#xD;
     StringTemplate repairLoc = repair.getLocationLabelFor(shipPlayer);&#xD;
     StringTemplate shipNation = ship.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.enemyShipDamagedByBombardment&quot;, settlement)&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, shipNation)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel()));&#xD;
     cs.addMessage(See.only(shipPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipDamagedByBombardment&quot;, ship)&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel())&#xD;
         .addStringTemplate(&quot;%repairLocation%&quot;, repairLoc));&#xD;
&#xD;
     csDamageShip(ship, repair, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV5VVFJREeiyW7NaN4qWdw" name="csDamageShip" specification="_QU4BpFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV5VVVJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VVlJREeiyW7NaN4qWdw" name="repair" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VV1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer player = (ServerPlayer) ship.getOwner();&#xD;
&#xD;
     // Lose the goods and units aboard&#xD;
     for (Goods g : ship.getGoodsContainer().getCompactGoods()) {&#xD;
         ship.remove(g);&#xD;
     }&#xD;
     for (Unit u : ship.getUnitList()) {&#xD;
         ship.remove(u);&#xD;
         cs.addRemove(See.only(player), null, u);//-vis: safe, within unit&#xD;
         u.dispose();&#xD;
     }&#xD;
&#xD;
     // Damage the ship and send it off for repair&#xD;
     Location shipLoc = (repair instanceof Colony) ? repair.getTile()&#xD;
         : repair;&#xD;
     ship.setHitPoints(1);&#xD;
     ship.setDestination(null);&#xD;
     ship.setLocation(shipLoc);//-vis(player)&#xD;
     ship.setState(Unit.UnitState.ACTIVE);&#xD;
     ship.setMovesLeft(0);&#xD;
     cs.add(See.only(player), (FreeColGameObject)shipLoc);&#xD;
     player.invalidateCanSeeTiles();//+vis(player)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV5VWFJREeiyW7NaN4qWdw" name="csDemoteUnit" specification="_QU4osFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV5VWVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VWlJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VW1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();&#xD;
     StringTemplate loserNation = loser.getApparentOwnerName();&#xD;
     StringTemplate loserLocation = loser.getLocation()&#xD;
         .getLocationLabelFor(loserPlayer);&#xD;
     StringTemplate oldName = loser.getLabel();&#xD;
     String messageId = &quot;combat.unitDemoted.&quot; + loser.getType().getSuffix();&#xD;
     ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     StringTemplate winnerNation = winner.getApparentOwnerName();&#xD;
     StringTemplate winnerLocation = winner.getLocation()&#xD;
         .getLocationLabelFor(winnerPlayer);&#xD;
&#xD;
     UnitType type = loser.getTypeChange(ChangeType.DEMOTION, loserPlayer);&#xD;
     if (type == null || type == loser.getType()) {&#xD;
         logger.warning(&quot;Demotion failed, type=&quot;&#xD;
             + ((type == null) ? &quot;null&quot; : &quot;same type: &quot; + type));&#xD;
         return;&#xD;
     }&#xD;
     loser.changeType(type);//-vis(loserPlayer)&#xD;
     loserPlayer.invalidateCanSeeTiles();//+vis(loserPlayer)&#xD;
&#xD;
     cs.addMessage(See.only(winnerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitDemoted&quot;, winner)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
         .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, winnerLocation));&#xD;
     cs.addMessage(See.only(loserPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitDemoted&quot;, loser)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, loserLocation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV5VXFJREeiyW7NaN4qWdw" name="csDestroyColony" specification="_QU5PwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV5VXVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VXlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VX1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV5VYFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>Game game = attacker.getGame();&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attacker.getApparentOwnerName();&#xD;
     ServerPlayer colonyPlayer = (ServerPlayer) colony.getOwner();&#xD;
     StringTemplate colonyNation = colonyPlayer.getNationLabel();&#xD;
     int plunder = colony.getPlunder(attacker, random);&#xD;
&#xD;
     // Handle history and messages before colony destruction.&#xD;
     cs.addHistory(colonyPlayer,&#xD;
         new HistoryEvent(game.getTurn(),&#xD;
             HistoryEvent.HistoryEventType.COLONY_DESTROYED, attackerPlayer)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
         .addName(&quot;%colony%&quot;, colony.getName()));&#xD;
     cs.addMessage(See.only(colonyPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.colonyBurning&quot;, colony.getTile())&#xD;
         .addName(&quot;%colony%&quot;, colony.getName())&#xD;
         .addAmount(&quot;%amount%&quot;, plunder)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, attacker.getLabel()));&#xD;
     cs.addMessage(See.all().except(colonyPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.enemyColonyBurning&quot;, colonyPlayer)&#xD;
         .addName(&quot;%colony%&quot;, colony.getName())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, colonyNation)&#xD;
         .addStringTemplate(&quot;%attackerNation%&quot;, attackerNation));&#xD;
     colonyPlayer.csLoseLocation(colony, cs);&#xD;
&#xD;
     // Allocate some plunder.&#xD;
     if (plunder > 0) {&#xD;
         attackerPlayer.modifyGold(plunder);&#xD;
         colonyPlayer.modifyGold(-plunder);&#xD;
         cs.addPartial(See.only(attackerPlayer), attackerPlayer, &quot;gold&quot;);&#xD;
         cs.addPartial(See.only(colonyPlayer), colonyPlayer, &quot;gold&quot;);&#xD;
     }&#xD;
&#xD;
     // Dispose of the colony and its contents.&#xD;
     csDisposeSettlement(colony, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV58YFJREeiyW7NaN4qWdw" name="csDestroySettlement" specification="_QU520FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV58YVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58YlJREeiyW7NaN4qWdw" name="settlement" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58Y1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58ZFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Game game = getGame();&#xD;
     final Specification spec = game.getSpecification();&#xD;
     Tile tile = settlement.getTile();&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     ServerPlayer nativePlayer = (ServerPlayer) settlement.getOwner();&#xD;
     StringTemplate attackerNation = attackerPlayer.getNationLabel();&#xD;
     StringTemplate nativeNation = nativePlayer.getNationLabel();&#xD;
     String settlementName = settlement.getName();&#xD;
     boolean capital = settlement.isCapital();&#xD;
     int plunder = settlement.getPlunder(attacker, random);&#xD;
&#xD;
     // Remaining units lose their home.&#xD;
     for (Unit u : settlement.getOwnedUnits()) {&#xD;
         u.setHomeIndianSettlement(null);&#xD;
         cs.add(See.only(nativePlayer), u);&#xD;
     }&#xD;
             &#xD;
     // Destroy the settlement, update settlement tiles.&#xD;
     csDisposeSettlement(settlement, cs);&#xD;
&#xD;
     // Make the treasure train if there is treasure.&#xD;
     if (plunder > 0) {&#xD;
         List&lt;UnitType> unitTypes&#xD;
             = spec.getUnitTypesWithAbility(Ability.CARRY_TREASURE);&#xD;
         UnitType type = getRandomMember(logger, &quot;Choose train&quot;,&#xD;
                                         unitTypes, random);&#xD;
         Unit train = new ServerUnit(game, tile, attackerPlayer,&#xD;
                                     type);//-vis: safe, attacker on tile&#xD;
         train.setTreasureAmount(plunder);&#xD;
     }&#xD;
&#xD;
     // This is an atrocity.&#xD;
     int score = spec.getInteger(GameOptions.DESTROY_SETTLEMENT_SCORE);&#xD;
     HistoryEvent h = new HistoryEvent(game.getTurn(),&#xD;
         HistoryEvent.HistoryEventType.DESTROY_SETTLEMENT, this)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, nativeNation)&#xD;
         .addName(&quot;%settlement%&quot;, settlementName);&#xD;
     h.setScore(score);&#xD;
     cs.addHistory(attackerPlayer, h);&#xD;
&#xD;
     // Finish with messages and history.&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                          &quot;combat.indianTreasure&quot;, attacker)&#xD;
             .addName(&quot;%settlement%&quot;, settlementName)&#xD;
             .addAmount(&quot;%amount%&quot;, plunder));&#xD;
     if (capital) {&#xD;
         cs.addMessage(See.only(attackerPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                              &quot;combat.nativeCapitalBurned&quot;, attacker)&#xD;
                 .addName(&quot;%name%&quot;, settlementName)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, nativeNation));&#xD;
     }&#xD;
     if (nativePlayer.checkForDeath() == IS_DEAD) {&#xD;
         h = new HistoryEvent(game.getTurn(),&#xD;
             HistoryEvent.HistoryEventType.DESTROY_NATION, this)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
             .addStringTemplate(&quot;%nativeNation%&quot;, nativeNation);&#xD;
         h.setScore(SCORE_NATION_DESTROYED);&#xD;
         cs.addGlobalHistory(game, h);&#xD;
     }&#xD;
     cs.addAttribute(See.only(attackerPlayer), &quot;sound&quot;,&#xD;
         &quot;sound.event.destroySettlement&quot;);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV58ZVJREeiyW7NaN4qWdw" name="csDisposeSettlement" specification="_QU521VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV58ZlJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58Z1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>logger.finest(&quot;Disposing of &quot; + settlement.getName());&#xD;
     ServerPlayer owner = (ServerPlayer)settlement.getOwner();&#xD;
     Set&lt;Tile> owned = settlement.getOwnedTiles();&#xD;
     for (Tile t : owned) t.cacheUnseen();//+til&#xD;
     Tile centerTile = settlement.getTile();&#xD;
     ServerPlayer missionaryOwner = null;&#xD;
     int radius = 0;&#xD;
&#xD;
     // Get rid of the any missionary first.&#xD;
     if (settlement instanceof ServerIndianSettlement) {&#xD;
         ServerIndianSettlement sis = (ServerIndianSettlement)settlement;&#xD;
         if (sis.hasMissionary()) {&#xD;
             missionaryOwner = (ServerPlayer)sis.getMissionary().getOwner();&#xD;
             radius = sis.getMissionaryLineOfSight();&#xD;
             sis.csKillMissionary(true, cs);&#xD;
         }&#xD;
     }&#xD;
         &#xD;
     // Get it off the map and off the owners list.&#xD;
     settlement.exciseSettlement();//-vis(owner),-til&#xD;
     owner.removeSettlement(settlement);&#xD;
     if (owner.hasSettlement(settlement)) {&#xD;
         throw new IllegalStateException(&quot;Still has settlement: &quot;&#xD;
             + settlement);&#xD;
     }&#xD;
&#xD;
     // Reassign the tiles owned by the settlement, if possible&#xD;
     reassignTiles(owned, owner, null);&#xD;
&#xD;
     See vis = See.perhaps().always(owner);&#xD;
     if (missionaryOwner != null) vis.except(missionaryOwner);&#xD;
     cs.add(vis, owned);&#xD;
     cs.addRemove(vis, centerTile, settlement);//-vis(owner)&#xD;
     settlement.dispose();&#xD;
     owner.invalidateCanSeeTiles();//+vis(owner)&#xD;
&#xD;
     // Former missionary owner knows that the settlement fell.&#xD;
     if (missionaryOwner != null) {&#xD;
         List&lt;Tile> surrounding = new ArrayList&lt;>();&#xD;
         for (Tile t : centerTile.getSurroundingTiles(1, radius)) {&#xD;
             if (!owned.contains(t)) surrounding.add(t);&#xD;
         }&#xD;
         cs.add(See.only(missionaryOwner), owned);&#xD;
         cs.add(See.only(missionaryOwner), surrounding);&#xD;
         cs.addRemove(See.only(missionaryOwner), centerTile, settlement);&#xD;
         missionaryOwner.invalidateCanSeeTiles();//+vis(missionaryOwner)&#xD;
         for (Tile t : surrounding) t.cacheUnseen(missionaryOwner);&#xD;
     }&#xD;
&#xD;
     // Recache, should only show now cleared tiles to former owner.&#xD;
     for (Tile t : owned) t.cacheUnseen();&#xD;
     // Center tile is special for native settlements.  Because&#xD;
     // native settlement tiles are *always* cached, the cache&#xD;
     // needs to be completely cleared for players that can see the&#xD;
     // settlement is gone.&#xD;
     if (settlement instanceof IndianSettlement) centerTile.seeTile();&#xD;
     if (missionaryOwner != null) centerTile.seeTile(missionaryOwner);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV58aFJREeiyW7NaN4qWdw" name="csEvadeAttack" specification="_QU6d4FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV58aVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58alJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58a1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attacker.getApparentOwnerName();&#xD;
     ServerPlayer defenderPlayer = (ServerPlayer) defender.getOwner();&#xD;
     StringTemplate defenderNation = defender.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.enemyShipEvaded&quot;, attacker)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, attacker.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, defender.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, defenderNation));&#xD;
     cs.addMessage(See.only(defenderPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipEvaded&quot;, defender)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, defender.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV58bFJREeiyW7NaN4qWdw" name="csEvadeBombard" specification="_QU7E8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV58bVJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58blJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV58b1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) settlement.getOwner();&#xD;
     ServerPlayer defenderPlayer = (ServerPlayer) defender.getOwner();&#xD;
     StringTemplate defenderNation = defender.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipEvadedBombardment&quot;, settlement)&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, defender.getLabel())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, defenderNation));&#xD;
     cs.addMessage(See.only(defenderPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipEvadedBombardment&quot;, defender)&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, defender.getLabel())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, defenderNation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV6jcFJREeiyW7NaN4qWdw" name="csLootShip" specification="_QU7E9FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV6jcVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jclJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jc1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     List&lt;Goods> capture = loser.getGoodsList();&#xD;
     if (!capture.isEmpty() &amp;&amp; winner.hasSpaceLeft()) {&#xD;
         for (Goods g : capture) g.setLocation(null);&#xD;
         new LootSession(winner, loser, capture);&#xD;
         cs.add(See.only(winnerPlayer), ChangeSet.ChangePriority.CHANGE_LATE,&#xD;
             new LootCargoMessage(winner, loser.getId(), capture));&#xD;
     }&#xD;
     loser.getGoodsContainer().removeAll();&#xD;
     loser.setState(Unit.UnitState.ACTIVE);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV6jdFJREeiyW7NaN4qWdw" name="csLoseAutoEquip" specification="_QU7sAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV6jdVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jdlJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jd1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer defenderPlayer = (ServerPlayer) defender.getOwner();&#xD;
     StringTemplate defenderNation = defenderPlayer.getNationLabel();&#xD;
     Settlement settlement = defender.getSettlement();&#xD;
     StringTemplate defenderLocation = defender.getLocation()&#xD;
         .getLocationLabelFor(defenderPlayer);&#xD;
     Role role = defender.getAutomaticRole();&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerLocation = attacker.getLocation()&#xD;
         .getLocationLabelFor(attackerPlayer);&#xD;
     StringTemplate attackerNation = attacker.getApparentOwnerName();&#xD;
&#xD;
     // Autoequipment is not actually with the unit, it is stored&#xD;
     // in the settlement of the unit.  Remove it from there.&#xD;
     for (AbstractGoods ag : role.getRequiredGoods()) {&#xD;
         settlement.removeGoods(ag);&#xD;
     }&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.unitWinColony&quot;, attacker)&#xD;
         .addStringTemplate(&quot;%location%&quot;, attackerLocation)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, attackerPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, attacker.getLabel())&#xD;
         .addStringTemplate(&quot;%settlement%&quot;,&#xD;
             settlement.getLocationLabelFor(attackerPlayer))&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, defenderNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, defender.getLabel()));&#xD;
     cs.addMessage(See.only(defenderPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.unitLoseAutoEquip&quot;, defender)&#xD;
         .addStringTemplate(&quot;%location%&quot;, defenderLocation)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, defenderNation)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, defender.getLabel())&#xD;
         .addStringTemplate(&quot;%settlement%&quot;,&#xD;
             settlement.getLocationLabelFor(defenderPlayer))&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel()));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV6jeFJREeiyW7NaN4qWdw" name="csLoseEquip" specification="_QU8TEFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV6jeVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jelJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6je1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Specification spec = getSpecification();&#xD;
     ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();&#xD;
     StringTemplate loserNation = loserPlayer.getNationLabel();&#xD;
     StringTemplate loserLocation = loser.getLocation()&#xD;
         .getLocationLabelFor(loserPlayer);&#xD;
     StringTemplate oldName = loser.getLabel();&#xD;
     ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     StringTemplate winnerNation = winner.getApparentOwnerName();&#xD;
     StringTemplate winnerLocation = winner.getLocation()&#xD;
         .getLocationLabelFor(winnerPlayer);&#xD;
     Role role = loser.getRole();&#xD;
&#xD;
     Role downgrade = role.getDowngrade();&#xD;
     if (downgrade != null) {&#xD;
         loser.changeRole(downgrade, 1);&#xD;
     } else {&#xD;
         loser.changeRole(spec.getDefaultRole(), 0);&#xD;
     }&#xD;
&#xD;
     // Account for possible loss of mobility due to horses going away.&#xD;
     loser.setMovesLeft(Math.min(loser.getMovesLeft(),&#xD;
                                 loser.getInitialMovesLeft()));&#xD;
&#xD;
     String messageId;&#xD;
     if (!loser.isArmed()) {&#xD;
         messageId = &quot;combat.unitDemotedToUnarmed&quot;;&#xD;
         loser.setState(Unit.UnitState.ACTIVE);&#xD;
     } else {&#xD;
         messageId = loser.getType().getId() + &quot;.demoted&quot;;&#xD;
     }&#xD;
&#xD;
     cs.addMessage(See.only(winnerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitDemoted&quot;, winner)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
         .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, winnerLocation));&#xD;
     cs.addMessage(See.only(loserPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitDemoted&quot;, loser)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
         .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, loserLocation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV6jfFJREeiyW7NaN4qWdw" name="csLoseLocation" specification="_QU8TFFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV6jfVJREeiyW7NaN4qWdw" name="loc" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV6jflJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>for (TradeRoute tr : getTradeRoutes()) {&#xD;
         boolean suspend = false;&#xD;
         Iterator&lt;TradeRouteStop> trsi = tr.getStops().iterator();&#xD;
         while (trsi.hasNext()) {&#xD;
             TradeRouteStop trs = trsi.next();&#xD;
             if (Map.isSameLocation(trs.getLocation(), loc)) {&#xD;
                 suspend = true;&#xD;
                 trsi.remove();&#xD;
             }&#xD;
         }&#xD;
         if (suspend) {&#xD;
             for (Unit u : tr.getAssignedUnits()) {&#xD;
                 u.setTradeRoute(null);&#xD;
                 cs.add(See.only(this), u);&#xD;
             }&#xD;
             cs.addMessage(See.only(this),&#xD;
                     new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,&#xD;
                         &quot;combat.tradeRouteSuspended&quot;, this)&#xD;
                 .addName(&quot;%route%&quot;, tr.getName())&#xD;
                 .addStringTemplate(&quot;%stop%&quot;, loc.getLocationLabel()));&#xD;
             cs.add(See.only(this), tr);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7KgFJREeiyW7NaN4qWdw" name="csPillageColony" specification="_QU86IFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7KgVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KglJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7Kg1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KhFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) attacker.getOwner();&#xD;
     StringTemplate attackerNation = attacker.getApparentOwnerName();&#xD;
     ServerPlayer colonyPlayer = (ServerPlayer) colony.getOwner();&#xD;
     StringTemplate colonyNation = colonyPlayer.getNationLabel();&#xD;
&#xD;
     // Collect the damagable buildings, ships, movable goods.&#xD;
     List&lt;Building> buildingList = colony.getBurnableBuildings();&#xD;
     List&lt;Unit> shipList = colony.getTile().getNavalUnits();&#xD;
     List&lt;Goods> goodsList = colony.getLootableGoodsList();&#xD;
&#xD;
     // Pick one, with one extra choice for stealing gold.&#xD;
     int pillage = randomInt(logger, &quot;Pillage choice&quot;, random,&#xD;
         buildingList.size() + shipList.size() + goodsList.size()&#xD;
         + ((colony.canBePlundered()) ? 1 : 0));&#xD;
     if (pillage &lt; buildingList.size()) {&#xD;
         Building building = buildingList.get(pillage);&#xD;
         csDamageBuilding(building, cs);&#xD;
         cs.addMessage(See.only(colonyPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                 &quot;combat.buildingDamaged&quot;, colony)&#xD;
             .addNamed(&quot;%building%&quot;, building)&#xD;
             .addName(&quot;%colony%&quot;, colony.getName())&#xD;
             .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation)&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel()));&#xD;
     } else if (pillage &lt; buildingList.size() + shipList.size()) {&#xD;
         Unit ship = shipList.get(pillage - buildingList.size());&#xD;
         if (ship.getRepairLocation() == null) {&#xD;
             csSinkShipAttack(attacker, ship, cs);&#xD;
         } else {&#xD;
             csDamageShipAttack(attacker, ship, cs);&#xD;
         }&#xD;
     } else if (pillage &lt; buildingList.size() + shipList.size()&#xD;
                + goodsList.size()) {&#xD;
         Goods goods = goodsList.get(pillage - buildingList.size()&#xD;
             - shipList.size());&#xD;
         goods.setAmount(Math.min(goods.getAmount() / 2, 50));&#xD;
         colony.removeGoods(goods);&#xD;
         if (attacker.canAdd(goods)) attacker.add(goods);&#xD;
         cs.addMessage(See.only(colonyPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                 &quot;combat.goodsStolen&quot;, colony, goods)&#xD;
             .addAmount(&quot;%amount%&quot;, goods.getAmount())&#xD;
             .addNamed(&quot;%goods%&quot;, goods.getType())&#xD;
             .addName(&quot;%colony%&quot;, colony.getName())&#xD;
             .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation)&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel()));&#xD;
&#xD;
     } else {&#xD;
         int plunder = Math.max(1, colony.getPlunder(attacker, random) / 5);&#xD;
         colonyPlayer.modifyGold(-plunder);&#xD;
         attackerPlayer.modifyGold(plunder);&#xD;
         cs.addPartial(See.only(colonyPlayer), colonyPlayer, &quot;gold&quot;);&#xD;
         cs.addMessage(See.only(colonyPlayer),&#xD;
             new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                 &quot;combat.indianPlunder&quot;, colony)&#xD;
             .addAmount(&quot;%amount%&quot;, plunder)&#xD;
             .addName(&quot;%colony%&quot;, colony.getName())&#xD;
             .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation)&#xD;
             .addStringTemplate(&quot;%enemyUnit%&quot;, attacker.getLabel()));&#xD;
     }&#xD;
     cs.addMessage(See.all().except(colonyPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.indianRaid&quot;, colonyPlayer)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, attackerNation)&#xD;
         .addName(&quot;%colony%&quot;, colony.getName())&#xD;
         .addStringTemplate(&quot;%colonyNation%&quot;, colonyNation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7KhVJREeiyW7NaN4qWdw" name="csDamageBuilding" specification="_QU9hMFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7KhlJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7Kh1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerColony colony = (ServerColony)building.getColony();&#xD;
     Tile copied = colony.getTile().getTileToCache();&#xD;
     boolean changed = false;&#xD;
     BuildingType type = building.getType();&#xD;
     if (type.getUpgradesFrom() == null) {&#xD;
         changed = colony.ejectUnits(building, building.getUnitList());//-til&#xD;
         colony.destroyBuilding(building);//-til&#xD;
         changed |= building.getType().isDefenceType();&#xD;
         cs.addRemove(See.only((ServerPlayer)colony.getOwner()), colony, &#xD;
                      building);//-vis: safe, buildings are ok&#xD;
         building.dispose();&#xD;
         // Have any abilities been removed that gate other production,&#xD;
         // e.g. removing docks should shut down fishing.&#xD;
         for (WorkLocation wl : colony.getAllWorkLocations()) {&#xD;
             if (!wl.isEmpty() &amp;&amp; !wl.canBeWorked()) {&#xD;
                 changed |= colony.ejectUnits(wl, wl.getUnitList());//-til&#xD;
                 logger.info(&quot;Units ejected from workLocation &quot;&#xD;
                     + wl.getId() + &quot; on loss of &quot;&#xD;
                     + building.getType().getSuffix());&#xD;
             }&#xD;
         }&#xD;
     } else if (building.canBeDamaged()) {&#xD;
         changed = colony.ejectUnits(building, building.downgrade());//-til&#xD;
         changed |= building.getType().isDefenceType();&#xD;
     } else {&#xD;
         return;&#xD;
     }&#xD;
     if (changed) colony.getTile().cacheUnseen(copied);//+til&#xD;
     if (isAI()) {&#xD;
         colony.firePropertyChange(Colony.REARRANGE_WORKERS, true, false);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7KiFJREeiyW7NaN4qWdw" name="csPromoteUnit" specification="_QU9hM1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7KiVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KilJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     StringTemplate winnerNation = winnerPlayer.getNationLabel();&#xD;
     StringTemplate oldName = winner.getLabel();&#xD;
&#xD;
     UnitType type = winner.getTypeChange(ChangeType.PROMOTION,&#xD;
                                          winnerPlayer);&#xD;
     if (type == null || type == winner.getType()) {&#xD;
         logger.warning(&quot;Promotion failed, type=&quot;&#xD;
             + ((type == null) ? &quot;null&quot; : &quot;same type: &quot; + type));&#xD;
         return;&#xD;
     }&#xD;
     winner.changeType(type);//-vis(winnerPlayer)&#xD;
     winnerPlayer.invalidateCanSeeTiles();//+vis(winnerPlayer)&#xD;
&#xD;
     cs.addMessage(See.only(winnerPlayer),&#xD;
                   new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
                       &quot;combat.unitPromoted&quot;, winner)&#xD;
         .addStringTemplate(&quot;%oldName%&quot;, oldName)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, winnerNation));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7Ki1JREeiyW7NaN4qWdw" name="csSinkColonyShips" specification="_QU-IQFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7KjFJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KjVJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KjlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>boolean captureRepairing = getSpecification()&#xD;
         .getBoolean(GameOptions.CAPTURE_UNITS_UNDER_REPAIR);&#xD;
     List&lt;Unit> units = colony.getTile().getUnitList();&#xD;
     while (!units.isEmpty()) {&#xD;
         Unit unit = units.remove(0);&#xD;
         if (unit.isNaval() &amp;&amp; !(captureRepairing &amp;&amp; unit.isDamaged())) {&#xD;
             csSinkShipAttack(attacker, unit, cs);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7Kj1JREeiyW7NaN4qWdw" name="csSinkShipAttack" specification="_QU-IRFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7KkFJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KkVJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7KklJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer shipPlayer = (ServerPlayer) ship.getOwner();&#xD;
     StringTemplate shipNation = ship.getApparentOwnerName();&#xD;
     Unit attackerUnit = attacker;&#xD;
     ServerPlayer attackerPlayer = (ServerPlayer) attackerUnit.getOwner();&#xD;
     StringTemplate attackerNation = attackerUnit.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.enemyShipSunk&quot;, attackerUnit)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, attackerUnit.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, ship.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, shipNation));&#xD;
     cs.addMessage(See.only(shipPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipSunk&quot;, ship.getTile())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, attackerUnit.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, attackerNation));&#xD;
&#xD;
     csSinkShip(ship, attackerPlayer, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7xkFJREeiyW7NaN4qWdw" name="csSinkShipBombard" specification="_QU-vUlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7xkVJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xklJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xk1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer attackerPlayer = (ServerPlayer) settlement.getOwner();&#xD;
     ServerPlayer shipPlayer = (ServerPlayer) ship.getOwner();&#xD;
     StringTemplate shipNation = ship.getApparentOwnerName();&#xD;
&#xD;
     cs.addMessage(See.only(attackerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipSunkByBombardment&quot;, settlement)&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, shipNation));&#xD;
     cs.addMessage(See.only(shipPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             &quot;combat.shipSunkByBombardment&quot;, ship.getTile())&#xD;
         .addName(&quot;%colony%&quot;, settlement.getName())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, ship.getLabel()));&#xD;
&#xD;
     csSinkShip(ship, attackerPlayer, cs);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7xlFJREeiyW7NaN4qWdw" name="csSinkShip" specification="_QU_WYFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7xlVJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xllJREeiyW7NaN4qWdw" name="attackerPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xl1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer shipPlayer = (ServerPlayer) ship.getOwner();&#xD;
     cs.addRemove(See.perhaps().always(shipPlayer), ship.getLocation(),&#xD;
                  ship);//-vis(shipPlayer)&#xD;
     ship.dispose();&#xD;
     shipPlayer.invalidateCanSeeTiles();//+vis(shipPlayer)&#xD;
     if (attackerPlayer != null) {&#xD;
         cs.addAttribute(See.only(attackerPlayer), &quot;sound&quot;,&#xD;
                         &quot;sound.event.shipSunk&quot;);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7xmFJREeiyW7NaN4qWdw" name="csSlaughterUnit" specification="_QU_WZFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7xmVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xmlJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xm1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();&#xD;
     StringTemplate winnerNation = winner.getApparentOwnerName();&#xD;
     Location winnerLoc = (winner.isInColony()) ? winner.getColony()&#xD;
         : winner.getLocation();&#xD;
     StringTemplate winnerLocation&#xD;
         = winnerLoc.getLocationLabelFor(winnerPlayer);&#xD;
     ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();&#xD;
     StringTemplate loserNation = loser.getApparentOwnerName();&#xD;
     Location loserLoc = (loser.isInColony()) ? loser.getColony()&#xD;
         : loser.getLocation();&#xD;
     StringTemplate loserLocation&#xD;
         = loserLoc.getLocationLabelFor(loserPlayer);&#xD;
     String messageId = &quot;combat.unitSlaughtered&quot;&#xD;
         + loser.getType().getSuffix();&#xD;
&#xD;
     cs.addMessage(See.only(winnerPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitSlaughtered&quot;, winner)&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserNation)&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, winnerLocation));&#xD;
     cs.addMessage(See.only(loserPlayer),&#xD;
         new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,&#xD;
             messageId, &quot;combat.unitSlaughtered&quot;, loser.getTile())&#xD;
         .addStringTemplate(&quot;%nation%&quot;, loserPlayer.getNationLabel())&#xD;
         .addStringTemplate(&quot;%unit%&quot;, loser.getLabel())&#xD;
         .addStringTemplate(&quot;%enemyNation%&quot;, winnerNation)&#xD;
         .addStringTemplate(&quot;%enemyUnit%&quot;, winner.getLabel())&#xD;
         .addStringTemplate(&quot;%location%&quot;, loserLocation));&#xD;
     if (loserPlayer.isIndian() &amp;&amp; loserPlayer.checkForDeath() == IS_DEAD) {&#xD;
         StringTemplate nativeNation = loserPlayer.getNationLabel();&#xD;
         cs.addGlobalHistory(getGame(),&#xD;
             new HistoryEvent(getGame().getTurn(),&#xD;
                 HistoryEvent.HistoryEventType.DESTROY_NATION, winnerPlayer)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, winnerNation)&#xD;
             .addStringTemplate(&quot;%nativeNation%&quot;, nativeNation));&#xD;
     }&#xD;
&#xD;
     // Destroy unit.  Note See.only visibility used to handle the&#xD;
     // case that the unit is the last at a settlement.  If&#xD;
     // See.perhaps was used there, the settlement will be gone&#xD;
     // when perhaps() is processed, which would erroneously make&#xD;
     // the unit visible.&#xD;
     cs.addRemove((loserLoc.getSettlement() != null)&#xD;
         ? See.only(loserPlayer)&#xD;
         : See.perhaps().always(loserPlayer),&#xD;
         loserLoc, loser);//-vis(loserPlayer)&#xD;
     loser.dispose();&#xD;
     loserPlayer.invalidateCanSeeTiles();//+vis(loserPlayer)&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7xnFJREeiyW7NaN4qWdw" name="csSeeNewTiles" specification="_QU_9cFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7xnVJREeiyW7NaN4qWdw" name="newTiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV7xnlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>exploreTiles(newTiles);&#xD;
     cs.add(See.only(this), newTiles);&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV7xn1JREeiyW7NaN4qWdw" name="makeTeaPartyModifier" specification="_QBFi8FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV7xoFJREeiyW7NaN4qWdw" type="_QSKE0FJREeiyW7NaN4qWdw" direction="return"/>
                  <language>java</language>
                  <body>final Specification spec = getGame().getSpecification();&#xD;
     final Turn turn = getGame().getTurn();&#xD;
     for (Modifier modifier : spec.getModifiers(Modifier.COLONY_GOODS_PARTY)) {&#xD;
         Modifier m = Modifier.makeTimedModifier(&quot;model.goods.bells&quot;,&#xD;
                                                 modifier, turn);&#xD;
         m.setModifierIndex(Modifier.PARTY_PRODUCTION_INDEX);&#xD;
         return m;&#xD;
     }&#xD;
     return null;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV8YoFJREeiyW7NaN4qWdw" name="csRaiseTax" specification="_QVAkgFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV8YoVJREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV8YolJREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV8Yo1JREeiyW7NaN4qWdw" name="accepted">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV8YpFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>GoodsType goodsType = goods.getType();&#xD;
     Colony colony = (Colony) goods.getLocation();&#xD;
     int amount = Math.min(goods.getAmount(), GoodsContainer.CARGO_SIZE);&#xD;
     String monarchKey = getMonarchKey();&#xD;
&#xD;
     if (accepted) {&#xD;
         csSetTax(tax, cs);&#xD;
         logger.info(&quot;Accepted tax raise to: &quot; + tax);&#xD;
     } else if (colony.getGoodsCount(goodsType) &lt; amount) {&#xD;
         // Player has removed the goods from the colony,&#xD;
         // so raise the tax anyway.&#xD;
         final int extraTax = 3; // FIXME, magic number&#xD;
         csSetTax(tax + extraTax, cs);&#xD;
         cs.add(See.only(this), ChangePriority.CHANGE_NORMAL,&#xD;
             new MonarchActionMessage(Monarch.MonarchAction.FORCE_TAX,&#xD;
                 StringTemplate.template(Monarch.MonarchAction.FORCE_TAX.getTextKey())&#xD;
                 .addAmount(&quot;%amount%&quot;, tax + extraTax),&#xD;
                 monarchKey));&#xD;
         logger.info(&quot;Forced tax raise to: &quot; + (tax + extraTax));&#xD;
     } else { // Tea party&#xD;
         Specification spec = getGame().getSpecification();&#xD;
         colony.getGoodsContainer().saveState();&#xD;
         colony.removeGoods(goodsType, amount);&#xD;
&#xD;
         int arrears = market.getPaidForSale(goodsType)&#xD;
             * spec.getInteger(GameOptions.ARREARS_FACTOR);&#xD;
         Market market = getMarket();&#xD;
         market.setArrears(goodsType, arrears);&#xD;
&#xD;
         Modifier tpm = makeTeaPartyModifier();&#xD;
         cs.addFeatureChange(this, colony, tpm, true);&#xD;
         cs.add(See.only(this), colony.getGoodsContainer());&#xD;
         cs.add(See.only(this), market.getMarketData(goodsType));&#xD;
         &#xD;
         String messageId = &quot;model.player.colonyGoodsParty.&quot;&#xD;
             + goodsType.getSuffix();&#xD;
         if (!Messages.containsKey(messageId)) {&#xD;
             messageId = (colony.isLandLocked())&#xD;
                 ? &quot;model.player.colonyGoodsParty.landLocked&quot;&#xD;
                 : &quot;model.player.colonyGoodsParty.harbour&quot;;&#xD;
         }&#xD;
         cs.addMessage(See.only(this),&#xD;
             new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,&#xD;
                 messageId, this)&#xD;
             .addName(&quot;%colony%&quot;, colony.getName())&#xD;
             .addAmount(&quot;%amount%&quot;, amount)&#xD;
             .addNamed(&quot;%goods%&quot;, goodsType));&#xD;
         cs.addAttribute(See.only(this), &quot;flush&quot;, Boolean.TRUE.toString());&#xD;
         logger.info(&quot;Goods party at &quot; + colony.getName()&#xD;
             + &quot; with: &quot; + goods + &quot; arrears: &quot; + arrears);&#xD;
         if (isAI()) { // Reset the goods wishes&#xD;
             colony.firePropertyChange(Colony.REARRANGE_WORKERS,&#xD;
                                       goodsType, null);&#xD;
         }&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV8YpVJREeiyW7NaN4qWdw" name="ignoreTax" specification="_QVAkhVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV8YplJREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV8Yp1JREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV8YqFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>csRaiseTax(tax, goods, true, cs);&#xD;
     cs.addMessage(See.only(this),&#xD;
         new ModelMessage(&quot;model.player.ignoredTax&quot;, this)&#xD;
             .addAmount(&quot;%amount%&quot;, tax));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV8_sFJREeiyW7NaN4qWdw" name="ignoreMercenaries" specification="_QVBLkFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV8_sVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>cs.addMessage(See.only(this),&#xD;
         new ModelMessage(&quot;model.player.ignoredMercenaries&quot;, this));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV8_slJREeiyW7NaN4qWdw" name="csSetTax" specification="_QVBLklJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV8_s1JREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV8_tFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>setTax(tax);&#xD;
     if (recalculateBellsBonus()) {&#xD;
         cs.add(See.only(this), this);&#xD;
     } else {&#xD;
         cs.addPartial(See.only(this), this, &quot;tax&quot;);&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV8_tVJREeiyW7NaN4qWdw" name="csAddMercenaries" specification="_QVBLlVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV8_tlJREeiyW7NaN4qWdw" name="mercs" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV8_t1JREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QV8_uFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>if (checkGold(price)) {&#xD;
         createUnits(mercs, getEurope());//-vis: safe, Europe&#xD;
         cs.add(See.only(this), getEurope());&#xD;
         modifyGold(-price);&#xD;
         cs.addPartial(See.only(this), this, &quot;gold&quot;);&#xD;
     } else {&#xD;
         getMonarch().setDispleasure(true);&#xD;
         cs.add(See.only(this), ChangePriority.CHANGE_NORMAL,&#xD;
             new MonarchActionMessage(Monarch.MonarchAction.DISPLEASURE,&#xD;
                 StringTemplate.template(Monarch.MonarchAction.DISPLEASURE.getTextKey()),&#xD;
                 getMonarchKey()));&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV9mwFJREeiyW7NaN4qWdw" name="csContact" specification="_QVBypFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV9mwVJREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mwlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mw1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (hasContacted(other)) return false;&#xD;
&#xD;
     // Must be a first contact!&#xD;
     final Game game = getGame();&#xD;
     Turn turn = game.getTurn();&#xD;
     if (isIndian()) {&#xD;
         if (other.isIndian()) {&#xD;
             return false; // Ignore native-to-native contacts.&#xD;
         } else {&#xD;
             cs.addHistory(other, new HistoryEvent(turn,&#xD;
                     HistoryEvent.HistoryEventType.MEET_NATION, other)&#xD;
                 .addStringTemplate(&quot;%nation%&quot;, getNationLabel()));&#xD;
         }&#xD;
     } else { // (serverPlayer.isEuropean)&#xD;
         cs.addHistory(this, new HistoryEvent(turn,&#xD;
                 HistoryEvent.HistoryEventType.MEET_NATION, other)&#xD;
             .addStringTemplate(&quot;%nation%&quot;, other.getNationLabel()));&#xD;
     }&#xD;
&#xD;
     logger.finest(&quot;First contact between &quot; + this.getId()&#xD;
         + &quot; and &quot; + other.getId());&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV9mxFJREeiyW7NaN4qWdw" name="csNativeFirstContact" specification="_QVCZsVJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV9mxVJREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mxlJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mx1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>cs.add(See.only(this), ChangePriority.CHANGE_EARLY,&#xD;
         new FirstContactMessage(this, other, tile));&#xD;
     csChangeStance(Stance.PEACE, other, true, cs);&#xD;
     if (tile != null) {&#xD;
         // Establish a diplomacy session so that if the player&#xD;
         // accepts the tile offer, we can verify that the offer&#xD;
         // was made.&#xD;
         new DiplomacySession(tile.getFirstUnit(),&#xD;
                              tile.getOwningSettlement());&#xD;
     }&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV9myFJREeiyW7NaN4qWdw" name="csEuropeanFirstContact" specification="_QVDAwFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV9myVJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mylJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9my1JREeiyW7NaN4qWdw" name="otherUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mzFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <language>java</language>
                  <body>final Game game = getGame();&#xD;
&#xD;
     ServerPlayer other;&#xD;
     if (settlement != null) {&#xD;
         other = (ServerPlayer)settlement.getOwner();&#xD;
     } else if (otherUnit != null) {&#xD;
         other = (ServerPlayer)otherUnit.getOwner();&#xD;
     } else {&#xD;
         throw new IllegalArgumentException(&quot;Non-null settlement or &quot;&#xD;
                 + &quot;otherUnit required.&quot;);&#xD;
     }&#xD;
     &#xD;
     DiplomaticTrade agreement = new DiplomaticTrade(game,&#xD;
         DiplomaticTrade.TradeContext.CONTACT, this, other, null, 0);&#xD;
     agreement.add(new StanceTradeItem(game, this, other, Stance.PEACE));&#xD;
     DiplomacySession session = (settlement == null)&#xD;
         ? new DiplomacySession(unit, otherUnit)&#xD;
         : new DiplomacySession(unit, settlement);&#xD;
     session.setAgreement(agreement);&#xD;
     cs.add(See.only(this), ChangePriority.CHANGE_LATE, (settlement == null)&#xD;
         ? new DiplomacyMessage(unit, otherUnit, agreement)&#xD;
         : new DiplomacyMessage(unit, settlement, agreement));&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV9mzVJREeiyW7NaN4qWdw" name="csChangeOwner" specification="_QVDn0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV9mzlJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9mz1JREeiyW7NaN4qWdw" name="newOwner" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9m0FJREeiyW7NaN4qWdw" name="change" type="_QRwcMlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9m0VJREeiyW7NaN4qWdw" name="loc" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9m0lJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QV9m01JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (newOwner == this) return true; // No transfer needed&#xD;
&#xD;
     final Tile oldTile = unit.getTile();&#xD;
     UnitType mainType = unit.getTypeChange(change, newOwner);&#xD;
     if (mainType == null) mainType = unit.getType(); // No change needed.&#xD;
     if (!mainType.isAvailableTo(newOwner)) { // Can not have this unit.&#xD;
         cs.addRemove(See.perhaps().always(this), oldTile, unit);&#xD;
         unit.dispose();&#xD;
         return false;&#xD;
     }&#xD;
&#xD;
     for (Unit u : unit.getUnitList()) {&#xD;
         UnitType type = u.getTypeChange(change, newOwner);&#xD;
         if (type == null) type = u.getType();&#xD;
         if (!type.isAvailableTo(newOwner)) {&#xD;
             cs.addRemove(See.only(this), unit, u);&#xD;
             u.dispose();&#xD;
         } else {&#xD;
             if (!u.changeType(type)) {&#xD;
                 throw new IllegalStateException(&quot;Type change failure: &quot;&#xD;
                     + u + &quot; -> &quot; + type);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     if (mainType != unit.getType() &amp;&amp; !unit.changeType(mainType)) {&#xD;
         throw new IllegalStateException(&quot;Type change failure: &quot; + unit&#xD;
             + &quot; -> &quot; + mainType);&#xD;
     }&#xD;
     unit.changeOwner(newOwner);&#xD;
     if (loc != null) unit.setLocation(loc);&#xD;
     if (unit.isCarrier()) {&#xD;
         cs.addRemoves(See.only(this), unit, unit.getUnitList());&#xD;
     }&#xD;
     cs.add(See.only(newOwner), newOwner.exploreForUnit(unit));&#xD;
     return true;&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV-N0FJREeiyW7NaN4qWdw" name="toString" specification="_QBHYIFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV-N0VJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>StringBuilder sb = new StringBuilder(64);&#xD;
     sb.append(&quot;[ServerPlayer &quot;).append(getId())&#xD;
         .append(&quot; &quot;).append(getName())&#xD;
         .append(&quot; &quot;).append(connection)&#xD;
         .append(&quot;]&quot;);&#xD;
     return sb.toString();&#xD;
 </body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QV-N0lJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" specification="_QBH_NFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QV-N01JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return &quot;serverPlayer&quot;;&#xD;
 </body>
                </ownedBehavior>
                <ownedOperation xmi:id="_QA1rUFJREeiyW7NaN4qWdw" name="getSocket" method="_QVyntFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGJpFJREeiyW7NaN4qWdw">
                    <body>Gets the socket of this player.&#xD;
     * @return The &lt;code>Socket&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfAGVJREeiyW7NaN4qWdw" type="_QSn-4VJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QA2SYFJREeiyW7NaN4qWdw" name="checkForDeath" method="_QVzOvlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwtVJREeiyW7NaN4qWdw">
                    <body>Checks if this player has died.&#xD;
     *&#xD;
     * @return Negative if the player is dead, zero if they are ok,&#xD;
     *      positive non-zero if the server should auto-recruit&#xD;
     *      colonist units to keep this player alive.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA3ggFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QA3ggVJREeiyW7NaN4qWdw" name="checkForREFDefeat" method="_QVzOwFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwtlJREeiyW7NaN4qWdw">
                    <body>Check if a REF player has been defeated and should surrender.&#xD;
     *&#xD;
     * @return True if this REF player has been defeated.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA3gglJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QA4HkFJREeiyW7NaN4qWdw" name="checkFoundingFather" method="_QVzOxlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwuVJREeiyW7NaN4qWdw">
                    <body>Checks whether the current founding father has been recruited.&#xD;
     *&#xD;
     * @return The new founding father, or null if none available or ready.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUg1RFJREeiyW7NaN4qWdw" type="_QSs3YVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QA4HkVJREeiyW7NaN4qWdw" name="canRecruitFoundingFather" method="_QVz1wFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwulJREeiyW7NaN4qWdw">
                    <body>Checks whether to start recruiting a founding father.&#xD;
     *&#xD;
     * @return True if a new father should be chosen.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA4HklJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QA4uoFJREeiyW7NaN4qWdw" name="updateScore" method="_QVz1yFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwvFJREeiyW7NaN4qWdw">
                    <body>Update the current score for this player.&#xD;
     *&#xD;
     * Known incompatibility with the Col1 manual:&#xD;
     * ``In addition, you get one point per liberty bell produced&#xD;
     *   after foreign intervention''&#xD;
     * However you are already getting a point per liberty bell&#xD;
     * produced, so this implies you get no further liberty after&#xD;
     * declaring independence!?, but it can then start again if the&#xD;
     * foreign intervention happens (penalizing players who quickly&#xD;
     * thrash the REF:-S).  Whatever this really means, it is&#xD;
     * incompatible with our extensions to allow playing on (and&#xD;
     * defeating other Europeans), so for now at least just leave the&#xD;
     * simple liberty==score rule in place.&#xD;
     *&#xD;
     * @return True if the player score changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA4uoVJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QA58wFJREeiyW7NaN4qWdw" name="exploreMap" method="_QV0c0FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwwVJREeiyW7NaN4qWdw">
                    <body>Makes the entire map visible or invisible.&#xD;
     *&#xD;
     * @param reveal If true, reveal the map, if false, hide it.&#xD;
     * @return A list of tiles whose visibility changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA58wVJREeiyW7NaN4qWdw" name="reveal">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QA6j0FJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QA6j0VJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QA-OMFJREeiyW7NaN4qWdw" name="getFreeBuildingTypes" method="_QV25HVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXxVJREeiyW7NaN4qWdw">
                    <body>Get a list of free building types this player has access to&#xD;
     * through its choice of founding fathers.  Used to upgrade newly&#xD;
     * captured colonies.&#xD;
     *&#xD;
     * @return A list of free &lt;code>BuildingType&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QA-OMVJREeiyW7NaN4qWdw" type="_QRjn4VJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QA-OMlJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QBFi8FJREeiyW7NaN4qWdw" name="makeTeaPartyModifier" method="_QV7xn1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl61JREeiyW7NaN4qWdw">
                    <body>Make a tea party modifier for the current turn.&#xD;
     *&#xD;
     * Public for the test suite.&#xD;
     *&#xD;
     * @return A tea party &lt;code>Modifier&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU_9dFJREeiyW7NaN4qWdw" type="_QSKE0FJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QBHYIFJREeiyW7NaN4qWdw" name="toString" method="_QV-N0FJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QBH_MFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QBH_NFJREeiyW7NaN4qWdw" name="getServerXMLElementTagName" method="_QV-N0lJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QBImQFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QS2BUFJREeiyW7NaN4qWdw" name="addStanceChange" method="_QV1D7lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwylJREeiyW7NaN4qWdw">
                    <body>Adds a player to the list of players for whom the stance has changed.&#xD;
     *&#xD;
     * @param other The &lt;code>ServerPlayer&lt;/code> to add.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QS2BUVJREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUeZAFJREeiyW7NaN4qWdw" name="ServerPlayer" method="_QVynqVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUeZA1JREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUeZBFJREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWGJolJREeiyW7NaN4qWdw">
                    <body>Trivial constructor required for all ServerModelObjects.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUeZAVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUeZAlJREeiyW7NaN4qWdw" name="id">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUeZBVJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUfAEFJREeiyW7NaN4qWdw" name="ServerPlayer" method="_QVynrVJREeiyW7NaN4qWdw">
                  <eAnnotations xmi:id="_QUfAFlJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_QUfAF1JREeiyW7NaN4qWdw" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_QWGJo1JREeiyW7NaN4qWdw">
                    <body>Creates a new ServerPlayer.&#xD;
     *&#xD;
     * @param game The &lt;code>Game&lt;/code> this object belongs to.&#xD;
     * @param admin Whether the player is the game administrator or not.&#xD;
     * @param nation The nation of the &lt;code>Player&lt;/code>.&#xD;
     * @param socket The socket to the player's client.&#xD;
     * @param connection The &lt;code>Connection&lt;/code> for the socket.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfAEVJREeiyW7NaN4qWdw" name="game" type="_QRkO8lJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUfAElJREeiyW7NaN4qWdw" name="admin">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUfAE1JREeiyW7NaN4qWdw" name="nation" type="_QSuskVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUfAFFJREeiyW7NaN4qWdw" name="socket" type="_QSn-4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUfAFVJREeiyW7NaN4qWdw" name="connection" type="_QSxv4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUfAGFJREeiyW7NaN4qWdw" type="_QAyoAFJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUfnIFJREeiyW7NaN4qWdw" name="setConnection" method="_QVzOsFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGJpVJREeiyW7NaN4qWdw">
                    <body>Sets the connection of this player.&#xD;
     *&#xD;
     * @param connection The &lt;code>Connection&lt;/code>.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfnIVJREeiyW7NaN4qWdw" name="connection" type="_QSxv4VJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUfnIlJREeiyW7NaN4qWdw" name="send" method="_QVzOslJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGJplJREeiyW7NaN4qWdw">
                    <body>Send a change set to this player.&#xD;
     *&#xD;
     * @param cs The &lt;code>ChangeSet&lt;/code> to send.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfnI1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUfnJFJREeiyW7NaN4qWdw" name="askElement" visibility="private" method="_QVzOtFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwsFJREeiyW7NaN4qWdw">
                    <body>Send an element to this player.&#xD;
     * Do not use (sole use in send() above). This will go away.&#xD;
     *&#xD;
     * @param request An &lt;code>Element&lt;/code> containing the update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfnJVJREeiyW7NaN4qWdw" name="request" type="_QSzlE1JREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUfnJlJREeiyW7NaN4qWdw" name="updateCurrentFather" method="_QVzOtlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwsVJREeiyW7NaN4qWdw">
                    <body>Update the current father.&#xD;
     *&#xD;
     * @param ff The &lt;code>FoundingFather&lt;/code> to recruit.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUfnJ1JREeiyW7NaN4qWdw" name="ff" type="_QSs3YVJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUgOMFJREeiyW7NaN4qWdw" name="addExtraTrade" method="_QVzOuFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwslJREeiyW7NaN4qWdw">
                    <body>Accumulate extra trades.&#xD;
     *&#xD;
     * @param ag The &lt;code>AbstractGoods&lt;/code> describing the sale.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUgOMVJREeiyW7NaN4qWdw" name="ag" type="_QRiZwlJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUgOMlJREeiyW7NaN4qWdw" name="flushExtraTrades" method="_QVzOulJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGws1JREeiyW7NaN4qWdw">
                    <body>Flush the extra trades.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUgOM1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUgONFJREeiyW7NaN4qWdw" name="randomizeGame" method="_QVzOvFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwtFJREeiyW7NaN4qWdw">
                    <body>Performs initial randomizations for this player.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUgONVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUg1QFJREeiyW7NaN4qWdw" name="csKill" method="_QVzOwlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwt1JREeiyW7NaN4qWdw">
                    <body>Kill off a player and clear out its remains.&#xD;
     *&#xD;
     * +vis: Albeit killing the player makes visibility changes moot.&#xD;
     * +til: Fixes the appearance changes too.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUg1QVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUg1QlJREeiyW7NaN4qWdw" name="csWithdraw" method="_QVzOxFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwuFJREeiyW7NaN4qWdw">
                    <body>Withdraw a player from the new world.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUg1Q1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUhcUFJREeiyW7NaN4qWdw" name="getRandomFoundingFathers" method="_QVz1wlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwu1JREeiyW7NaN4qWdw">
                    <body>Build a list of random FoundingFathers, one per type.&#xD;
     * Do not include any the player has or are not available.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @return A list of FoundingFathers.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUhcUVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUhcUlJREeiyW7NaN4qWdw" type="_QSs3YVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUhcU1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUhcVFJREeiyW7NaN4qWdw" name="addHistory" method="_QVz1xlJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUhcVVJREeiyW7NaN4qWdw" name="event" type="_QSCJAlJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUiDYlJREeiyW7NaN4qWdw" name="hasExplored" method="_QVz1ylJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUiDY1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUiDZFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUiqclJREeiyW7NaN4qWdw" name="exploreTile" method="_QVz1zVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwvVJREeiyW7NaN4qWdw">
                    <body>Sets the given tile to be explored by this player and updates&#xD;
     * the player's information about the tile.&#xD;
     *&#xD;
     * +til: Exploring the tile also updates the pet.&#xD;
     *&#xD;
     * @return True if the tile is newly explored by this action.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUiqc1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUiqdFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUiqdVJREeiyW7NaN4qWdw" name="exploreTiles" method="_QVz10FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwvlJREeiyW7NaN4qWdw">
                    <body>Sets the tiles within the given &lt;code>Unit&lt;/code>'s line of&#xD;
     * sight to be explored by this player.&#xD;
     *&#xD;
     * @param tiles A list of &lt;code>Tile&lt;/code>s.&#xD;
     * @return A list of newly explored &lt;code>Tile&lt;/code>s.&#xD;
     * @see #hasExplored</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUiqdlJREeiyW7NaN4qWdw" name="tiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUjRgFJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUjRgVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUj4kFJREeiyW7NaN4qWdw" name="exploreForSettlement" method="_QVz11FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwv1JREeiyW7NaN4qWdw">
                    <body>Sets the tiles visible to a given settlement to be explored by&#xD;
     * this player and updates the player's information about the&#xD;
     * tiles.  Note that the player does not necessarily own the settlement&#xD;
     * (e.g. missionary at native settlement).&#xD;
     *&#xD;
     * @return A list of newly explored &lt;code>Tile&lt;/code>s.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUj4kVJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUj4klJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUj4k1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUj4lFJREeiyW7NaN4qWdw" name="exploreForUnit" method="_QVz12FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwwFJREeiyW7NaN4qWdw">
                    <body>Sets the tiles within the given &lt;code>Unit&lt;/code>'s line of&#xD;
     * sight to be explored by this player.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code>.&#xD;
     * @return A list of newly explored &lt;code>Tile&lt;/code>s.&#xD;
     * @see #hasExplored</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUkfoFJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUkfoVJREeiyW7NaN4qWdw" type="_QRv1IFJREeiyW7NaN4qWdw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUkfolJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUkfo1JREeiyW7NaN4qWdw" name="reassignTiles" visibility="private" isStatic="true" method="_QV0c1FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwwlJREeiyW7NaN4qWdw">
                    <body>Try to reassign the ownership of a collection of tiles.&#xD;
     *&#xD;
     * Do it in two passes so the first successful claim does not give&#xD;
     * a large advantage.&#xD;
     *&#xD;
     * @param tiles The collection of &lt;code>Tile&lt;/code>s to reassign.&#xD;
     * @param prefer An optional &lt;code>Player&lt;/code> to prefer to reassign to.&#xD;
     * @param avoid An optional &lt;code>Settlement&lt;/code> to consider last&#xD;
     *     when making claims.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUkfpFJREeiyW7NaN4qWdw" name="tiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUkfpVJREeiyW7NaN4qWdw" name="prefer" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUkfplJREeiyW7NaN4qWdw" name="avoid" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUlGsVJREeiyW7NaN4qWdw" name="createUnits" method="_QV0c2FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGww1JREeiyW7NaN4qWdw">
                    <body>Create units from a list of abstract units.  Only used by&#xD;
     * Europeans at present.&#xD;
     *&#xD;
     * -vis: Visibility issues depending on location.&#xD;
     * -til: Tile appearance issue if created in a colony (not ATM)&#xD;
     *&#xD;
     * @param abstractUnits The list of &lt;code>AbstractUnit&lt;/code>s to&#xD;
     *     create.&#xD;
     * @param location The &lt;code>Location&lt;/code> where the units will&#xD;
     *     be created.&#xD;
     * @return A list of units created.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUlGslJREeiyW7NaN4qWdw" name="abstractUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUlGs1JREeiyW7NaN4qWdw" name="location" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUlGtFJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUlGtVJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUltwVJREeiyW7NaN4qWdw" name="loadShips" method="_QV0c3VJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwxFJREeiyW7NaN4qWdw">
                    <body>Embark the land units.  For all land units, find a naval unit&#xD;
     * to carry it.  Fill greedily, so as if there is excess naval&#xD;
     * capacity then the naval units at the end of the list will tend&#xD;
     * to be empty or very lightly filled, allowing them to defend the&#xD;
     * whole fleet at full strength.  Returns a list of units that&#xD;
     * could not be placed on ships.&#xD;
     *&#xD;
     * -vis: Has visibility implications depending on the initial&#xD;
     * location of the loaded units.  Usually ATM this is Europe which&#xD;
     * is safe, but beware.&#xD;
     * -til: Safe while in Europe though.&#xD;
     *&#xD;
     * @param landUnits A list of land units to put on ships.&#xD;
     * @param navalUnits A list of ships to put land units on.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @return a list of units left over</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUltwlJREeiyW7NaN4qWdw" name="landUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUltw1JREeiyW7NaN4qWdw" name="navalUnits" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUltxFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUltxVJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUmU0FJREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUm74VJREeiyW7NaN4qWdw" name="priceMercenaries" method="_QV0c41JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwxVJREeiyW7NaN4qWdw">
                    <body>Calculates the price of a group of mercenaries for this player.&#xD;
     *&#xD;
     * @param mercenaries A list of mercenaries to price.&#xD;
     * @return The price.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUm74lJREeiyW7NaN4qWdw" name="mercenaries" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUm741JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUoKAFJREeiyW7NaN4qWdw" name="csFlushMarket" method="_QV0c5lJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwxlJREeiyW7NaN4qWdw">
                    <body>Flush any market price changes.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the market has changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUoKAVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUoKAlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUoKA1JREeiyW7NaN4qWdw" name="csFlushMarket" method="_QV1D4FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwx1JREeiyW7NaN4qWdw">
                    <body>Flush any market price changes for a specified goods type.&#xD;
     *&#xD;
     * @param type The &lt;code>GoodsType&lt;/code> to check.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the market price had changed.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUoKBFJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUoKBVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUoKBlJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUoxEFJREeiyW7NaN4qWdw" name="buy" method="_QV1D5FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwyFJREeiyW7NaN4qWdw">
                    <body>Buy goods in Europe.&#xD;
     *&#xD;
     * @param container The &lt;code>GoodsContainer&lt;/code> to carry the goods.&#xD;
     * @param type The &lt;code>GoodsType&lt;/code> to buy.&#xD;
     * @param amount The amount of goods to buy.&#xD;
     * @return The amount actually removed from the market, or&#xD;
     *     negative on failure.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUoxEVJREeiyW7NaN4qWdw" name="container" type="_QRsx01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUoxElJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUoxE1JREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUoxFFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUpYIFJREeiyW7NaN4qWdw" name="sell" method="_QV1D6VJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwyVJREeiyW7NaN4qWdw">
                    <body>Sell goods in Europe.&#xD;
     *&#xD;
     * @param container An optional &lt;code>GoodsContainer&lt;/code>&#xD;
     *     carrying the goods.&#xD;
     * @param type The &lt;code>GoodsType&lt;/code> to sell.&#xD;
     * @param amount The amount of goods to sell.&#xD;
     * @return The amount actually added to the market, or negative on failure.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUpYIVJREeiyW7NaN4qWdw" name="container" type="_QRsx01JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUpYIlJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUpYI1JREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUpYJFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUpYJVJREeiyW7NaN4qWdw" name="csChangeStance" method="_QV1D8FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwy1JREeiyW7NaN4qWdw">
                    <body>Modifies stance.&#xD;
     *&#xD;
     * @param stance The new &lt;code>Stance&lt;/code>.&#xD;
     * @param otherPlayer The &lt;code>Player&lt;/code> wrt which the stance changes.&#xD;
     * @param symmetric If true, change the otherPlayer stance as well.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if there was a change in stance at all.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUpYJlJREeiyW7NaN4qWdw" name="stance" type="_QSbxoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUp_MFJREeiyW7NaN4qWdw" name="otherPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUp_MVJREeiyW7NaN4qWdw" name="symmetric">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUp_MlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUp_M1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUp_NFJREeiyW7NaN4qWdw" name="csModifyTension" method="_QV1q8FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwzFJREeiyW7NaN4qWdw">
                    <body>Modifies the hostility against the given player.&#xD;
     *&#xD;
     * +til: Handles tile modifications.&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code>.&#xD;
     * @param add The amount to add to the current tension level.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUp_NVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUp_NlJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUp_N1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUqmQFJREeiyW7NaN4qWdw" name="csModifyTension" method="_QV1q9FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwzVJREeiyW7NaN4qWdw">
                    <body>Modifies the hostility against the given player.&#xD;
     *&#xD;
     * +til: Handles tile modifications.&#xD;
     *&#xD;
     * @param player The &lt;code>Player&lt;/code>.&#xD;
     * @param add The amount to add to the current tension level.&#xD;
     * @param origin A &lt;code>Settlement&lt;/code> where the alarming event&#xD;
     *     occurred.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUqmQVJREeiyW7NaN4qWdw" name="player" type="_QRunAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUqmQlJREeiyW7NaN4qWdw" name="add">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUqmQ1JREeiyW7NaN4qWdw" name="origin" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUqmRFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUrNUFJREeiyW7NaN4qWdw" name="csNewTurn" method="_QV1q-VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUrNUVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUrNUlJREeiyW7NaN4qWdw" name="lb" type="_QRmrMVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUrNU1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUr0YlJREeiyW7NaN4qWdw" name="csPayUpkeep" method="_QV1q_VJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUr0Y1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUr0ZFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUr0ZVJREeiyW7NaN4qWdw" name="csNaturalDisasters" method="_QV1rAFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUsbcFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUsbcVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUsbclJREeiyW7NaN4qWdw" name="probability">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUsbc1JREeiyW7NaN4qWdw" name="csApplyDisaster" method="_QV2SAFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWGwzlJREeiyW7NaN4qWdw">
                    <body>Apply the effects of the given &lt;code>Disaster&lt;/code> to the&#xD;
     * given &lt;code>Colony&lt;/code>, or the &lt;code>Player&lt;/code> if the&#xD;
     * &lt;code>Colony&lt;/code> is &lt;code>null&lt;/code>, and return a list of&#xD;
     * appropriate &lt;code>ModelMessage&lt;/code>s. Note that a disaster&#xD;
     * might have no effect on a particular colony. In that case, the&#xD;
     * returned list is empty.&#xD;
     *&#xD;
     * @param random A &lt;code>Random&lt;/code> number source.&#xD;
     * @param colony A &lt;code>Colony&lt;/code>, or &lt;code>null&lt;/code>.&#xD;
     * @param disaster A &lt;code>Disaster&lt;/code> value.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return A list of &lt;code>ModelMessage&lt;/code>s, possibly empty.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUsbdFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUsbdVJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtCgFJREeiyW7NaN4qWdw" name="disaster" type="_QSrpQVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtCgVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtCglJREeiyW7NaN4qWdw" type="_QRk2AVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QUtCg1JREeiyW7NaN4qWdw" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUtChFJREeiyW7NaN4qWdw" name="getBuildingForEffect" method="_QV2SB1JREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUtpkFJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtpkVJREeiyW7NaN4qWdw" name="effect" type="_QSsQUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtpklJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtpk1JREeiyW7NaN4qWdw" type="_QRjA0VJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUtplFJREeiyW7NaN4qWdw" name="getUnitForEffect" method="_QV2SDFJREeiyW7NaN4qWdw">
                  <ownedParameter xmi:id="_QUtplVJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtpllJREeiyW7NaN4qWdw" name="effect" type="_QSsQUVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUtpl1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUuQoFJREeiyW7NaN4qWdw" type="_QRXaoVJREeiyW7NaN4qWdw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUuQoVJREeiyW7NaN4qWdw" name="propagateToEuropeanMarkets" method="_QV2SEVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXwFJREeiyW7NaN4qWdw">
                    <body>Propagate an European market trade to the other European markets.&#xD;
     *&#xD;
     * @param type The type of goods that was traded.&#xD;
     * @param amount The amount of goods that was traded.&#xD;
     * @param random A pseudo-random number source.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUuQolJREeiyW7NaN4qWdw" name="type" type="_QRtY4VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUuQo1JREeiyW7NaN4qWdw" name="amount">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUuQpFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUu3sFJREeiyW7NaN4qWdw" name="csYearlyGoodsAdjust" method="_QV25EFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXwVJREeiyW7NaN4qWdw">
                    <body>Add or remove a standard yearly amount of storable goods, and a&#xD;
     * random extra amount of a random type.  Then push out all the&#xD;
     * accumulated trades.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUu3sVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUu3slJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUu3s1JREeiyW7NaN4qWdw" name="csStartTurn" method="_QV25E1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXwlJREeiyW7NaN4qWdw">
                    <body>Starts a new turn for a player.&#xD;
     *&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUu3tFJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUu3tVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUvewFJREeiyW7NaN4qWdw" name="csBombardEnemyShips" visibility="private" method="_QV25FlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXw1JREeiyW7NaN4qWdw">
                    <body>All player colonies bombard all available targets.&#xD;
     *&#xD;
     * @param random A random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUvewVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUvewlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUvew1JREeiyW7NaN4qWdw" name="csAddFoundingFather" method="_QV25GVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXxFJREeiyW7NaN4qWdw">
                    <body>Adds a founding father to a players continental congress.&#xD;
     *&#xD;
     * @param father The &lt;code>FoundingFather&lt;/code> to add.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUvexFJREeiyW7NaN4qWdw" name="father" type="_QSs3YVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUvexVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUvexlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUwF0FJREeiyW7NaN4qWdw" name="csClaimLand" method="_QV25IFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXxlJREeiyW7NaN4qWdw">
                    <body>Claim land.&#xD;
     *&#xD;
     * @param tile The &lt;code>Tile&lt;/code> to claim.&#xD;
     * @param settlement The &lt;code>Settlement&lt;/code> to claim for.&#xD;
     * @param price The price to pay for the land, which must agree&#xD;
     *     with the owner valuation, unless negative which denotes stealing.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUwF0VJREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUwF0lJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUwF01JREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUwF1FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUws4FJREeiyW7NaN4qWdw" name="csEmigrate" method="_QV3gIFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXx1JREeiyW7NaN4qWdw">
                    <body>A unit migrates from Europe.&#xD;
     *&#xD;
     * @param slot The slot within &lt;code>Europe&lt;/code> to select the unit from.&#xD;
     * @param type The type of migration occurring.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUws4VJREeiyW7NaN4qWdw" name="slot">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QUws4lJREeiyW7NaN4qWdw" name="type" type="_QSsQU1JREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUws41JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUws5FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUx7AVJREeiyW7NaN4qWdw" name="csCombat" method="_QV3gJVJREeiyW7NaN4qWdw" raisedException="_QUxT8FJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWHXyFJREeiyW7NaN4qWdw">
                    <body>Combat.&#xD;
     *&#xD;
     * @param attacker The &lt;code>FreeColGameObject&lt;/code> that is attacking.&#xD;
     * @param defender The &lt;code>FreeColGameObject&lt;/code> that is defending.&#xD;
     * @param crs A list of &lt;code>CombatResult&lt;/code>s defining the result.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUx7AlJREeiyW7NaN4qWdw" name="attacker" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUx7A1JREeiyW7NaN4qWdw" name="defender" type="_QSA64VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUx7BFJREeiyW7NaN4qWdw" name="crs" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUx7BVJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUx7BlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUyiEVJREeiyW7NaN4qWdw" name="getSlaughterTension" visibility="private" method="_QV3gK1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-0FJREeiyW7NaN4qWdw">
                    <body>Gets the amount to raise tension by when a unit is slaughtered.&#xD;
     *&#xD;
     * @param loser The &lt;code>Unit&lt;/code> that dies.&#xD;
     * @return An amount to raise tension by.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUyiElJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUyiE1JREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QUzJIFJREeiyW7NaN4qWdw" name="csAutoequipUnit" visibility="private" method="_QV3gLlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-0VJREeiyW7NaN4qWdw">
                    <body>Notifies of automatic arming.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> that is auto-equipping.&#xD;
     * @param settlement The &lt;code>Settlement&lt;/code> being defended.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUzJIVJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUzJIlJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUzJI1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUzwMFJREeiyW7NaN4qWdw" name="csBurnMissions" visibility="private" method="_QV3gMlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-0lJREeiyW7NaN4qWdw">
                    <body>Burns a players missions.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that attacked.&#xD;
     * @param settlement The &lt;code>IndianSettlement&lt;/code> that was attacked.&#xD;
     * @param cs The &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QUzwMVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUzwMlJREeiyW7NaN4qWdw" name="settlement" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QUzwM1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QUzwNFJREeiyW7NaN4qWdw" name="csCaptureAutoEquip" visibility="private" method="_QV4HMFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-01JREeiyW7NaN4qWdw">
                    <body>Defender auto equips but loses and attacker captures the equipment.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that attacked.&#xD;
     * @param defender The &lt;code>Unit&lt;/code> that defended and loses equipment.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU0XQFJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0XQVJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0XQlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU0XQ1JREeiyW7NaN4qWdw" name="csCaptureColony" visibility="private" method="_QV4HNFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-1FJREeiyW7NaN4qWdw">
                    <body>Captures a colony.&#xD;
     *&#xD;
     * @param attacker The attacking &lt;code>Unit&lt;/code>.&#xD;
     * @param colony The &lt;code>ServerColony&lt;/code> to capture.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs The &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU0XRFJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0XRVJREeiyW7NaN4qWdw" name="colony" type="_P_2z4FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0XRlJREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0XR1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU0-UFJREeiyW7NaN4qWdw" name="csCaptureConvert" visibility="private" method="_QV4HOVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-1VJREeiyW7NaN4qWdw">
                    <body>Extracts a convert from a native settlement.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that is attacking.&#xD;
     * @param is The &lt;code>IndianSettlement&lt;/code> under attack.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU0-UVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0-UlJREeiyW7NaN4qWdw" name="is" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0-U1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU0-VFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU1lYFJREeiyW7NaN4qWdw" name="csCaptureEquip" visibility="private" method="_QV4HPlJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-1lJREeiyW7NaN4qWdw">
                    <body>Captures equipment.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that captures equipment.&#xD;
     * @param loser The &lt;code>Unit&lt;/code> that defended and loses equipment.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU1lYVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU1lYlJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU1lY1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU2McFJREeiyW7NaN4qWdw" name="csCaptureEquipment" visibility="private" method="_QV4uQFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-11JREeiyW7NaN4qWdw">
                    <body>Capture equipment.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that is capturing equipment.&#xD;
     * @param loser The &lt;code>Unit&lt;/code> that is losing equipment.&#xD;
     * @param role The &lt;code>Role&lt;/code> wrest from the loser.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU2McVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2MclJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2Mc1JREeiyW7NaN4qWdw" name="role" type="_QRunAlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2MdFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU2MdVJREeiyW7NaN4qWdw" name="csCaptureUnit" visibility="private" method="_QV4uRVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-2FJREeiyW7NaN4qWdw">
                    <body>Capture a unit.&#xD;
     *&#xD;
     * @param winner A &lt;code>Unit&lt;/code> that is capturing.&#xD;
     * @param loser A &lt;code>Unit&lt;/code> to capture.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU2zgFJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2zgVJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2zglJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU2zg1JREeiyW7NaN4qWdw" name="csDamageColonyShips" visibility="private" method="_QV4uSVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-2VJREeiyW7NaN4qWdw">
                    <body>Damages all ships in a colony in preparation for capture.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that is damaging.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> to damage ships in.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU2zhFJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2zhVJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU2zhlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU3akFJREeiyW7NaN4qWdw" name="csDamageShipAttack" visibility="private" method="_QV4uTVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-2lJREeiyW7NaN4qWdw">
                    <body>Damage a ship through normal attack.&#xD;
     *&#xD;
     * @param attacker The attacker &lt;code>Unit&lt;/code>.&#xD;
     * @param ship The &lt;code>Unit&lt;/code> which is a ship to damage.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU3akVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU3aklJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU3ak1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU4BoFJREeiyW7NaN4qWdw" name="csDamageShipBombard" visibility="private" method="_QV5VUFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-21JREeiyW7NaN4qWdw">
                    <body>Damage a ship through bombard.&#xD;
     *&#xD;
     * @param settlement The attacker &lt;code>Settlement&lt;/code>.&#xD;
     * @param ship The &lt;code>Unit&lt;/code> which is a ship to damage.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU4BoVJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4BolJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4Bo1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU4BpFJREeiyW7NaN4qWdw" name="csDamageShip" visibility="private" method="_QV5VVFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-3FJREeiyW7NaN4qWdw">
                    <body>Damage a ship.&#xD;
     *&#xD;
     * @param ship The naval &lt;code>Unit&lt;/code> to damage.&#xD;
     * @param repair The &lt;code>Location&lt;/code> to send it to.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU4BpVJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4BplJREeiyW7NaN4qWdw" name="repair" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4Bp1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU4osFJREeiyW7NaN4qWdw" name="csDemoteUnit" visibility="private" method="_QV5VWFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-3VJREeiyW7NaN4qWdw">
                    <body>Demotes a unit.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that won.&#xD;
     * @param loser The &lt;code>Unit&lt;/code> that lost and should be demoted.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU4osVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4oslJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU4os1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU5PwFJREeiyW7NaN4qWdw" name="csDestroyColony" visibility="private" method="_QV5VXFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-3lJREeiyW7NaN4qWdw">
                    <body>Destroy a colony.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that attacked.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> that was attacked.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs The &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU5PwVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU5PwlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU5Pw1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU5PxFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU520FJREeiyW7NaN4qWdw" name="csDestroySettlement" visibility="private" method="_QV58YFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-31JREeiyW7NaN4qWdw">
                    <body>Destroys an Indian settlement.&#xD;
     *&#xD;
     * @param attacker an &lt;code>Unit&lt;/code> value&#xD;
     * @param settlement an &lt;code>IndianSettlement&lt;/code> value&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU520VJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU520lJREeiyW7NaN4qWdw" name="settlement" type="_QSCwEVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU5201JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU521FJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU521VJREeiyW7NaN4qWdw" name="csDisposeSettlement" method="_QV58ZVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-4FJREeiyW7NaN4qWdw">
                    <body>Disposes of a settlement and reassign its tiles.&#xD;
     *&#xD;
     * +vis,til: Resolves the whole mess.&#xD;
     *&#xD;
     * @param settlement The &lt;code>Settlement&lt;/code> under attack.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU521lJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU5211JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU6d4FJREeiyW7NaN4qWdw" name="csEvadeAttack" visibility="private" method="_QV58aFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-4VJREeiyW7NaN4qWdw">
                    <body>Evade a normal attack.&#xD;
     *&#xD;
     * @param attacker The attacker &lt;code>Unit&lt;/code>.&#xD;
     * @param defender A naval &lt;code>Unit&lt;/code> that evades the attacker.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU6d4VJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU6d4lJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU6d41JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU7E8FJREeiyW7NaN4qWdw" name="csEvadeBombard" visibility="private" method="_QV58bFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-4lJREeiyW7NaN4qWdw">
                    <body>Evade a bombardment.&#xD;
     *&#xD;
     * @param settlement The attacker &lt;code>Settlement&lt;/code>.&#xD;
     * @param defender A naval &lt;code>Unit&lt;/code> that evades the attacker.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU7E8VJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7E8lJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7E81JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU7E9FJREeiyW7NaN4qWdw" name="csLootShip" visibility="private" method="_QV6jcFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-41JREeiyW7NaN4qWdw">
                    <body>Loot a ship.&#xD;
     *&#xD;
     * @param winner The winning naval &lt;code>Unit&lt;/code>.&#xD;
     * @param loser The losing naval &lt;code>Unit&lt;/code>&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU7E9VJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7E9lJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7E91JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU7sAFJREeiyW7NaN4qWdw" name="csLoseAutoEquip" visibility="private" method="_QV6jdFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWH-5FJREeiyW7NaN4qWdw">
                    <body>Unit auto equips but loses equipment.&#xD;
     *&#xD;
     * @param attacker The &lt;code>Unit&lt;/code> that attacked.&#xD;
     * @param defender The &lt;code>Unit&lt;/code> that defended and loses equipment.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU7sAVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7sAlJREeiyW7NaN4qWdw" name="defender" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU7sA1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU8TEFJREeiyW7NaN4qWdw" name="csLoseEquip" visibility="private" method="_QV6jeFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl4FJREeiyW7NaN4qWdw">
                    <body>Unit drops some equipment.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that won.&#xD;
     * @param loser The &lt;code>Unit&lt;/code> that lost and loses equipment.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU8TEVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU8TElJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU8TE1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU8TFFJREeiyW7NaN4qWdw" name="csLoseLocation" method="_QV6jfFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl4VJREeiyW7NaN4qWdw">
                    <body>Hook for when a player loses access to a location for whatever&#xD;
     * reason.  Useful for disabling trade routes.&#xD;
     *&#xD;
     * @param loc The &lt;code>Location&lt;/code> that was lost.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU8TFVJREeiyW7NaN4qWdw" name="loc" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU8TFlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU86IFJREeiyW7NaN4qWdw" name="csPillageColony" visibility="private" method="_QV7KgFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl4lJREeiyW7NaN4qWdw">
                    <body>Damage a building or a ship or steal some goods or gold.&#xD;
     *&#xD;
     * @param attacker The attacking &lt;code>Unit&lt;/code>.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> to pillage.&#xD;
     * @param random A pseudo-random number source.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU86IVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU86IlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU86I1JREeiyW7NaN4qWdw" name="random" type="_QRhysFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU86JFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU9hMFJREeiyW7NaN4qWdw" name="csDamageBuilding" visibility="private" method="_QV7KhVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl41JREeiyW7NaN4qWdw">
                    <body>Damage a building in a colony by downgrading it if possible and&#xD;
     * destroying it otherwise.&#xD;
     *&#xD;
     * This is called as a result of pillaging, which always updates&#xD;
     * the colony tile.&#xD;
     *&#xD;
     * @param building The &lt;code>Building&lt;/code> to damage.&#xD;
     * @param cs a &lt;code>ChangeSet&lt;/code> value</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU9hMVJREeiyW7NaN4qWdw" name="building" type="_QRjA0VJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU9hMlJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU9hM1JREeiyW7NaN4qWdw" name="csPromoteUnit" visibility="private" method="_QV7KiFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl5FJREeiyW7NaN4qWdw">
                    <body>Promotes a unit.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that won and should be promoted.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU9hNFJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU9hNVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU-IQFJREeiyW7NaN4qWdw" name="csSinkColonyShips" visibility="private" method="_QV7Ki1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl5VJREeiyW7NaN4qWdw">
                    <body>Sinks all ships in a colony.&#xD;
     *&#xD;
     * @param attacker The attacker &lt;code>Unit&lt;/code>.&#xD;
     * @param colony The &lt;code>Colony&lt;/code> to sink ships in.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU-IQVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-IQlJREeiyW7NaN4qWdw" name="colony" type="_QRkO8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-IQ1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU-IRFJREeiyW7NaN4qWdw" name="csSinkShipAttack" visibility="private" method="_QV7Kj1JREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl5lJREeiyW7NaN4qWdw">
                    <body>Sinks this ship as result of a normal attack.&#xD;
     *&#xD;
     * @param attacker The attacker &lt;code>Unit&lt;/code>.&#xD;
     * @param ship The naval &lt;code>Unit&lt;/code> to sink.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU-IRVJREeiyW7NaN4qWdw" name="attacker" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-vUFJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-vUVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU-vUlJREeiyW7NaN4qWdw" name="csSinkShipBombard" visibility="private" method="_QV7xkFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl51JREeiyW7NaN4qWdw">
                    <body>Sinks this ship as result of a bombard.&#xD;
     *&#xD;
     * @param settlement The bombarding &lt;code>Settlement&lt;/code>.&#xD;
     * @param ship The naval &lt;code>Unit&lt;/code> to sink.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU-vU1JREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-vVFJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU-vVVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU_WYFJREeiyW7NaN4qWdw" name="csSinkShip" visibility="private" method="_QV7xlFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl6FJREeiyW7NaN4qWdw">
                    <body>Sink the ship.&#xD;
     *&#xD;
     * @param ship The naval &lt;code>Unit&lt;/code> to sink.&#xD;
     * @param attackerPlayer The &lt;code>ServerPlayer&lt;/code> that&#xD;
     * attacked, or null&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU_WYVJREeiyW7NaN4qWdw" name="ship" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU_WYlJREeiyW7NaN4qWdw" name="attackerPlayer" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU_WY1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU_WZFJREeiyW7NaN4qWdw" name="csSlaughterUnit" visibility="private" method="_QV7xmFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl6VJREeiyW7NaN4qWdw">
                    <body>Slaughter a unit.&#xD;
     *&#xD;
     * @param winner The &lt;code>Unit&lt;/code> that is slaughtering.&#xD;
     * @param loser The &lt;code>Unit&lt;/code> to slaughter.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU_WZVJREeiyW7NaN4qWdw" name="winner" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU_WZlJREeiyW7NaN4qWdw" name="loser" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU_WZ1JREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QU_9cFJREeiyW7NaN4qWdw" name="csSeeNewTiles" method="_QV7xnFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl6lJREeiyW7NaN4qWdw">
                    <body>Updates the player view for each new tile on a supplied list,&#xD;
     * and update a ChangeSet as well.&#xD;
     *&#xD;
     * @param newTiles A list of &lt;code>Tile&lt;/code>s to update.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QU_9cVJREeiyW7NaN4qWdw" name="newTiles" type="_QSol8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QU_9clJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVAkgFJREeiyW7NaN4qWdw" name="csRaiseTax" method="_QV8YoFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl7FJREeiyW7NaN4qWdw">
                    <body>Raises the players tax rate, or handles a goods party.&#xD;
     *&#xD;
     * @param tax The new tax rate.&#xD;
     * @param goods The &lt;code>Goods&lt;/code> to use in a goods party.&#xD;
     * @param accepted Whether the tax raise was accepted.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVAkgVJREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVAkglJREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVAkg1JREeiyW7NaN4qWdw" name="accepted">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVAkhFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVAkhVJREeiyW7NaN4qWdw" name="ignoreTax" method="_QV8YpVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl7VJREeiyW7NaN4qWdw">
                    <body>Handle the end of a session where the player has ignored a tax&#xD;
     * increase demand.&#xD;
     *&#xD;
     * @param tax The new tax rate.&#xD;
     * @param goods The &lt;code>Goods&lt;/code> to use in a goods party.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVAkhlJREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVAkh1JREeiyW7NaN4qWdw" name="goods" type="_QRbFAVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVAkiFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVBLkFJREeiyW7NaN4qWdw" name="ignoreMercenaries" method="_QV8_sFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl7lJREeiyW7NaN4qWdw">
                    <body>Handle the end of a session where the player has ignored an&#xD;
     * offer of mercenaries.&#xD;
     *&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVBLkVJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVBLklJREeiyW7NaN4qWdw" name="csSetTax" method="_QV8_slJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl71JREeiyW7NaN4qWdw">
                    <body>Set the player tax rate.&#xD;
     * If this requires a change to the bells bonuses, we have to update&#xD;
     * the whole player (bah) because we can not yet independently update&#xD;
     * the feature container.&#xD;
     *&#xD;
     * @param tax The new tax rate.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVBLk1JREeiyW7NaN4qWdw" name="tax">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVBLlFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVBLlVJREeiyW7NaN4qWdw" name="csAddMercenaries" method="_QV8_tVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl8FJREeiyW7NaN4qWdw">
                    <body>Adds mercenaries that the player has accepted.&#xD;
     *&#xD;
     * @param mercs A list of mercenaries.&#xD;
     * @param price The price to be charged for them.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVByoFJREeiyW7NaN4qWdw" name="mercs" type="_QRad8FJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVByoVJREeiyW7NaN4qWdw" name="price">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_QVByolJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVBypFJREeiyW7NaN4qWdw" name="csContact" method="_QV9mwFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl8VJREeiyW7NaN4qWdw">
                    <body>Make contact between two nations if necessary.&#xD;
     *&#xD;
     * @param other The other &lt;code>ServerPlayer&lt;/code>.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if this was a first contact.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVBypVJREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVByplJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVCZsFJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_QVCZsVJREeiyW7NaN4qWdw" name="csNativeFirstContact" method="_QV9mxFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl8lJREeiyW7NaN4qWdw">
                    <body>Initiate first contact between this European and native player.&#xD;
     *&#xD;
     * @param other The native &lt;code>ServerPlayer&lt;/code>.&#xD;
     * @param tile The &lt;code>Tile&lt;/code> contact is made at if this is&#xD;
     *     a first landing in the new world and it is owned by the&#xD;
     *     other player.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVCZslJREeiyW7NaN4qWdw" name="other" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVCZs1JREeiyW7NaN4qWdw" name="tile" type="_QRv1IFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVCZtFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVDAwFJREeiyW7NaN4qWdw" name="csEuropeanFirstContact" method="_QV9myFJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl81JREeiyW7NaN4qWdw">
                    <body>Initiate first contact between this European and another&#xD;
     * European player.&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> making contact.&#xD;
     * @param settlement The &lt;code>Settlement&lt;/code> being contacted.&#xD;
     * @param otherUnit The &lt;code>Unit&lt;/code> being contacted.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVDAwVJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDAwlJREeiyW7NaN4qWdw" name="settlement" type="_QRWzkVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDAw1JREeiyW7NaN4qWdw" name="otherUnit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDAxFJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_QVDn0FJREeiyW7NaN4qWdw" name="csChangeOwner" method="_QV9mzVJREeiyW7NaN4qWdw">
                  <ownedComment xmi:id="_QWIl9FJREeiyW7NaN4qWdw">
                    <body>Change the owner of a unit or dispose of it if the change is&#xD;
     * impossible.  Move the unit to a new location if necessary.&#xD;
     * Also handle disappearance of any carried units that will now be&#xD;
     * invisible to the new owner.&#xD;
     *&#xD;
     * -vis(owner,newOwner)&#xD;
     *&#xD;
     * @param unit The &lt;code>Unit&lt;/code> to change ownership of.&#xD;
     * @param newOwner The new owning &lt;code>ServerPlayer&lt;/code>.&#xD;
     * @param change An optional accompanying &lt;code>ChangeType&lt;/code>.&#xD;
     * @param loc A optional new &lt;code>Location&lt;/code> for the unit.&#xD;
     * @param cs A &lt;code>ChangeSet&lt;/code> to update.&#xD;
     * @return True if the new owner can have this unit.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_QVDn0VJREeiyW7NaN4qWdw" name="unit" type="_QRXaoVJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDn0lJREeiyW7NaN4qWdw" name="newOwner" type="_QAyoAFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDn01JREeiyW7NaN4qWdw" name="change" type="_QRwcMlJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDn1FJREeiyW7NaN4qWdw" name="loc" type="_QSajgFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDn1VJREeiyW7NaN4qWdw" name="cs" type="_QRYBsFJREeiyW7NaN4qWdw"/>
                  <ownedParameter xmi:id="_QVDn1lJREeiyW7NaN4qWdw" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QUNTQFJREeiyW7NaN4qWdw" name="T"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QUQ9plJREeiyW7NaN4qWdw" name="RegionType"/>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWB4MFJREeiyW7NaN4qWdw" name="" memberEnd="_QVMxwFJREeiyW7NaN4qWdw _QWB4MVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWB4MVJREeiyW7NaN4qWdw" name="" type="_P_oxcFJREeiyW7NaN4qWdw" association="_QWB4MFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWWBQFJREeiyW7NaN4qWdw" name="" memberEnd="_QWWBQVJREeiyW7NaN4qWdw _QVMKsFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWWBQVJREeiyW7NaN4qWdw" name="" type="_P_oxcFJREeiyW7NaN4qWdw" association="_QWWBQFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWWoUVJREeiyW7NaN4qWdw" name="" memberEnd="_QWWoUlJREeiyW7NaN4qWdw _QVMxwVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWWoUlJREeiyW7NaN4qWdw" name="" type="_P_oxcFJREeiyW7NaN4qWdw" association="_QWWoUVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWXPYVJREeiyW7NaN4qWdw" name="" memberEnd="_QWXPYlJREeiyW7NaN4qWdw _QVMxw1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWXPYlJREeiyW7NaN4qWdw" name="" type="_P_oxcFJREeiyW7NaN4qWdw" association="_QWXPYVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWX2cVJREeiyW7NaN4qWdw" name="" memberEnd="_QWX2clJREeiyW7NaN4qWdw _QVNY01JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWX2clJREeiyW7NaN4qWdw" name="" type="_P_oxcFJREeiyW7NaN4qWdw" association="_QWX2cVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWYdgVJREeiyW7NaN4qWdw" name="" memberEnd="_QWYdglJREeiyW7NaN4qWdw _QVN_4FJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWYdglJREeiyW7NaN4qWdw" name="" type="_P_sb0FJREeiyW7NaN4qWdw" association="_QWYdgVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWZEkFJREeiyW7NaN4qWdw" name="" memberEnd="_QWZEkVJREeiyW7NaN4qWdw _QVN_4lJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWZEkVJREeiyW7NaN4qWdw" name="" type="_P_sb0FJREeiyW7NaN4qWdw" association="_QWZEkFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWZEk1JREeiyW7NaN4qWdw" name="" memberEnd="_QWZElFJREeiyW7NaN4qWdw _QVOm81JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWZElFJREeiyW7NaN4qWdw" name="" type="_P_tp8FJREeiyW7NaN4qWdw" association="_QWZEk1JREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWZroVJREeiyW7NaN4qWdw" name="" memberEnd="_QWZrolJREeiyW7NaN4qWdw _QVPOAFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWZrolJREeiyW7NaN4qWdw" name="" type="_P_tp8FJREeiyW7NaN4qWdw" association="_QWZroVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWaSsVJREeiyW7NaN4qWdw" name="" memberEnd="_QWaSslJREeiyW7NaN4qWdw _QVP1EVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWaSslJREeiyW7NaN4qWdw" name="" type="_P_tp8FJREeiyW7NaN4qWdw" association="_QWaSsVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWa5wVJREeiyW7NaN4qWdw" name="" memberEnd="_QWa5wlJREeiyW7NaN4qWdw _QVP1E1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWa5wlJREeiyW7NaN4qWdw" name="" type="_P_tp8FJREeiyW7NaN4qWdw" association="_QWa5wVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWbg0FJREeiyW7NaN4qWdw" name="" memberEnd="_QWbg0VJREeiyW7NaN4qWdw _QVRDMFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWbg0VJREeiyW7NaN4qWdw" name="" type="_P_xUUFJREeiyW7NaN4qWdw" association="_QWbg0FJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWbg01JREeiyW7NaN4qWdw" name="" memberEnd="_QWbg1FJREeiyW7NaN4qWdw _QVRDMlJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWbg1FJREeiyW7NaN4qWdw" name="" type="_P_2z4FJREeiyW7NaN4qWdw" association="_QWbg01JREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWcH4VJREeiyW7NaN4qWdw" name="" memberEnd="_QWcH4lJREeiyW7NaN4qWdw _QVRqQFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWcH4lJREeiyW7NaN4qWdw" name="" type="_P_-vsFJREeiyW7NaN4qWdw" association="_QWcH4VJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWcu8VJREeiyW7NaN4qWdw" name="" memberEnd="_QWcu8lJREeiyW7NaN4qWdw _QVRqQlJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWcu8lJREeiyW7NaN4qWdw" name="" type="_QABzAFJREeiyW7NaN4qWdw" association="_QWcu8VJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWdWAFJREeiyW7NaN4qWdw" name="" memberEnd="_QWdWAVJREeiyW7NaN4qWdw _QVSRUFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWdWAVJREeiyW7NaN4qWdw" name="" type="_QAH5oFJREeiyW7NaN4qWdw" association="_QWdWAFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWdWA1JREeiyW7NaN4qWdw" name="" memberEnd="_QWdWBFJREeiyW7NaN4qWdw _QVS4YFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWdWBFJREeiyW7NaN4qWdw" name="" type="_QAQcgFJREeiyW7NaN4qWdw" association="_QWdWA1JREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWd9EVJREeiyW7NaN4qWdw" name="" memberEnd="_QWd9ElJREeiyW7NaN4qWdw _QVTfc1JREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWd9ElJREeiyW7NaN4qWdw" name="" type="_QAY_YVJREeiyW7NaN4qWdw" association="_QWd9EVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWekIVJREeiyW7NaN4qWdw" name="" memberEnd="_QWekIlJREeiyW7NaN4qWdw _QVUGgFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWekIlJREeiyW7NaN4qWdw" name="" type="_QAY_YVJREeiyW7NaN4qWdw" association="_QWekIVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWfLMVJREeiyW7NaN4qWdw" name="" memberEnd="_QWfLMlJREeiyW7NaN4qWdw _QVUtlFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWfLMlJREeiyW7NaN4qWdw" name="" type="_QAcpwFJREeiyW7NaN4qWdw" association="_QWfLMVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWfLNFJREeiyW7NaN4qWdw" name="" memberEnd="_QWfLNVJREeiyW7NaN4qWdw _QVVUoVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWfLNVJREeiyW7NaN4qWdw" name="" type="_QAj-gFJREeiyW7NaN4qWdw" association="_QWfLNFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWfyQVJREeiyW7NaN4qWdw" name="" memberEnd="_QWfyQlJREeiyW7NaN4qWdw _QVV7sFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWfyQlJREeiyW7NaN4qWdw" name="" type="_QAuWkFJREeiyW7NaN4qWdw" association="_QWfyQVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWgZUVJREeiyW7NaN4qWdw" name="" memberEnd="_QWgZUlJREeiyW7NaN4qWdw _QVYX8FJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWgZUlJREeiyW7NaN4qWdw" name="" type="_QAyoAFJREeiyW7NaN4qWdw" association="_QWgZUVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWhAYVJREeiyW7NaN4qWdw" name="" memberEnd="_QWhAYlJREeiyW7NaN4qWdw _QVaNKFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWhAYlJREeiyW7NaN4qWdw" name="" type="_QAyoAFJREeiyW7NaN4qWdw" association="_QWhAYVJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWhncFJREeiyW7NaN4qWdw" name="" memberEnd="_QWhncVJREeiyW7NaN4qWdw _QVa0MVJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWhncVJREeiyW7NaN4qWdw" name="" type="_QAyoAFJREeiyW7NaN4qWdw" association="_QWhncFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWiOgFJREeiyW7NaN4qWdw" name="" memberEnd="_QWiOgVJREeiyW7NaN4qWdw _QVbbQFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWiOgVJREeiyW7NaN4qWdw" name="" type="_QAyoAFJREeiyW7NaN4qWdw" association="_QWiOgFJREeiyW7NaN4qWdw"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_QWiOg1JREeiyW7NaN4qWdw" name="" memberEnd="_QWiOhFJREeiyW7NaN4qWdw _QVbbRFJREeiyW7NaN4qWdw">
                <ownedEnd xmi:id="_QWiOhFJREeiyW7NaN4qWdw" name="" type="_QAyoAFJREeiyW7NaN4qWdw" association="_QWiOg1JREeiyW7NaN4qWdw"/>
              </packagedElement>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_P9sQslJREeiyW7NaN4qWdw" name="common">
            <packagedElement xmi:type="uml:Package" xmi:id="_P9sQs1JREeiyW7NaN4qWdw" name="model">
              <packagedElement xmi:type="uml:Package" xmi:id="_P94d8FJREeiyW7NaN4qWdw" name="Monarch">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QReIUVJREeiyW7NaN4qWdw" name="MonarchAction"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-C2AFJREeiyW7NaN4qWdw" name="UnitTypeChange">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QRwcMlJREeiyW7NaN4qWdw" name="ChangeType"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-h-MFJREeiyW7NaN4qWdw" name="LostCityRumour">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QSbKklJREeiyW7NaN4qWdw" name="RumourType"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-p6AFJREeiyW7NaN4qWdw" name="CombatModel">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QSrCMVJREeiyW7NaN4qWdw" name="CombatResult"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-p6AVJREeiyW7NaN4qWdw" name="Europe">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QSsQU1JREeiyW7NaN4qWdw" name="MigrationType"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-p6AlJREeiyW7NaN4qWdw" name="FoundingFather">
                <packagedElement xmi:type="uml:Enumeration" xmi:id="_QStecVJREeiyW7NaN4qWdw" name="FoundingFatherType"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_P-qhEFJREeiyW7NaN4qWdw" name="pathfinding">
                <packagedElement xmi:type="uml:Class" xmi:id="_QSxI0VJREeiyW7NaN4qWdw" name="GoalDeciders"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRWMgVJREeiyW7NaN4qWdw" name="DiplomaticTrade"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRWzkVJREeiyW7NaN4qWdw" name="Settlement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRXaoVJREeiyW7NaN4qWdw" name="Unit"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRbFAVJREeiyW7NaN4qWdw" name="Goods"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRdhQFJREeiyW7NaN4qWdw" name="AbstractUnit"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRiZwFJREeiyW7NaN4qWdw" name="Ability"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRiZwlJREeiyW7NaN4qWdw" name="AbstractGoods"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRjA0VJREeiyW7NaN4qWdw" name="Building"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRjn4VJREeiyW7NaN4qWdw" name="BuildingType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRkO8FJREeiyW7NaN4qWdw" name="Colony"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRkO8lJREeiyW7NaN4qWdw" name="Game"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRk2AVJREeiyW7NaN4qWdw" name="ModelMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRldEVJREeiyW7NaN4qWdw" name="ProductionInfo"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRmEIFJREeiyW7NaN4qWdw" name="StringTemplate"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRmEIlJREeiyW7NaN4qWdw" name="UnitType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRrjsFJREeiyW7NaN4qWdw" name="BuildQueue"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRrjslJREeiyW7NaN4qWdw" name="BuildableType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRsKwVJREeiyW7NaN4qWdw" name="ColonyTile"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRsx0VJREeiyW7NaN4qWdw" name="ExportData"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRsx01JREeiyW7NaN4qWdw" name="GoodsContainer"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRtY4VJREeiyW7NaN4qWdw" name="GoodsType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRt_8VJREeiyW7NaN4qWdw" name="Market"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRunAFJREeiyW7NaN4qWdw" name="Player"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRunAlJREeiyW7NaN4qWdw" name="Role"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRvOEVJREeiyW7NaN4qWdw" name="Specification"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRv1IFJREeiyW7NaN4qWdw" name="Tile"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRwcMFJREeiyW7NaN4qWdw" name="TypeCountMap"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRxDQVJREeiyW7NaN4qWdw" name="WorkLocation"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QR2i0FJREeiyW7NaN4qWdw" name="Resource"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QR4YAFJREeiyW7NaN4qWdw" name="Europe"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QR4YAlJREeiyW7NaN4qWdw" name="GameOptions"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSAT01JREeiyW7NaN4qWdw" name="Event"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSA64VJREeiyW7NaN4qWdw" name="FreeColGameObject"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_QSBh8VJREeiyW7NaN4qWdw" name="FreeColGameObjectListener"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSCJAFJREeiyW7NaN4qWdw" name="HighSeas"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSCJAlJREeiyW7NaN4qWdw" name="HistoryEvent"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSCwEVJREeiyW7NaN4qWdw" name="IndianSettlement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSDXIFJREeiyW7NaN4qWdw" name="Limit"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_QSDXIlJREeiyW7NaN4qWdw" name="Ownable"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSD-MVJREeiyW7NaN4qWdw" name="SimpleCombatModel"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSKE0FJREeiyW7NaN4qWdw" name="Modifier"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSKr4VJREeiyW7NaN4qWdw" name="Tension"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSLS8VJREeiyW7NaN4qWdw" name="Turn"/>
              <packagedElement xmi:type="uml:Enumeration" xmi:id="_QST10FJREeiyW7NaN4qWdw" name="Direction"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QST10lJREeiyW7NaN4qWdw" name="Map"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSUc4VJREeiyW7NaN4qWdw" name="Region"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSZ8cFJREeiyW7NaN4qWdw" name="CombatModel"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSajgFJREeiyW7NaN4qWdw" name="Location"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSbKkFJREeiyW7NaN4qWdw" name="LostCityRumour"/>
              <packagedElement xmi:type="uml:Enumeration" xmi:id="_QSbxoVJREeiyW7NaN4qWdw" name="Stance"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QScYsVJREeiyW7NaN4qWdw" name="ResourceType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSc_wVJREeiyW7NaN4qWdw" name="TileImprovement"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSdm0VJREeiyW7NaN4qWdw" name="TileImprovementType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSeN4VJREeiyW7NaN4qWdw" name="TileType"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSrpQVJREeiyW7NaN4qWdw" name="Disaster"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSsQUVJREeiyW7NaN4qWdw" name="Effect"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSs3YVJREeiyW7NaN4qWdw" name="FoundingFather"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSuFgVJREeiyW7NaN4qWdw" name="Monarch"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSuskVJREeiyW7NaN4qWdw" name="Nation"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSvToVJREeiyW7NaN4qWdw" name="StanceTradeItem"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSv6sVJREeiyW7NaN4qWdw" name="TradeRoute"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSwhwVJREeiyW7NaN4qWdw" name="TradeRouteStop"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P9-kkFJREeiyW7NaN4qWdw" name="util">
              <packagedElement xmi:type="uml:Class" xmi:id="_QRmrMVJREeiyW7NaN4qWdw" name="LogBuilder"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRxqUVJREeiyW7NaN4qWdw" name="CollectionUtils"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QRxqU1JREeiyW7NaN4qWdw" name="RandomUtils"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QR5mIVJREeiyW7NaN4qWdw" name="RandomChoice"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P-CO8FJREeiyW7NaN4qWdw" name="i18n">
              <packagedElement xmi:type="uml:Class" xmi:id="_QRq8oVJREeiyW7NaN4qWdw" name="Messages"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QR_swlJREeiyW7NaN4qWdw" name="NameCache"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P-MnAFJREeiyW7NaN4qWdw" name="option">
              <packagedElement xmi:type="uml:Class" xmi:id="_QR4_EVJREeiyW7NaN4qWdw" name="UnitListOption"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P-SGlFJREeiyW7NaN4qWdw" name="io">
              <packagedElement xmi:type="uml:Class" xmi:id="_QSAT0VJREeiyW7NaN4qWdw" name="FreeColXMLReader"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P-ilQFJREeiyW7NaN4qWdw" name="networking">
              <packagedElement xmi:type="uml:Class" xmi:id="_QSe08VJREeiyW7NaN4qWdw" name="NewLandNameMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSfcAVJREeiyW7NaN4qWdw" name="NewRegionNameMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSxI01JREeiyW7NaN4qWdw" name="ChooseFoundingFatherMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSxv4VJREeiyW7NaN4qWdw" name="Connection"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSxv41JREeiyW7NaN4qWdw" name="DiplomacyMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSyW8VJREeiyW7NaN4qWdw" name="FirstContactMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSy-AVJREeiyW7NaN4qWdw" name="LootCargoMessage"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_QSzlEVJREeiyW7NaN4qWdw" name="MonarchActionMessage"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_P-pS8lJREeiyW7NaN4qWdw" name="debug">
              <packagedElement xmi:type="uml:Class" xmi:id="_QSqbIVJREeiyW7NaN4qWdw" name="FreeColDebugger"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_QSp0E1JREeiyW7NaN4qWdw" name="FreeColException"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_P9rpo1JREeiyW7NaN4qWdw" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_P9sQsFJREeiyW7NaN4qWdw" name="util">
        <packagedElement xmi:type="uml:Package" xmi:id="_P9sQsVJREeiyW7NaN4qWdw" name="logging">
          <packagedElement xmi:type="uml:Class" xmi:id="_QRVlcFJREeiyW7NaN4qWdw" name="Logger"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_QSp0EVJREeiyW7NaN4qWdw" name="Level"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_P-RfglJREeiyW7NaN4qWdw" name="Map">
          <packagedElement xmi:type="uml:Interface" xmi:id="_QR-eo1JREeiyW7NaN4qWdw" name="Entry"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_P-SGkFJREeiyW7NaN4qWdw" name="stream">
          <packagedElement xmi:type="uml:Class" xmi:id="_QR_FsVJREeiyW7NaN4qWdw" name="Collectors"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QRad8FJREeiyW7NaN4qWdw" name="List"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QRhysFJREeiyW7NaN4qWdw" name="Random"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QRpugFJREeiyW7NaN4qWdw" name="ArrayList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QRqVkVJREeiyW7NaN4qWdw" name="Set"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QR9QgVJREeiyW7NaN4qWdw" name="Arrays"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_QR9Qg1JREeiyW7NaN4qWdw" name="Date"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QR93kVJREeiyW7NaN4qWdw" name="HashMap"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QR-eoVJREeiyW7NaN4qWdw" name="Map"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QSSAoFJREeiyW7NaN4qWdw" name="LinkedList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QSSnsVJREeiyW7NaN4qWdw" name="Queue"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QSYuUFJREeiyW7NaN4qWdw" name="Collections"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QSZVYVJREeiyW7NaN4qWdw" name="Iterator"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_QSol8FJREeiyW7NaN4qWdw" name="Collection"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QSol8lJREeiyW7NaN4qWdw" name="EnumMap"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QSpNAVJREeiyW7NaN4qWdw" name="HashSet"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_P-RfgFJREeiyW7NaN4qWdw" name="lang">
        <packagedElement xmi:type="uml:Package" xmi:id="_P-RfgVJREeiyW7NaN4qWdw" name="reflect">
          <packagedElement xmi:type="uml:Class" xmi:id="_QR8pcFJREeiyW7NaN4qWdw" name="InvocationTargetException"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_QT4jIVJREeiyW7NaN4qWdw" name="Object"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QT5xQFJREeiyW7NaN4qWdw" name="ClassNotFoundException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QT6YUFJREeiyW7NaN4qWdw" name="IllegalAccessException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QT6_YFJREeiyW7NaN4qWdw" name="InstantiationException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QT7mcFJREeiyW7NaN4qWdw" name="NoSuchMethodException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QULeElJREeiyW7NaN4qWdw" name="Class"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QUxT8FJREeiyW7NaN4qWdw" name="IllegalStateException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_P-eT0FJREeiyW7NaN4qWdw" name="awt">
        <packagedElement xmi:type="uml:Class" xmi:id="_QSSns1JREeiyW7NaN4qWdw" name="Rectangle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_P-pS8FJREeiyW7NaN4qWdw" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_QSnX0FJREeiyW7NaN4qWdw" name="IOException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_P-pS8VJREeiyW7NaN4qWdw" name="net">
        <packagedElement xmi:type="uml:Class" xmi:id="_QSn-4VJREeiyW7NaN4qWdw" name="Socket"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_P-SGkVJREeiyW7NaN4qWdw" name="javax">
      <packagedElement xmi:type="uml:Package" xmi:id="_P-SGklJREeiyW7NaN4qWdw" name="xml">
        <packagedElement xmi:type="uml:Package" xmi:id="_P-SGk1JREeiyW7NaN4qWdw" name="stream">
          <packagedElement xmi:type="uml:Class" xmi:id="_QR_swFJREeiyW7NaN4qWdw" name="XMLStreamException"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_P-qhEVJREeiyW7NaN4qWdw" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_P-rIIFJREeiyW7NaN4qWdw" name="w3c">
        <packagedElement xmi:type="uml:Package" xmi:id="_P-rIIVJREeiyW7NaN4qWdw" name="dom">
          <packagedElement xmi:type="uml:Interface" xmi:id="_QSzlE1JREeiyW7NaN4qWdw" name="Element"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_PGLZ4FJREeiyW7NaN4qWdw">
      <eAnnotations xmi:id="_PGMA8FJREeiyW7NaN4qWdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_PGMA8VJREeiyW7NaN4qWdw" base_Package="_OLWwYFJREeiyW7NaN4qWdw">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_P_zwkFJREeiyW7NaN4qWdw" base_Element="_P_zJgFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_P_zwkVJREeiyW7NaN4qWdw" base_Element="_P_zJgFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_P_zwklJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_P_53MFJREeiyW7NaN4qWdw" base_Element="_P_5QIFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_P_53MVJREeiyW7NaN4qWdw" base_Element="_P_5QIFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_P_53MlJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_P__90lJREeiyW7NaN4qWdw" base_Element="_P__90FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAAk4FJREeiyW7NaN4qWdw" base_Element="_P__90FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAAk4VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_QADoMFJREeiyW7NaN4qWdw" genericsValue="UnitType" base_Element="_QADBIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QAE2UVJREeiyW7NaN4qWdw" base_Element="_QAEPQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAE2UlJREeiyW7NaN4qWdw" base_Element="_QAEPQFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAE2U1JREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QAKV4lJREeiyW7NaN4qWdw" base_Element="_QAKV4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAKV41JREeiyW7NaN4qWdw" base_Element="_QAKV4FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAKV5FJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QALkAlJREeiyW7NaN4qWdw" base_Element="_QALkAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAMLEFJREeiyW7NaN4qWdw" base_Element="_QALkAFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAMLEVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QATf0lJREeiyW7NaN4qWdw" base_Element="_QATf0FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAUG4FJREeiyW7NaN4qWdw" base_Element="_QATf0FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAUG4VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Array xmi:id="_QAftEFJREeiyW7NaN4qWdw" base_Element="_QAfGA1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QAg7MFJREeiyW7NaN4qWdw" base_Element="_QAgUIFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAg7MVJREeiyW7NaN4qWdw" base_Element="_QAgUIFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAg7MlJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QAoP8VJREeiyW7NaN4qWdw" base_Element="_QAno4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QAoP8lJREeiyW7NaN4qWdw" base_Element="_QAno4FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QAo3AFJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QBH_MVJREeiyW7NaN4qWdw" base_Element="_QBHYIFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QBH_MlJREeiyW7NaN4qWdw" base_Element="_QBHYIFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QBH_M1JREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QBImQVJREeiyW7NaN4qWdw" base_Element="_QBH_NFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QBImQlJREeiyW7NaN4qWdw" base_Element="_QBH_NFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QBJNUFJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_QRWMgFJREeiyW7NaN4qWdw" base_Element="_QRVlcFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRWzkFJREeiyW7NaN4qWdw" base_Element="_QRWMgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRXaoFJREeiyW7NaN4qWdw" base_Element="_QRWzkVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRXaolJREeiyW7NaN4qWdw" base_Element="_QRXaoVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRYBsVJREeiyW7NaN4qWdw" base_Element="_QRYBsFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRYowFJREeiyW7NaN4qWdw" base_Element="_QRYBslJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRbFAFJREeiyW7NaN4qWdw" base_Element="_QRad8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRcTIFJREeiyW7NaN4qWdw" base_Element="_QRbFAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QReIUFJREeiyW7NaN4qWdw" base_Element="_QRdhQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRevYFJREeiyW7NaN4qWdw" base_Element="_QReIUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRhysVJREeiyW7NaN4qWdw" base_Element="_QRhysFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRiZwVJREeiyW7NaN4qWdw" base_Element="_QRiZwFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRjA0FJREeiyW7NaN4qWdw" base_Element="_QRiZwlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRjn4FJREeiyW7NaN4qWdw" base_Element="_QRjA0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRjn4lJREeiyW7NaN4qWdw" base_Element="_QRjn4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRkO8VJREeiyW7NaN4qWdw" base_Element="_QRkO8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRk2AFJREeiyW7NaN4qWdw" base_Element="_QRkO8lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRldEFJREeiyW7NaN4qWdw" base_Element="_QRk2AVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRldElJREeiyW7NaN4qWdw" base_Element="_QRldEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRmEIVJREeiyW7NaN4qWdw" base_Element="_QRmEIFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRmrMFJREeiyW7NaN4qWdw" base_Element="_QRmEIlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRnSQFJREeiyW7NaN4qWdw" base_Element="_QRmrMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRqVkFJREeiyW7NaN4qWdw" base_Element="_QRpugFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRq8oFJREeiyW7NaN4qWdw" base_Element="_QRqVkVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRq8olJREeiyW7NaN4qWdw" base_Element="_QRq8oVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRrjsVJREeiyW7NaN4qWdw" base_Element="_QRrjsFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRsKwFJREeiyW7NaN4qWdw" base_Element="_QRrjslJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRsx0FJREeiyW7NaN4qWdw" base_Element="_QRsKwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRsx0lJREeiyW7NaN4qWdw" base_Element="_QRsx0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRtY4FJREeiyW7NaN4qWdw" base_Element="_QRsx01JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRt_8FJREeiyW7NaN4qWdw" base_Element="_QRtY4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRt_8lJREeiyW7NaN4qWdw" base_Element="_QRt_8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRunAVJREeiyW7NaN4qWdw" base_Element="_QRunAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRvOEFJREeiyW7NaN4qWdw" base_Element="_QRunAlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRvOElJREeiyW7NaN4qWdw" base_Element="_QRvOEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRv1IVJREeiyW7NaN4qWdw" base_Element="_QRv1IFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRwcMVJREeiyW7NaN4qWdw" base_Element="_QRwcMFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRxDQFJREeiyW7NaN4qWdw" base_Element="_QRwcMlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRxqUFJREeiyW7NaN4qWdw" base_Element="_QRxDQVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRxqUlJREeiyW7NaN4qWdw" base_Element="_QRxqUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QRyRYFJREeiyW7NaN4qWdw" base_Element="_QRxqU1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR2i0VJREeiyW7NaN4qWdw" base_Element="_QR2i0FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR4YAVJREeiyW7NaN4qWdw" base_Element="_QR4YAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR4_EFJREeiyW7NaN4qWdw" base_Element="_QR4YAlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR5mIFJREeiyW7NaN4qWdw" base_Element="_QR4_EVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR5mIlJREeiyW7NaN4qWdw" base_Element="_QR5mIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR9QgFJREeiyW7NaN4qWdw" base_Element="_QR8pcFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR9QglJREeiyW7NaN4qWdw" base_Element="_QR9QgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR93kFJREeiyW7NaN4qWdw" base_Element="_QR9Qg1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR-eoFJREeiyW7NaN4qWdw" base_Element="_QR93kVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR-eolJREeiyW7NaN4qWdw" base_Element="_QR-eoVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR_FsFJREeiyW7NaN4qWdw" base_Element="_QR-eo1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR_FslJREeiyW7NaN4qWdw" base_Element="_QR_FsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QR_swVJREeiyW7NaN4qWdw" base_Element="_QR_swFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSAT0FJREeiyW7NaN4qWdw" base_Element="_QR_swlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSAT0lJREeiyW7NaN4qWdw" base_Element="_QSAT0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSA64FJREeiyW7NaN4qWdw" base_Element="_QSAT01JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSBh8FJREeiyW7NaN4qWdw" base_Element="_QSA64VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSBh8lJREeiyW7NaN4qWdw" base_Element="_QSBh8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSCJAVJREeiyW7NaN4qWdw" base_Element="_QSCJAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSCwEFJREeiyW7NaN4qWdw" base_Element="_QSCJAlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSCwElJREeiyW7NaN4qWdw" base_Element="_QSCwEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSDXIVJREeiyW7NaN4qWdw" base_Element="_QSDXIFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSD-MFJREeiyW7NaN4qWdw" base_Element="_QSDXIlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSD-MlJREeiyW7NaN4qWdw" base_Element="_QSD-MVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSElQVJREeiyW7NaN4qWdw" base_Element="_QSElQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QSFzYlJREeiyW7NaN4qWdw" base_Element="_QSFMUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_QSFzZFJREeiyW7NaN4qWdw" base_Element="_QSFMUlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSKr4FJREeiyW7NaN4qWdw" base_Element="_QSKE0FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSLS8FJREeiyW7NaN4qWdw" base_Element="_QSKr4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSL6AFJREeiyW7NaN4qWdw" base_Element="_QSLS8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSSnsFJREeiyW7NaN4qWdw" base_Element="_QSSAoFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSSnslJREeiyW7NaN4qWdw" base_Element="_QSSnsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSTOwFJREeiyW7NaN4qWdw" base_Element="_QSSns1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QST10VJREeiyW7NaN4qWdw" base_Element="_QST10FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSUc4FJREeiyW7NaN4qWdw" base_Element="_QST10lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSUc4lJREeiyW7NaN4qWdw" base_Element="_QSUc4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSZVYFJREeiyW7NaN4qWdw" base_Element="_QSYuUFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSZVYlJREeiyW7NaN4qWdw" base_Element="_QSZVYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSZ8cVJREeiyW7NaN4qWdw" base_Element="_QSZ8cFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSajgVJREeiyW7NaN4qWdw" base_Element="_QSajgFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSbKkVJREeiyW7NaN4qWdw" base_Element="_QSbKkFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSbxoFJREeiyW7NaN4qWdw" base_Element="_QSbKklJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QScYsFJREeiyW7NaN4qWdw" base_Element="_QSbxoVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSc_wFJREeiyW7NaN4qWdw" base_Element="_QScYsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSdm0FJREeiyW7NaN4qWdw" base_Element="_QSc_wVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSeN4FJREeiyW7NaN4qWdw" base_Element="_QSdm0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSe08FJREeiyW7NaN4qWdw" base_Element="_QSeN4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSfcAFJREeiyW7NaN4qWdw" base_Element="_QSe08VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSfcAlJREeiyW7NaN4qWdw" base_Element="_QSfcAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSn-4FJREeiyW7NaN4qWdw" base_Element="_QSnX0FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSn-4lJREeiyW7NaN4qWdw" base_Element="_QSn-4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSol8VJREeiyW7NaN4qWdw" base_Element="_QSol8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSpNAFJREeiyW7NaN4qWdw" base_Element="_QSol8lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSp0EFJREeiyW7NaN4qWdw" base_Element="_QSpNAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSp0ElJREeiyW7NaN4qWdw" base_Element="_QSp0EVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSqbIFJREeiyW7NaN4qWdw" base_Element="_QSp0E1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSrCMFJREeiyW7NaN4qWdw" base_Element="_QSqbIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSrpQFJREeiyW7NaN4qWdw" base_Element="_QSrCMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSsQUFJREeiyW7NaN4qWdw" base_Element="_QSrpQVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSsQUlJREeiyW7NaN4qWdw" base_Element="_QSsQUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSs3YFJREeiyW7NaN4qWdw" base_Element="_QSsQU1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QStecFJREeiyW7NaN4qWdw" base_Element="_QSs3YVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSuFgFJREeiyW7NaN4qWdw" base_Element="_QStecVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSuskFJREeiyW7NaN4qWdw" base_Element="_QSuFgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSvToFJREeiyW7NaN4qWdw" base_Element="_QSuskVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSv6sFJREeiyW7NaN4qWdw" base_Element="_QSvToVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSwhwFJREeiyW7NaN4qWdw" base_Element="_QSv6sVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSxI0FJREeiyW7NaN4qWdw" base_Element="_QSwhwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSxI0lJREeiyW7NaN4qWdw" base_Element="_QSxI0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSxv4FJREeiyW7NaN4qWdw" base_Element="_QSxI01JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSxv4lJREeiyW7NaN4qWdw" base_Element="_QSxv4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSyW8FJREeiyW7NaN4qWdw" base_Element="_QSxv41JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSy-AFJREeiyW7NaN4qWdw" base_Element="_QSyW8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSzlEFJREeiyW7NaN4qWdw" base_Element="_QSy-AVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QSzlElJREeiyW7NaN4qWdw" base_Element="_QSzlEVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QS0MIFJREeiyW7NaN4qWdw" base_Element="_QSzlE1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTaCAlJREeiyW7NaN4qWdw" base_Element="_QTaCAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTaCA1JREeiyW7NaN4qWdw" base_Element="_QTaCAFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTaCBFJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_QTceQFJREeiyW7NaN4qWdw" genericsValue="Goods" base_Element="_QTb3MVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTceQ1JREeiyW7NaN4qWdw" base_Element="_QTceQVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTdFUFJREeiyW7NaN4qWdw" base_Element="_QTceQVJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTdFUVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_QTe6h1JREeiyW7NaN4qWdw" genericsValue="AbstractUnit" base_Element="_QTe6glJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTgIoVJREeiyW7NaN4qWdw" base_Element="_QTfhk1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTgIolJREeiyW7NaN4qWdw" base_Element="_QTfhk1JREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTgIo1JREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTh91FJREeiyW7NaN4qWdw" base_Element="_QTh90FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTik4FJREeiyW7NaN4qWdw" base_Element="_QTh90FJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTik4VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTloNFJREeiyW7NaN4qWdw" base_Element="_QTloMFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTmPQFJREeiyW7NaN4qWdw" base_Element="_QTloMFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTmPQVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_QTm2VFJREeiyW7NaN4qWdw" genericsValue="? extends BuildableType" base_Element="_QTm2UFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QToEcFJREeiyW7NaN4qWdw" genericsValue="Unit" base_Element="_QTndYlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QTorgFJREeiyW7NaN4qWdw" genericsValue="? extends BuildableType" base_Element="_QToEclJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QTpSkFJREeiyW7NaN4qWdw" genericsValue="? extends BuildableType" base_Element="_QTorglJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTuLEFJREeiyW7NaN4qWdw" base_Element="_QTtkAVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTuLEVJREeiyW7NaN4qWdw" base_Element="_QTtkAVJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTuLElJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTwnUVJREeiyW7NaN4qWdw" base_Element="_QTwAQ1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QTwnUlJREeiyW7NaN4qWdw" base_Element="_QTwAQ1JREeiyW7NaN4qWdw">
    <annotations xmi:id="_QTwnU1JREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QTzqolJREeiyW7NaN4qWdw" base_Element="_QTzDklJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QT0RsFJREeiyW7NaN4qWdw" base_Element="_QTzDklJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QT0RsVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QT2t81JREeiyW7NaN4qWdw" base_Element="_QT2t8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Array xmi:id="_QT3VAFJREeiyW7NaN4qWdw" base_Element="_QT2t8lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QT4jIFJREeiyW7NaN4qWdw" genericsValue="ServerPlayer" base_Element="_QT38EVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QT5KMFJREeiyW7NaN4qWdw" base_Element="_QT4jIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QT5xQVJREeiyW7NaN4qWdw" base_Element="_QT5xQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QT6YUVJREeiyW7NaN4qWdw" base_Element="_QT6YUFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QT6_YVJREeiyW7NaN4qWdw" base_Element="_QT6_YFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QT7mcVJREeiyW7NaN4qWdw" base_Element="_QT7mcFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QT80kFJREeiyW7NaN4qWdw" genericsValue="ServerPlayer" base_Element="_QT8NgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QT-CtFJREeiyW7NaN4qWdw" base_Element="_QT-CsFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QT-pwFJREeiyW7NaN4qWdw" base_Element="_QT-CsFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QT-pwVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QT_34FJREeiyW7NaN4qWdw" base_Element="_QT_Q0lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QT_34VJREeiyW7NaN4qWdw" base_Element="_QT_Q0lJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QT_34lJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUEwZFJREeiyW7NaN4qWdw" base_Element="_QUEwYFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUFXcFJREeiyW7NaN4qWdw" base_Element="_QUEwYFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUFXcVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUGlkFJREeiyW7NaN4qWdw" base_Element="_QUF-gFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUGlkVJREeiyW7NaN4qWdw" base_Element="_QUF-gFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUGlklJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_QUMFIFJREeiyW7NaN4qWdw" base_Element="_QULeElJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QUNTQVJREeiyW7NaN4qWdw" base_Element="_QUNTQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:TypeParameterDeclaration xmi:id="_QUN6VFJREeiyW7NaN4qWdw" typeParameterDeclarationValue="T extends TransactionSession" base_Operation="_QUN6UFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUN6VlJREeiyW7NaN4qWdw" base_Element="_QUN6UFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUOhYFJREeiyW7NaN4qWdw" genericsValue="T" base_Element="_QUN6UVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:TypeParameterDeclaration xmi:id="_QUPIcVJREeiyW7NaN4qWdw" typeParameterDeclarationValue="T extends TransactionSession" base_Operation="_QUOhYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUPIc1JREeiyW7NaN4qWdw" base_Element="_QUOhYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUPvgFJREeiyW7NaN4qWdw" genericsValue="T" base_Element="_QUOhYlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QURksFJREeiyW7NaN4qWdw" base_Element="_QUQ9plJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUXESlJREeiyW7NaN4qWdw" base_Element="_QUXERlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUXrUFJREeiyW7NaN4qWdw" base_Element="_QUXERlJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUXrUVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUb8xFJREeiyW7NaN4qWdw" base_Element="_QUb8wlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUcj0FJREeiyW7NaN4qWdw" base_Element="_QUb8wlJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUcj0VJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUhcVlJREeiyW7NaN4qWdw" base_Element="_QUhcVFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUiDYFJREeiyW7NaN4qWdw" base_Element="_QUhcVFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUiDYVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUiDZVJREeiyW7NaN4qWdw" base_Element="_QUiDYlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUiqcFJREeiyW7NaN4qWdw" base_Element="_QUiDYlJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUiqcVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_QUjRglJREeiyW7NaN4qWdw" genericsValue="? extends Tile" base_Element="_QUiqdlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUlGsFJREeiyW7NaN4qWdw" genericsValue="Tile" base_Element="_QUkfpFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUltwFJREeiyW7NaN4qWdw" genericsValue="AbstractUnit" base_Element="_QUlGslJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUmU0VJREeiyW7NaN4qWdw" genericsValue="Unit" base_Element="_QUltwlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUm74FJREeiyW7NaN4qWdw" genericsValue="Unit" base_Element="_QUltw1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUni8FJREeiyW7NaN4qWdw" genericsValue="AbstractUnit" base_Element="_QUm74lJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QUrNVFJREeiyW7NaN4qWdw" base_Element="_QUrNUFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Annotations xmi:id="_QUr0YFJREeiyW7NaN4qWdw" base_Element="_QUrNUFJREeiyW7NaN4qWdw">
    <annotations xmi:id="_QUr0YVJREeiyW7NaN4qWdw" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_QUx7AFJREeiyW7NaN4qWdw" base_Element="_QUxT8FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QUyiEFJREeiyW7NaN4qWdw" genericsValue="CombatResult" base_Element="_QUx7BFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QU_9c1JREeiyW7NaN4qWdw" genericsValue="? extends Tile" base_Element="_QU_9cVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Generics xmi:id="_QVByo1JREeiyW7NaN4qWdw" genericsValue="AbstractUnit" base_Element="_QVByoFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVMxwlJREeiyW7NaN4qWdw" base_Element="_QVMxwVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVNY0FJREeiyW7NaN4qWdw" base_Element="_QVMxw1JREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_QVNY0VJREeiyW7NaN4qWdw" name="getSettlement" method="_QVfssFJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_QVNY0lJREeiyW7NaN4qWdw" type="_QRWzkVJREeiyW7NaN4qWdw" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVNY1FJREeiyW7NaN4qWdw" base_Element="_QVNY01JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVN_41JREeiyW7NaN4qWdw" base_Element="_QVN_4lJREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_QVOm8FJREeiyW7NaN4qWdw" name="getCapture" method="_QVg60FJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_QVOm8VJREeiyW7NaN4qWdw" type="_QRbFAVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVOm8lJREeiyW7NaN4qWdw" value="*"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVPOAVJREeiyW7NaN4qWdw" base_Element="_QVPOAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVPOA1JREeiyW7NaN4qWdw" base_Element="_QVPOAlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVP1EFJREeiyW7NaN4qWdw" base_Element="_QVPOBFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVQcIFJREeiyW7NaN4qWdw" base_Element="_QVP1FlJREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_QVQcIVJREeiyW7NaN4qWdw" name="getPrice" method="_QVg62lJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_QVQcIlJREeiyW7NaN4qWdw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVSRVFJREeiyW7NaN4qWdw" base_Element="_QVSRUlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVUGhFJREeiyW7NaN4qWdw" base_Element="_QVUGg1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVVUoFJREeiyW7NaN4qWdw" base_Element="_QVUtlFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVV7s1JREeiyW7NaN4qWdw" base_Element="_QVV7slJREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_QVWiwFJREeiyW7NaN4qWdw" name="getMovesLeft" method="_QVyAllJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_QVWiwVJREeiyW7NaN4qWdw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVWiw1JREeiyW7NaN4qWdw" base_Element="_QVWiwlJREeiyW7NaN4qWdw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_QVWixFJREeiyW7NaN4qWdw" name="getActionTaken" method="_QVyAmFJREeiyW7NaN4qWdw">
      <ownedParameter xmi:id="_QVWixVJREeiyW7NaN4qWdw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVXJ0FJREeiyW7NaN4qWdw" base_Element="_QVWixlJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVXJ0lJREeiyW7NaN4qWdw" base_Element="_QVXJ0VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVXw4VJREeiyW7NaN4qWdw" base_Element="_QVXw4FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVa0MFJREeiyW7NaN4qWdw" base_Element="_QVaNKFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVbbQ1JREeiyW7NaN4qWdw" base_Element="_QVbbQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_QVcCUlJREeiyW7NaN4qWdw" base_Element="_QVbbRFJREeiyW7NaN4qWdw"/>
  <uml:OpaqueBehavior xmi:id="_QVfssFJREeiyW7NaN4qWdw" name="getSettlement" specification="_QVNY0VJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_QVgTwFJREeiyW7NaN4qWdw" type="_QRWzkVJREeiyW7NaN4qWdw" direction="return"/>
    <language>java</language>
    <body>return settlement;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_QVg60FJREeiyW7NaN4qWdw" name="getCapture" specification="_QVOm8FJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_QVg60VJREeiyW7NaN4qWdw" type="_QRbFAVJREeiyW7NaN4qWdw" isOrdered="true" direction="return">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QVg60lJREeiyW7NaN4qWdw" value="*"/>
    </ownedParameter>
    <language>java</language>
    <body>return capture;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_QVg62lJREeiyW7NaN4qWdw" name="getPrice" specification="_QVQcIVJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_QVg621JREeiyW7NaN4qWdw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>return this.price;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_QVyAllJREeiyW7NaN4qWdw" name="getMovesLeft" specification="_QVWiwFJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_QVyAl1JREeiyW7NaN4qWdw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>return movesLeft;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_QVyAmFJREeiyW7NaN4qWdw" name="getActionTaken" specification="_QVWixFJREeiyW7NaN4qWdw">
    <ownedParameter xmi:id="_QVyAmVJREeiyW7NaN4qWdw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </ownedParameter>
    <language>java</language>
    <body>return actionTaken;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:Reference xmi:id="_QWWoUFJREeiyW7NaN4qWdw" base_Element="_QWWBQFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWXPYFJREeiyW7NaN4qWdw" base_Element="_QWWoUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWX2cFJREeiyW7NaN4qWdw" base_Element="_QWXPYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWYdgFJREeiyW7NaN4qWdw" base_Element="_QWX2cVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWYdg1JREeiyW7NaN4qWdw" base_Element="_QWYdgVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWZEklJREeiyW7NaN4qWdw" base_Element="_QWZEkFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWZroFJREeiyW7NaN4qWdw" base_Element="_QWZEk1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWaSsFJREeiyW7NaN4qWdw" base_Element="_QWZroVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWa5wFJREeiyW7NaN4qWdw" base_Element="_QWaSsVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWa5w1JREeiyW7NaN4qWdw" base_Element="_QWa5wVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWbg0lJREeiyW7NaN4qWdw" base_Element="_QWbg0FJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWcH4FJREeiyW7NaN4qWdw" base_Element="_QWbg01JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWcu8FJREeiyW7NaN4qWdw" base_Element="_QWcH4VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWcu81JREeiyW7NaN4qWdw" base_Element="_QWcu8VJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWdWAlJREeiyW7NaN4qWdw" base_Element="_QWdWAFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWd9EFJREeiyW7NaN4qWdw" base_Element="_QWdWA1JREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWekIFJREeiyW7NaN4qWdw" base_Element="_QWd9EVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWfLMFJREeiyW7NaN4qWdw" base_Element="_QWekIVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWfLM1JREeiyW7NaN4qWdw" base_Element="_QWfLMVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWfyQFJREeiyW7NaN4qWdw" base_Element="_QWfLNFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWgZUFJREeiyW7NaN4qWdw" base_Element="_QWfyQVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWhAYFJREeiyW7NaN4qWdw" base_Element="_QWgZUVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWhAY1JREeiyW7NaN4qWdw" base_Element="_QWhAYVJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWhnclJREeiyW7NaN4qWdw" base_Element="_QWhncFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWiOglJREeiyW7NaN4qWdw" base_Element="_QWiOgFJREeiyW7NaN4qWdw"/>
  <UMLLabProfile:Reference xmi:id="_QWi1kFJREeiyW7NaN4qWdw" base_Element="_QWiOg1JREeiyW7NaN4qWdw"/>
</xmi:XMI>
